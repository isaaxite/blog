{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/wechat_qrcode.jpg","path":"images/wechat_qrcode.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat_qrcode.png","path":"images/wechat_qrcode.png","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/46. 全排列.md","hash":"abba05c24759c927d334834aae9ea45e6ab95519","modified":1676678779355},{"_id":"source/_posts/Rust学习.md","hash":"b969c71f267bb75076d9b810b6c320a02e99ebd6","modified":1676573905373},{"_id":"source/_posts/hexo：从0开始与踩坑实录.md","hash":"13d8827f80e70a3353944e726bb4b661b0551096","modified":1676573905373},{"_id":"source/_posts/oauth2实践.md","hash":"fb98732497c507ad91082794c1720f61d5f3f45c","modified":1676675434625},{"_id":"source/_posts/面试题46-把数字翻译成字符串.md","hash":"00dbfca2d29304b6b83ace375b7ea343534f34c0","modified":1676573905396},{"_id":"source/_posts/面试题50. 第一个只出现一次的字符.md","hash":"961f69f4b20bdafae0cf4b00bae780e45586ab67","modified":1676677409706},{"_id":"source/_posts/面试题30. 包含min函数的栈.md","hash":"4a2d7b7dcd69efbefcfe260c6ff14815bb1929ec","modified":1676676993074},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点.md","hash":"1ad14715e884df6b61f4547860dff41f12a0ddde","modified":1676678414816},{"_id":"source/_posts/面试题47. 礼物的最大价值.md","hash":"f534b34f182002c159b1a7b94ada13b0ff6fa193","modified":1676677879774},{"_id":"source/_posts/面试题55 - II. 平衡二叉树.md","hash":"1b66daaab654664737bf42de061d3ee780edd248","modified":1676678840412},{"_id":"source/_posts/面试题53 - II. 0～n-1中缺失的数字.md","hash":"0e3bdb07f602fbcce5cecd8066ef04b1101d4d17","modified":1676678968363},{"_id":"source/_posts/面试题58 - I. 翻转单词顺序.md","hash":"05dcf6076f66bbc2a4981616c4fc3de5a79258dc","modified":1676677682980},{"_id":"source/_posts/面试题49. 丑数.md","hash":"b0f1d939b0ea663fd6367638e5730eeae840c261","modified":1676677264146},{"_id":"source/_posts/面试题59 - II. 队列的最大值.md","hash":"96f2f8fb8a4d4ea2ad32f15efb59c9646e875549","modified":1676677617440},{"_id":"source/_posts/面试题59 - I. 滑动窗口的最大值.md","hash":"d554bd1336888d83031f0330e535b9dedc6e259d","modified":1676678330445},{"_id":"source/_posts/面试题60. n个骰子的点数.md","hash":"42ef6238c63a964edcea79c0cb2841eb761d5eba","modified":1676678708643},{"_id":"source/_posts/面试题57 - II. 和为s的连续正数序列.md","hash":"24ffeba9fc7fb9a798eee2c0bfdd2b7baef4ed3b","modified":1676677752548},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字.md","hash":"07c39c9e9a495f06af429db9bce3a51f99f013ed","modified":1676674173049},{"_id":"source/_posts/面试题67. 把字符串转换成整数.md","hash":"8513c9413606eeb2dab88058a3789fb5f6be378f","modified":1676676937603},{"_id":"source/images/avatar.jpg","hash":"ca49e5cfc0d31651c3a2b8d0148204ecdbd0b133","modified":1676669688958},{"_id":"source/_posts/面试题61. 扑克牌中的顺子.md","hash":"dddf180e09414b39665d3bd2d96eaf901da92b9a","modified":1676677183112},{"_id":"source/categories/index.md","hash":"e8e5364929517e7cd431c68a4175320d30399a05","modified":1676573905399},{"_id":"source/tags/index.md","hash":"e7cf6395863ce64f3cf8bf08d736f49b39d823ab","modified":1676573905401},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","hash":"5df7db65a5cb90909a924f0516166079d8d6bc34","modified":1676573905375},{"_id":"source/_posts/oauth2实践/2022-10-07-08-14-35.png","hash":"3b85b200ccf5424c8c62577884cdc98e4028b034","modified":1676675167896},{"_id":"source/_posts/oauth2实践/2022-10-08-05-42-33.png","hash":"0aaddbc77f8c241fb7138b42c6acc434b2ad93db","modified":1676675167905},{"_id":"source/_posts/oauth2实践/2022-10-09-07-16-11.png","hash":"f7d45b19a044dcc5f77979d445916d9bb7364061","modified":1676675167915},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_2.png","hash":"d36a34dfb0f680f6595927ea906b6709f6ed6137","modified":1676675167875},{"_id":"source/_posts/oauth2实践/2022-10-24-03-52-06.png","hash":"dd51b021fae7595b373bb26ea58c55a9ebda02a9","modified":1676675167919},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_1.png","hash":"caed517185571d6152535de107b811339dd4120e","modified":1676675167874},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_3.png","hash":"f23312984e4e54e4b72d2b328da7666936d7715f","modified":1676675167876},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1676675167877},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","hash":"cdeef9460fd0f29ed5a5bd011c8a0dddfa8436e5","modified":1676674157760},{"_id":"source/images/wechat_qrcode.jpg","hash":"b951c872f7fa231629d71a6f63e78f49d51db6fb","modified":1676670941049},{"_id":"source/images/wechatpay.jpg","hash":"fb99901b7dd6b048d15630ad758503fb5be335d9","modified":1676673175866},{"_id":"source/_posts/oauth2实践/2022-10-07-14-34-57.png","hash":"73228e817c684995c1026830e0b9e3c32b1af8bb","modified":1676675167902},{"_id":"source/_posts/oauth2实践/2022-10-07-12-05-02.png","hash":"960802d618574d41a103b4a24c1371bd853aa401","modified":1676675167899},{"_id":"source/_posts/oauth2实践/2022-10-07-14-51-53.png","hash":"ae4074ae944137af88d5a950c4bbc0510c105366","modified":1676675167903},{"_id":"source/_posts/oauth2实践/2022-10-09-06-17-02.png","hash":"2d279ae769dc04ceb432d2c177414075283e5c82","modified":1676675167912},{"_id":"source/_posts/oauth2实践/2022-10-09-07-08-23.png","hash":"1b6738a023da8e2c53099547927399190ce0ecad","modified":1676675167913},{"_id":"source/_posts/oauth2实践/2022-10-09-07-15-45.png","hash":"e457300dab9052a3af7de80ccce6b05fbeec1b15","modified":1676675167914},{"_id":"source/_posts/oauth2实践/2022-10-09-12-16-09.png","hash":"aa57bc29fd6d5ad3f73d9d6d5860939088edaf0e","modified":1676675167916},{"_id":"source/images/alipay.jpg","hash":"0738cbd11a0d3b8319f1d7c78adddc96bf6e5789","modified":1676673147441},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","hash":"c739e75d121aca4cbf9a4e74b767249c81d84a25","modified":1676573905394},{"_id":"source/_posts/oauth2实践/2022-10-07-03-23-41.png","hash":"8dabc5e9c129b278f9f55c9776b4dbece7dcb2b5","modified":1676675167895},{"_id":"source/_posts/oauth2实践/2022-10-07-11-32-59.png","hash":"4619a0e7e2091307f07c2b0eaabb44828433acba","modified":1676675167898},{"_id":"source/_posts/oauth2实践/2022-10-07-12-10-49.png","hash":"b81451ff07907e0a055ba1cad2bfa25830d99d76","modified":1676675167900},{"_id":"source/_posts/oauth2实践/2022-10-07-16-00-30.png","hash":"71d06949252f91fd0209085035c36f66fb1971a9","modified":1676675167905},{"_id":"source/_posts/oauth2实践/2022-10-24-00-46-21.png","hash":"228a5e7adcb79034ed63c1fb8a07d8b643bff3c5","modified":1676675167918},{"_id":"source/images/wechat_qrcode.png","hash":"39a9d13496251800b07f63b98c8298ee08cd9d1f","modified":1676670622902},{"_id":"source/_posts/oauth2实践/2022-10-08-14-54-58.png","hash":"e43f591016e0b7d89eb72d80f13db8f93d9b51bb","modified":1676675167910},{"_id":"source/_posts/oauth2实践/2022-10-08-13-31-55.png","hash":"34c9c4c3c341b1c30fe03ab3d08af3bb8b35e727","modified":1676675167908},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1675225243000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1675225243000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1675225243000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1675225243000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1675225243000},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1675225243000},{"_id":"themes/next/_vendors.yml","hash":"48ae2854826d6ad46cca5a5fdfcc13f09870c8b2","modified":1675225243000},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1675225243000},{"_id":"themes/next/_config.yml","hash":"0564905a1f88ba2797e4e72e5d45109a8421280b","modified":1676676066223},{"_id":"themes/next/package.json","hash":"3b8084a2e1cb83ca6bbb1066599ead017c4202f3","modified":1675225243000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1675225243000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1675225243000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1675225243000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1675225243000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1675225243000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1675225243000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1675225243000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1675225243000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1675225243000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1675225243000},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1675225243000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1675225243000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1675225243000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1675225243000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1675225243000},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1675225243000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1675225243000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1675225243000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1675225243000},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1675225243000},{"_id":"themes/next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1675225243000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1675225243000},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1675225243000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1675225243000},{"_id":"themes/next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1675225243000},{"_id":"themes/next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1675225243000},{"_id":"themes/next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1675225243000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1675225243000},{"_id":"themes/next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1675225243000},{"_id":"themes/next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1675225243000},{"_id":"themes/next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1675225243000},{"_id":"themes/next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1675225243000},{"_id":"themes/next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1675225243000},{"_id":"themes/next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1675225243000},{"_id":"themes/next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1675225243000},{"_id":"themes/next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1675225243000},{"_id":"themes/next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1675225243000},{"_id":"themes/next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1675225243000},{"_id":"themes/next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1675225243000},{"_id":"themes/next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1675225243000},{"_id":"themes/next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1675225243000},{"_id":"themes/next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1675225243000},{"_id":"themes/next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1675225243000},{"_id":"themes/next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1675225243000},{"_id":"themes/next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1675225243000},{"_id":"themes/next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1675225243000},{"_id":"themes/next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1675225243000},{"_id":"themes/next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1675225243000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1675225243000},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"8da13d7c325addb6b7c1d9ac3683dafd43e3709a","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1675225243000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1675225243000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1675225243000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"f1bf7f86c11419b63323bd21e388e6bdaf24d27d","modified":1675225243000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1675225243000},{"_id":"themes/next/.github/workflows/pr-reminder.yml","hash":"3ab3e8d9dc0e1d9bd54f44fba476792fb1ee190d","modified":1675225243000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1675225243000},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1675225243000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1675225243000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1675225243000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1675225243000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1675225243000},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1675225243000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1675225243000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1675225243000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1675225243000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1675225243000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1675225243000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1675225243000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1675225243000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1675225243000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1675225243000},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1675225243000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1675225243000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1675225243000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1675225243000},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1675225243000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1675225243000},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1675225243000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1675225243000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1675225243000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1675225243000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1675225243000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1675225243000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1675225243000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1675225243000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1675225243000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1675225243000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1675225243000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1675225243000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1675225243000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1675225243000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1675225243000},{"_id":"themes/next/source/css/_mixins.styl","hash":"04a07a4dbeb00683d783eff26c44492c35b924e0","modified":1675225243000},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1675225243000},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1675225243000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1675225243000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1675225243000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1675225243000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1675225243000},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1675225243000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1675225243000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1675225243000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1675225243000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1675225243000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1675225243000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1675225243000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1675225243000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1675225243000},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1675225243000},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1675225243000},{"_id":"themes/next/source/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1675225243000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1675225243000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1675225243000},{"_id":"themes/next/source/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1675225243000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1675225243000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1675225243000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1675225243000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1675225243000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1675225243000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1675225243000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1675225243000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1675225243000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1675225243000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1675225243000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1675225243000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1675225243000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1675225243000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1675225243000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1675225243000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1675225243000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1675225243000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1675225243000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9845209c54174a42cbff5b5efd5e2e2fb7e60589","modified":1675225243000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1675225243000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1675225243000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1675225243000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1675225243000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"cef9c5f9524fd01b59b0a89e51904b42cbdedc8c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1675225243000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1675225243000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1675225243000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1675225243000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1675225243000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1675225243000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1675225243000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1675225243000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"0c79462439b1361034a03590cd69a8abb3a678a6","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f3506fd0c0303ea365de1c7774d98a1a3f3027cf","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1675225243000},{"_id":"public/atom.xml","hash":"b011479e4005e967e3d27577cd3e88003cc061e8","modified":1676679147362},{"_id":"public/search.xml","hash":"94463c46961363f90c8bf79f01dd301adc6c99dc","modified":1676679147362},{"_id":"public/tags/index.html","hash":"8564d9d04d020a34f216d30111f963f96e63db84","modified":1676679147362},{"_id":"public/categories/index.html","hash":"4285e74b6e9d08d2704d1ea9cb45d49b58f43353","modified":1676679147362},{"_id":"public/archives/2020/page/2/index.html","hash":"8f7841305cf95a3987a7bd4c609377443c109790","modified":1676679147362},{"_id":"public/archives/2020/04/page/2/index.html","hash":"5c4d36a0ec27b69b1a0d7d7d35775097aa7133ce","modified":1676679147362},{"_id":"public/archives/2021/index.html","hash":"4a676a23cf0493cc2be0de7849fe2d458a326238","modified":1676679147362},{"_id":"public/archives/2021/03/index.html","hash":"61b67914caa8bf7fded00e29da3c777a2bfef310","modified":1676679147362},{"_id":"public/archives/2022/index.html","hash":"086b8f7ce18f70078b9e2789a7fbd8617d7a1dcd","modified":1676679147362},{"_id":"public/archives/2022/10/index.html","hash":"0bc639e5ac8bc1262901a6c94942455b641af16b","modified":1676679147362},{"_id":"public/archives/2023/index.html","hash":"8474a3f3399e04930668b93bff7a4c80919b61e1","modified":1676679147362},{"_id":"public/archives/2023/02/index.html","hash":"e39cb0a09329275237a65acec03b66a0530300ef","modified":1676679147362},{"_id":"public/categories/算法题/page/2/index.html","hash":"9d68ccaeaee6a135badb37af31f0a633a29386a9","modified":1676679147362},{"_id":"public/categories/Rust/index.html","hash":"8073719ddd42fbbd77f3fdd77c4c47ed4db8986b","modified":1676679147362},{"_id":"public/categories/安全/index.html","hash":"ceb79c03508b57cce8e363bf79dbcef62f8c9dd4","modified":1676679147362},{"_id":"public/categories/hexo/index.html","hash":"b6a2dd7d3e3ae06aea07cf60b10e36248876af5e","modified":1676679147362},{"_id":"public/tags/算法题/page/2/index.html","hash":"5a72dfaf6a5564e5d5eb6dfd73dd9f72921fca77","modified":1676679147362},{"_id":"public/tags/旧文迁移/page/2/index.html","hash":"0b11dc37cc32a8b9291f76bfe8f4020aca393135","modified":1676679147362},{"_id":"public/tags/Rust/index.html","hash":"7fa974846b96fa122b99b296ffd9094bf75844e7","modified":1676679147362},{"_id":"public/tags/oauth2/index.html","hash":"7629588f177650c2b9d008d1a9a6d9f084c74d98","modified":1676679147362},{"_id":"public/tags/hexo/index.html","hash":"1321be6d087e510837dff38e01500026c07578fd","modified":1676679147362},{"_id":"public/tags/LCOF/index.html","hash":"f2066474b223919d5427d147be0e55635531de86","modified":1676679147362},{"_id":"public/2023/02/15/Rust学习/index.html","hash":"adbface624de4e571dd7078a205cf5dede31ded9","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/index.html","hash":"f646cc842ccfb42c60f4d97039c6dc5c67f97c49","modified":1676679147362},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/index.html","hash":"5a545da473118fbb7eed52bfa9d38df9c448a6a2","modified":1676679147362},{"_id":"public/2020/04/17/面试题61. 扑克牌中的顺子/index.html","hash":"2ab0453c2823e16a196d028e10864367bd75dfc3","modified":1676679147362},{"_id":"public/2020/04/17/46. 全排列/index.html","hash":"246b796372265310584965abbb9d60d75bd1b55e","modified":1676679147362},{"_id":"public/2020/04/17/面试题47. 礼物的最大价值/index.html","hash":"1b9c279ce2e831fba9d648514f99802ccc9f65f2","modified":1676679147362},{"_id":"public/2020/04/17/面试题49. 丑数/index.html","hash":"5629680570cc66d43ff0563f6793bcff6d66a8a8","modified":1676679147362},{"_id":"public/2020/04/17/面试题59 - II. 队列的最大值/index.html","hash":"9e3fed50eab96823e9a7b7a4e44df490f88494de","modified":1676679147362},{"_id":"public/2020/04/17/面试题67. 把字符串转换成整数/index.html","hash":"82bade6a4fe51f53f3fe596fed3746ff7d30dd34","modified":1676679147362},{"_id":"public/2020/04/17/面试题46-把数字翻译成字符串/index.html","hash":"d8eae4538cd2b0f61686be342da65549470d229d","modified":1676679147362},{"_id":"public/2020/04/17/面试题62-圆圈中最后剩下的数字/index.html","hash":"4a2aea723aad4840bf3cceef7ed14fc75d657aac","modified":1676679147362},{"_id":"public/2020/04/16/面试题30. 包含min函数的栈/index.html","hash":"7990032f8785a91963c7b0f8697ed431e52b5b5f","modified":1676679147362},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/index.html","hash":"1cc037eff2f266b5a797df2b6b5aceec0e740829","modified":1676679147362},{"_id":"public/2020/04/16/面试题53 - II. 0～n-1中缺失的数字/index.html","hash":"5c1ec68a377b19ed9fabd1105f4dec9aa3e9fa3e","modified":1676679147362},{"_id":"public/2020/04/16/面试题55 - II. 平衡二叉树/index.html","hash":"6b5ad7aaaf314f3e07d35c2cc80d702404f8d064","modified":1676679147362},{"_id":"public/2020/04/16/面试题57 - II. 和为s的连续正数序列/index.html","hash":"a5886245cd167a56a769bd28db3f9534dd020cc3","modified":1676679147362},{"_id":"public/2020/04/16/面试题58 - I. 翻转单词顺序/index.html","hash":"40af0f0523c9f0119c2a8c1bf7426764d5b1453c","modified":1676679147362},{"_id":"public/2020/04/16/面试题59 - I. 滑动窗口的最大值/index.html","hash":"06d348bcf3cd5baf17642a7cdd53f946c529ab1c","modified":1676679147362},{"_id":"public/2020/04/16/面试题60. n个骰子的点数/index.html","hash":"e532416daf10b01ee1328fe0a90e7d9e65679506","modified":1676679147362},{"_id":"public/2020/04/16/面试题50. 第一个只出现一次的字符/index.html","hash":"988608b7314adc8fce773a86253480fece0efbf7","modified":1676679147362},{"_id":"public/archives/index.html","hash":"55d6d8d3608f7c1950c5edd440a819bb76c2970f","modified":1676679147362},{"_id":"public/archives/page/2/index.html","hash":"beacca8b83327b83491ecff9be50fc3dd9d2d6c9","modified":1676679147362},{"_id":"public/archives/2020/index.html","hash":"63627ec6cb48bb966b9e6944d2d6c07aef88129e","modified":1676679147362},{"_id":"public/archives/2020/04/index.html","hash":"1c50fc7b6622635c491380fea16254ea3c6dc69d","modified":1676679147362},{"_id":"public/categories/算法题/index.html","hash":"9292ee6d2de2c9ffb8be2428832bcd284843ffe9","modified":1676679147362},{"_id":"public/index.html","hash":"954db7a2aaf9b215b003fae6f81613426576f595","modified":1676679147362},{"_id":"public/page/2/index.html","hash":"8ea0afae31bce8bdb77fc686823faf9e9a3cf4dc","modified":1676679147362},{"_id":"public/tags/算法题/index.html","hash":"2e52408422e3bea588c52d305d2a050ae007e0c1","modified":1676679147362},{"_id":"public/tags/旧文迁移/index.html","hash":"1068179ff05c8357fa946ee37973e13427e52611","modified":1676679147362},{"_id":"public/images/avatar.jpg","hash":"ca49e5cfc0d31651c3a2b8d0148204ecdbd0b133","modified":1676679147362},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1676679147362},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1676679147362},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1676679147362},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1676679147362},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1676679147362},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-08-14-35.png","hash":"3b85b200ccf5424c8c62577884cdc98e4028b034","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-05-42-33.png","hash":"0aaddbc77f8c241fb7138b42c6acc434b2ad93db","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-16-11.png","hash":"f7d45b19a044dcc5f77979d445916d9bb7364061","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-24-03-52-06.png","hash":"dd51b021fae7595b373bb26ea58c55a9ebda02a9","modified":1676679147362},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","hash":"5df7db65a5cb90909a924f0516166079d8d6bc34","modified":1676679147362},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_1.png","hash":"caed517185571d6152535de107b811339dd4120e","modified":1676679147362},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_2.png","hash":"d36a34dfb0f680f6595927ea906b6709f6ed6137","modified":1676679147362},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_3.png","hash":"f23312984e4e54e4b72d2b328da7666936d7715f","modified":1676679147362},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1676679147362},{"_id":"public/2020/04/17/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","hash":"cdeef9460fd0f29ed5a5bd011c8a0dddfa8436e5","modified":1676679147362},{"_id":"public/images/wechat_qrcode.jpg","hash":"b951c872f7fa231629d71a6f63e78f49d51db6fb","modified":1676679147362},{"_id":"public/images/wechatpay.jpg","hash":"fb99901b7dd6b048d15630ad758503fb5be335d9","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-12-05-02.png","hash":"960802d618574d41a103b4a24c1371bd853aa401","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-14-34-57.png","hash":"73228e817c684995c1026830e0b9e3c32b1af8bb","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-14-51-53.png","hash":"ae4074ae944137af88d5a950c4bbc0510c105366","modified":1676679147362},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1676679147362},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1676679147362},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1676679147362},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1676679147362},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1676679147362},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1676679147362},{"_id":"public/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1676679147362},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1676679147362},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1676679147362},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1676679147362},{"_id":"public/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1676679147362},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1676679147362},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1676679147362},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1676679147362},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1676679147362},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1676679147362},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1676679147362},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1676679147362},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1676679147362},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1676679147362},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1676679147362},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1676679147362},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1676679147362},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1676679147362},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1676679147362},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1676679147362},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1676679147362},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1676679147362},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1676679147362},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1676679147362},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1676679147362},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1676679147362},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1676679147362},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1676679147362},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1676679147362},{"_id":"public/css/main.css","hash":"ee895a1050c086356084eb212caa609bb32d2bde","modified":1676679147362},{"_id":"public/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-06-17-02.png","hash":"2d279ae769dc04ceb432d2c177414075283e5c82","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-15-45.png","hash":"e457300dab9052a3af7de80ccce6b05fbeec1b15","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-08-23.png","hash":"1b6738a023da8e2c53099547927399190ce0ecad","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-12-16-09.png","hash":"aa57bc29fd6d5ad3f73d9d6d5860939088edaf0e","modified":1676679147362},{"_id":"public/images/alipay.jpg","hash":"0738cbd11a0d3b8319f1d7c78adddc96bf6e5789","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-03-23-41.png","hash":"8dabc5e9c129b278f9f55c9776b4dbece7dcb2b5","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-11-32-59.png","hash":"4619a0e7e2091307f07c2b0eaabb44828433acba","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-12-10-49.png","hash":"b81451ff07907e0a055ba1cad2bfa25830d99d76","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-16-00-30.png","hash":"71d06949252f91fd0209085035c36f66fb1971a9","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-24-00-46-21.png","hash":"228a5e7adcb79034ed63c1fb8a07d8b643bff3c5","modified":1676679147362},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","hash":"c739e75d121aca4cbf9a4e74b767249c81d84a25","modified":1676679147362},{"_id":"public/images/wechat_qrcode.png","hash":"39a9d13496251800b07f63b98c8298ee08cd9d1f","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-14-54-58.png","hash":"e43f591016e0b7d89eb72d80f13db8f93d9b51bb","modified":1676679147362},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-13-31-55.png","hash":"34c9c4c3c341b1c30fe03ab3d08af3bb8b35e727","modified":1676679147362}],"Category":[{"name":"算法题","_id":"cle97h2m900048snr7e2y6iuk"},{"name":"Rust","_id":"cle97h2mc00098snrcbxg4te4"},{"name":"安全","_id":"cle97h2mf000e8snr3vb8avq4"},{"name":"hexo","_id":"cle97h2mh000m8snrcjp6786h"}],"Data":[],"Page":[{"title":"tags","date":"2023-02-14T09:18:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-14 17:18:56\ntype: \"tags\"\n---\n","updated":"2023-02-16T18:58:25.401Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cle97h2m100008snr5x0907bp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2023-02-14T08:56:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n","updated":"2023-02-16T18:58:25.399Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cle97h2m700028snr5x1wdatn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"46. 全排列","date":"2020-04-16T23:33:59.000Z","_content":"\n给定一个 没有重复 数字的序列，返回其所有可能的全排列。\n\n<!-- more -->\n\n示例:\n\n输入: [1,2,3]\n输出:\n```\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/permutations\n\n## 1.深度优先（比较隐含的回溯）\n\n由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute1 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, []);\n\n  function dfs(nums, visited) {\n    if (nums.length === 1) {\n      visited.push(nums[0]);\n      res.push(visited);\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      dfs([...nums.slice(0, i), ...nums.slice(i + 1)], [nums[i], ...visited]);\n    }\n  }\n  return res;\n};\n```\n\n## 2.显式的回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute2 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, [], {}, res);\n\n  function dfs(nums, path, visited, res) {\n    if (path.length === nums.length) {\n      res.push(path.slice());\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      if (!visited[i]) {\n        visited[i] = true;\n        path.push(nums[i]);\n        dfs(nums, path, visited, res);\n        visited[i] = false;\n        path.pop();\n      }\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/46. 全排列.md","raw":"---\ntitle: 46. 全排列\ndate: 2020-04-17 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n给定一个 没有重复 数字的序列，返回其所有可能的全排列。\n\n<!-- more -->\n\n示例:\n\n输入: [1,2,3]\n输出:\n```\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/permutations\n\n## 1.深度优先（比较隐含的回溯）\n\n由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute1 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, []);\n\n  function dfs(nums, visited) {\n    if (nums.length === 1) {\n      visited.push(nums[0]);\n      res.push(visited);\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      dfs([...nums.slice(0, i), ...nums.slice(i + 1)], [nums[i], ...visited]);\n    }\n  }\n  return res;\n};\n```\n\n## 2.显式的回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute2 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, [], {}, res);\n\n  function dfs(nums, path, visited, res) {\n    if (path.length === nums.length) {\n      res.push(path.slice());\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      if (!visited[i]) {\n        visited[i] = true;\n        path.push(nums[i]);\n        dfs(nums, path, visited, res);\n        visited[i] = false;\n        path.pop();\n      }\n    }\n  }\n  return res;\n};\n```\n","slug":"46. 全排列","published":1,"updated":"2023-02-18T00:06:19.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2m300018snrfufif02p","content":"<p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/permutations\">https://leetcode-cn.com/problems/permutations</a></p>\n<h2 id=\"1-深度优先（比较隐含的回溯）\"><a href=\"#1-深度优先（比较隐含的回溯）\" class=\"headerlink\" title=\"1.深度优先（比较隐含的回溯）\"></a>1.深度优先（比较隐含的回溯）</h2><p>由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, visited</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(visited);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>([...nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i), ...nums.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)], [nums[i], ...visited]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-显式的回溯\"><a href=\"#2-显式的回溯\" class=\"headerlink\" title=\"2.显式的回溯\"></a>2.显式的回溯</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, [], &#123;&#125;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, path, visited, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">length</span> === nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(path.<span class=\"title function_\">slice</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">        <span class=\"title function_\">dfs</span>(nums, path, visited, res);</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p>","more":"<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/permutations\">https://leetcode-cn.com/problems/permutations</a></p>\n<h2 id=\"1-深度优先（比较隐含的回溯）\"><a href=\"#1-深度优先（比较隐含的回溯）\" class=\"headerlink\" title=\"1.深度优先（比较隐含的回溯）\"></a>1.深度优先（比较隐含的回溯）</h2><p>由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, visited</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(visited);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>([...nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i), ...nums.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)], [nums[i], ...visited]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-显式的回溯\"><a href=\"#2-显式的回溯\" class=\"headerlink\" title=\"2.显式的回溯\"></a>2.显式的回溯</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, [], &#123;&#125;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, path, visited, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">length</span> === nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(path.<span class=\"title function_\">slice</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">        <span class=\"title function_\">dfs</span>(nums, path, visited, res);</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Rust学习","date":"2023-02-14T16:56:17.000Z","_content":"\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","source":"_posts/Rust学习.md","raw":"---\ntitle: Rust学习\ndate: 2023-02-15 00:56:17\ntags:\n- Rust\n- 旧文迁移\n\ncategories:\n- Rust\n---\n\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","slug":"Rust学习","published":1,"updated":"2023-02-16T18:58:25.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2m700038snrf3f215r7","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>\n<span id=\"more\"></span>\n\n<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>","more":"<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />"},{"title":"oauth2实践","date":"2022-10-17T23:03:02.000Z","_content":"\n\n![](2022-10-07-03-23-41.png)\n\n<!-- more -->\n\n# 管理OAuth客户端注册\n\noauth服务器需要为每个客户端分配唯一的客户端标识！\n\n## 由谁来生成客户端 ID？ \n\n在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 *授权服务器* 颁发给客户端\n\n通过客户端 ID查找信息，客户端 ID是从请求 \n\n## 对客户端授权 \n\nOAuth协议要求授权服务器提供两个端点：\n\n- 授权端点，运行在前端信道上；\n- 令牌端点，运行 在后端信道上\n\n### 授权端点\n\n授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象\n\n### 令牌端点\n\n令牌端点不面向用户\n\n客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储\n\n![](2022-10-07-12-10-49.png)\n\n\nOAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信\n\n![](2022-10-07-12-05-02.png)\n\n### 重定向到授权端点 \n\n授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。\n\n资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：\n\n1. 需要检查客户端是否存在；\n2. 需要渲染出一个页面来（/authorize），让用户交互并进行授权\n\n### 资源拥有者对客户端授权\n\n1. 在授权页面交互，发请求（/approve）给授权点，生成授权码。\n2. 生成授权码，将授权码存储。以便后续客户端用授权码换令牌\n\n通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致\n\n### 授权点需要保存客户端注册信息\n\n1. client_id\n2. redirect_uri，可以是array\n3. client_secret\n\n## 令牌颁发\n1. 对客户端进行身份认证\n2. 处理授权许可请求\n\n客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！\n\n授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！\n\n授权码的作用：保持一次性！\n\n![](2022-10-07-08-14-35.png)\n\n\n### 对客户端进行身份认证\n\n客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！\n\n### 处理授权许可请求\n\n根据 grant_type 参数，选择令牌颁发方式！\n\nOAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。\n\n\n\n看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！\n\n![](2022-10-07-11-32-59.png)\n\n客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！\n\n\n# 授权许可类型\n\n![](2022-10-24-00-46-21.png)\n\n1. **隐式许可类型**，直接从授权端点返回令牌，没有令牌端点；\n2. **客户端凭据许可类型**，没有明确的资源拥有者。只使用后端信道。\n3. **资源拥有者凭据许可类型**，资源拥有者通过客户端使用账号密码换令牌\n4. **断言许可类型**,\n\n隐式许可类型 的起点入口： \n\n授权点接口（`/authorize`）的url search参数\n\n| 参数名 | 类型 | 释义 |  |\n|:--|:--|:--|:--|\n| response_type | emAuthRespType | 响应类型 | required |\n| scope | string | 需要申请的权限域 | optional |\n| client_id | string | 客户端的唯一标识 | required |\n| redirect_uri | string | 客户端地址，需要授权完成后跳转的地址 | required |\n| state | string | csrf-token | optional |\n\n回包结构\n\n```js\n// 隐式许可类型\n?access_token=987tghjkiu6trfghjuytrghj&token_type=Bearer\n```\n\n```js\nenum emAuthRespType {\n  CODE: 'code',\n  TOKEN: 'token'  // 隐式许可类型 \n}\n```\n\n客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口\n\n`/token`，该接口是上面用code换access_token\n\n| body参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n| scope | string | csrf-token | optional |\n| username | string | 账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n| password | string | 密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n\n注意\n- 账号和密码是由用户交互输出的，交互的页面由客户端提供！\n\n\n| header参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| Authorization | 'Basic <clent_id>+<clent_secret>' | *客户端凭证许可类型*和*资源拥有者凭据许可类型 *的使用，传递账号密码 | optional |\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n  PASSWORD: 'password'\n}\n```\n回报接口\n```js\n{\n  \"access_token\": \"987tghjkiu6trfghjuytrghj\",\n  \"scope\": \"foo bar\",\n  \"token_type\": \"Bearer\"\n} \n```\n\n## 隐式许可类型\n\n```js\n} else if (query.response_type == 'token') { \n```\n\n完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.\n\n这种许可流程只使用授权端点而不使 用令牌端点\n\n隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。\n\nresponse_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 \n\n\n## 客户端凭据许可类型\n\n与前面不同，使用另外一个接口（`/token`）\n\n`/token`，该接口是上面用code换access_token\n\n| 参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n}\n```\n\n```js\n} else if (req.body.grant_type == emGrantType.CLIENT_CREDENTIALS) { \n```\n\n比如后端系统之间需要直接通信\n只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 \n\n客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌\n\n![](2022-10-07-14-51-53.png)\n\n在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 \n\n客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。\n\n![](2022-10-07-14-34-57.png)\n\n\n## 资源拥有者凭据许可类型 \n\n![](2022-10-07-16-00-30.png)\n\n用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。\n\n\n这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 \n\n授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 \n\n```js\ngrant_type == 'password'\n```\n\n完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了\n\n![](2022-10-08-05-42-33.png)\n\n# 客户端部署的应用类型\n\n1. Web应用；\n2. 浏览器应用；\n3. 原生应用；\n\n## Web应用\n\nWeb应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。\n\nWeb 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 \n\n## 浏览器应用\n\n浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 \n\n因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 \n\n## 原生应用\n\n原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。\n\n# 密钥\n\n客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。\n\n运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 \n\n不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密\n\n\nWeb 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者\n\n\n# OAuth令牌\n\n**授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效**\n\n*授权服务器* 和 *受保护资源* 间共享数据库。存在两者不共享的场景！\n\n在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省\n\n![](2022-10-08-13-31-55.png)\n\n\n## JWT的结构\n\nJWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式\n\n> eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. \n\n句点符号将字符串分割成了两部分\n\n以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理\n\n\n>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\n>\n>. \n>\n>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n>\n>.\n\n对第一部分解码：\n\n```js\n{\n  \"typ\": \"JWT\", \n  \"alg\": \"none\"\n} \n```\n\n这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。\n\n第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象\n\n![](2022-10-08-14-54-58.png)\n\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'none' }; \nvar payload = {\n  iss: 'http://localhost:9001/',   \n  sub: code.user ? code.user.sub : undefined,   \n  aud: 'http://localhost:9002/',   \n  iat: Math.floor(Date.now() / 1000),   \n  exp: Math.floor(Date.now() / 1000) + (5 * 60),   \n  jti: randomstring.generate(8)\n};\nvar access_token = base64url.encode(JSON.stringify(header))\n  + '.'\n  + base64url.encode(JSON.stringify(payload))\n  + '.';\n```\n\n\n## 令牌的加密保护：JOSE \n\nJSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准\n\n\n### 使用HS256的对称签名\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'HS256'}; \nvar access_token = jose.jws.JWS.sign(\n  header.alg,   \n  JSON.stringify(header),   \n  JSON.stringify(payload),   \n  new Buffer(sharedTokenSecret).toString('hex')); \n\n// access_token\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   \n// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   \n// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  \n// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg\n```\n\n### 使用RS256的非对称签名\n\n使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。\n\n使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、\n\n*使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！*\n\n\n![](2022-10-09-06-17-02.png)\n\n\n# 内省协议 \n\nOAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。\n该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状\n\n![](2022-10-09-07-08-23.png)\n\n内省请求\n\n![](2022-10-09-07-15-45.png)\n\n内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 \n\n![](2022-10-09-07-16-11.png)\n\n内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。\n\n## 构建内省端点\n\n```js\nvar protectedResources = [{\n  \"resource_id\": \"protected-resource-1\",        \n  \"resource_secret\": \"protected-resource-secret-1\"\n}];\n\nvar getProtectedResource = function(resourceId) {\n  return __.find(protectedResources, function(protectedResource) {\n    return   protectedResource.resource_id == resourceId;\n  });\n};\n\napp.post('/introspect', function(req, res) { \n  var auth = req.headers['authorization']; \n  var resourceCredentials = decodeClientCredentials(auth); \n  var resourceId = resourceCredentials.id; \n  var resourceSecret = resourceCredentials.secret;\n\n  var resource = getProtectedResource(resourceId);\n  if (!resource) {   \n    res.status(401).end();   \n    return; \n  } \n\n  if (resource.resource_secret != resourceSecret) {   \n    res.status(401).end();   \n    return; \n  }\n\n  var inToken = req.body.token; \n  \n  nosql.one(function(token) {   \n    if (token.access_token == inToken) {        \n      return token;   \n    } \n  }, function(err, token) {   \n    if (token) { \n      var introspectionResponse = {              \n        active: true,              \n        iss: 'http://localhost:9001/',              \n        aud: 'http://localhost:9002/',              \n        sub: token.user ? token.user.sub : undefined,              \n        username: token.user ? token.user.preferred_username : undefined,\n        scope: token.scope ? token.scope.join(' ') : undefined,              \n        client_id: token.client_id       \n      }; \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } else {       \n      var introspectionResponse = {              \n        active: false       \n      };       \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } \n  });\n});\n```\n\n\n## 发起令牌内省请求 \n\n```js\nvar protectedResource = {   \n  \"resource_id\": \"protected-resource-1\",   \n  \"resource_secret\": \"protected-resource-secret-1\"\n};\nvar form_data = qs.stringify({   \n  token: inToken\n}); \nvar headers = {   \n  'Content-Type': 'application/x-www-form-urlencoded',   \n  'Authorization': 'Basic ' + encodeClientCredentials(\n    protectedResource.resource_id, protectedResource.resource_secret)\n}; \n \nvar tokRes = await request('POST', authServer.introspectionEndpoint, {   \n  body: form_data,   \n  headers: headers \n});\n\nif (tokRes.statusCode >= 200 && tokRes.statusCode < 300) {   \n  var body = JSON.parse(tokRes.getBody()); \n \n  console.log('Got introspection response', body);   \n  var active = body.active;   \n  if (active) {        \n    req.access_token = body;   \n  } \n}\n```\n\n呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果\n\n# 动态客户端注册\n\n![](2022-10-09-12-16-09.png)\n\nOAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。\n\n# 生成授权码\n\n```js\n\nconst randomString = require('random-string');\n\nconst code = randomString();\n\nmysql.insert({\n  table: 'code',\n  field: { code }\n})\n\n```\n\n# 附录\n\n## 生成密钥\n\n```js\nconst { KEYUTIL } = require('jsrsasign');\nconst rsaKeypair = KEYUTIL.generateKeypair(\"RSA\", 1024);\nconst PRIVATE = KEYUTIL.getPEM(rsaKeypair.prvKeyObj, \"PKCS8PRV\");\nconst PUBLIC = KEYUTIL.getPEM(rsaKeypair.pubKeyObj);\n```\n![](2022-10-24-03-52-06.png)\n参考：http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\n\n## 参考\n\n- [oauth2 nodejs实战](http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html)\n- [使用 Nodejs 搭建一个 OAuth2.0 服务](https://www.jianshu.com/p/7febbe553c83)\n- [rfc6749](http://www.rfcreader.com/#rfc6749)\n","source":"_posts/oauth2实践.md","raw":"---\ntitle: oauth2实践\ndate: 2022-10-18 07:03:02\ntags:\n- 旧文迁移\n- oauth2\ncategories:\n- 安全\n---\n\n\n![](2022-10-07-03-23-41.png)\n\n<!-- more -->\n\n# 管理OAuth客户端注册\n\noauth服务器需要为每个客户端分配唯一的客户端标识！\n\n## 由谁来生成客户端 ID？ \n\n在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 *授权服务器* 颁发给客户端\n\n通过客户端 ID查找信息，客户端 ID是从请求 \n\n## 对客户端授权 \n\nOAuth协议要求授权服务器提供两个端点：\n\n- 授权端点，运行在前端信道上；\n- 令牌端点，运行 在后端信道上\n\n### 授权端点\n\n授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象\n\n### 令牌端点\n\n令牌端点不面向用户\n\n客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储\n\n![](2022-10-07-12-10-49.png)\n\n\nOAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信\n\n![](2022-10-07-12-05-02.png)\n\n### 重定向到授权端点 \n\n授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。\n\n资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：\n\n1. 需要检查客户端是否存在；\n2. 需要渲染出一个页面来（/authorize），让用户交互并进行授权\n\n### 资源拥有者对客户端授权\n\n1. 在授权页面交互，发请求（/approve）给授权点，生成授权码。\n2. 生成授权码，将授权码存储。以便后续客户端用授权码换令牌\n\n通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致\n\n### 授权点需要保存客户端注册信息\n\n1. client_id\n2. redirect_uri，可以是array\n3. client_secret\n\n## 令牌颁发\n1. 对客户端进行身份认证\n2. 处理授权许可请求\n\n客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！\n\n授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！\n\n授权码的作用：保持一次性！\n\n![](2022-10-07-08-14-35.png)\n\n\n### 对客户端进行身份认证\n\n客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！\n\n### 处理授权许可请求\n\n根据 grant_type 参数，选择令牌颁发方式！\n\nOAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。\n\n\n\n看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！\n\n![](2022-10-07-11-32-59.png)\n\n客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！\n\n\n# 授权许可类型\n\n![](2022-10-24-00-46-21.png)\n\n1. **隐式许可类型**，直接从授权端点返回令牌，没有令牌端点；\n2. **客户端凭据许可类型**，没有明确的资源拥有者。只使用后端信道。\n3. **资源拥有者凭据许可类型**，资源拥有者通过客户端使用账号密码换令牌\n4. **断言许可类型**,\n\n隐式许可类型 的起点入口： \n\n授权点接口（`/authorize`）的url search参数\n\n| 参数名 | 类型 | 释义 |  |\n|:--|:--|:--|:--|\n| response_type | emAuthRespType | 响应类型 | required |\n| scope | string | 需要申请的权限域 | optional |\n| client_id | string | 客户端的唯一标识 | required |\n| redirect_uri | string | 客户端地址，需要授权完成后跳转的地址 | required |\n| state | string | csrf-token | optional |\n\n回包结构\n\n```js\n// 隐式许可类型\n?access_token=987tghjkiu6trfghjuytrghj&token_type=Bearer\n```\n\n```js\nenum emAuthRespType {\n  CODE: 'code',\n  TOKEN: 'token'  // 隐式许可类型 \n}\n```\n\n客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口\n\n`/token`，该接口是上面用code换access_token\n\n| body参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n| scope | string | csrf-token | optional |\n| username | string | 账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n| password | string | 密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n\n注意\n- 账号和密码是由用户交互输出的，交互的页面由客户端提供！\n\n\n| header参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| Authorization | 'Basic <clent_id>+<clent_secret>' | *客户端凭证许可类型*和*资源拥有者凭据许可类型 *的使用，传递账号密码 | optional |\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n  PASSWORD: 'password'\n}\n```\n回报接口\n```js\n{\n  \"access_token\": \"987tghjkiu6trfghjuytrghj\",\n  \"scope\": \"foo bar\",\n  \"token_type\": \"Bearer\"\n} \n```\n\n## 隐式许可类型\n\n```js\n} else if (query.response_type == 'token') { \n```\n\n完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.\n\n这种许可流程只使用授权端点而不使 用令牌端点\n\n隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。\n\nresponse_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 \n\n\n## 客户端凭据许可类型\n\n与前面不同，使用另外一个接口（`/token`）\n\n`/token`，该接口是上面用code换access_token\n\n| 参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n}\n```\n\n```js\n} else if (req.body.grant_type == emGrantType.CLIENT_CREDENTIALS) { \n```\n\n比如后端系统之间需要直接通信\n只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 \n\n客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌\n\n![](2022-10-07-14-51-53.png)\n\n在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 \n\n客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。\n\n![](2022-10-07-14-34-57.png)\n\n\n## 资源拥有者凭据许可类型 \n\n![](2022-10-07-16-00-30.png)\n\n用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。\n\n\n这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 \n\n授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 \n\n```js\ngrant_type == 'password'\n```\n\n完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了\n\n![](2022-10-08-05-42-33.png)\n\n# 客户端部署的应用类型\n\n1. Web应用；\n2. 浏览器应用；\n3. 原生应用；\n\n## Web应用\n\nWeb应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。\n\nWeb 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 \n\n## 浏览器应用\n\n浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 \n\n因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 \n\n## 原生应用\n\n原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。\n\n# 密钥\n\n客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。\n\n运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 \n\n不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密\n\n\nWeb 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者\n\n\n# OAuth令牌\n\n**授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效**\n\n*授权服务器* 和 *受保护资源* 间共享数据库。存在两者不共享的场景！\n\n在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省\n\n![](2022-10-08-13-31-55.png)\n\n\n## JWT的结构\n\nJWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式\n\n> eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. \n\n句点符号将字符串分割成了两部分\n\n以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理\n\n\n>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\n>\n>. \n>\n>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n>\n>.\n\n对第一部分解码：\n\n```js\n{\n  \"typ\": \"JWT\", \n  \"alg\": \"none\"\n} \n```\n\n这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。\n\n第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象\n\n![](2022-10-08-14-54-58.png)\n\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'none' }; \nvar payload = {\n  iss: 'http://localhost:9001/',   \n  sub: code.user ? code.user.sub : undefined,   \n  aud: 'http://localhost:9002/',   \n  iat: Math.floor(Date.now() / 1000),   \n  exp: Math.floor(Date.now() / 1000) + (5 * 60),   \n  jti: randomstring.generate(8)\n};\nvar access_token = base64url.encode(JSON.stringify(header))\n  + '.'\n  + base64url.encode(JSON.stringify(payload))\n  + '.';\n```\n\n\n## 令牌的加密保护：JOSE \n\nJSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准\n\n\n### 使用HS256的对称签名\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'HS256'}; \nvar access_token = jose.jws.JWS.sign(\n  header.alg,   \n  JSON.stringify(header),   \n  JSON.stringify(payload),   \n  new Buffer(sharedTokenSecret).toString('hex')); \n\n// access_token\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   \n// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   \n// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  \n// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg\n```\n\n### 使用RS256的非对称签名\n\n使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。\n\n使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、\n\n*使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！*\n\n\n![](2022-10-09-06-17-02.png)\n\n\n# 内省协议 \n\nOAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。\n该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状\n\n![](2022-10-09-07-08-23.png)\n\n内省请求\n\n![](2022-10-09-07-15-45.png)\n\n内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 \n\n![](2022-10-09-07-16-11.png)\n\n内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。\n\n## 构建内省端点\n\n```js\nvar protectedResources = [{\n  \"resource_id\": \"protected-resource-1\",        \n  \"resource_secret\": \"protected-resource-secret-1\"\n}];\n\nvar getProtectedResource = function(resourceId) {\n  return __.find(protectedResources, function(protectedResource) {\n    return   protectedResource.resource_id == resourceId;\n  });\n};\n\napp.post('/introspect', function(req, res) { \n  var auth = req.headers['authorization']; \n  var resourceCredentials = decodeClientCredentials(auth); \n  var resourceId = resourceCredentials.id; \n  var resourceSecret = resourceCredentials.secret;\n\n  var resource = getProtectedResource(resourceId);\n  if (!resource) {   \n    res.status(401).end();   \n    return; \n  } \n\n  if (resource.resource_secret != resourceSecret) {   \n    res.status(401).end();   \n    return; \n  }\n\n  var inToken = req.body.token; \n  \n  nosql.one(function(token) {   \n    if (token.access_token == inToken) {        \n      return token;   \n    } \n  }, function(err, token) {   \n    if (token) { \n      var introspectionResponse = {              \n        active: true,              \n        iss: 'http://localhost:9001/',              \n        aud: 'http://localhost:9002/',              \n        sub: token.user ? token.user.sub : undefined,              \n        username: token.user ? token.user.preferred_username : undefined,\n        scope: token.scope ? token.scope.join(' ') : undefined,              \n        client_id: token.client_id       \n      }; \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } else {       \n      var introspectionResponse = {              \n        active: false       \n      };       \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } \n  });\n});\n```\n\n\n## 发起令牌内省请求 \n\n```js\nvar protectedResource = {   \n  \"resource_id\": \"protected-resource-1\",   \n  \"resource_secret\": \"protected-resource-secret-1\"\n};\nvar form_data = qs.stringify({   \n  token: inToken\n}); \nvar headers = {   \n  'Content-Type': 'application/x-www-form-urlencoded',   \n  'Authorization': 'Basic ' + encodeClientCredentials(\n    protectedResource.resource_id, protectedResource.resource_secret)\n}; \n \nvar tokRes = await request('POST', authServer.introspectionEndpoint, {   \n  body: form_data,   \n  headers: headers \n});\n\nif (tokRes.statusCode >= 200 && tokRes.statusCode < 300) {   \n  var body = JSON.parse(tokRes.getBody()); \n \n  console.log('Got introspection response', body);   \n  var active = body.active;   \n  if (active) {        \n    req.access_token = body;   \n  } \n}\n```\n\n呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果\n\n# 动态客户端注册\n\n![](2022-10-09-12-16-09.png)\n\nOAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。\n\n# 生成授权码\n\n```js\n\nconst randomString = require('random-string');\n\nconst code = randomString();\n\nmysql.insert({\n  table: 'code',\n  field: { code }\n})\n\n```\n\n# 附录\n\n## 生成密钥\n\n```js\nconst { KEYUTIL } = require('jsrsasign');\nconst rsaKeypair = KEYUTIL.generateKeypair(\"RSA\", 1024);\nconst PRIVATE = KEYUTIL.getPEM(rsaKeypair.prvKeyObj, \"PKCS8PRV\");\nconst PUBLIC = KEYUTIL.getPEM(rsaKeypair.pubKeyObj);\n```\n![](2022-10-24-03-52-06.png)\n参考：http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\n\n## 参考\n\n- [oauth2 nodejs实战](http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html)\n- [使用 Nodejs 搭建一个 OAuth2.0 服务](https://www.jianshu.com/p/7febbe553c83)\n- [rfc6749](http://www.rfcreader.com/#rfc6749)\n","slug":"oauth2实践","published":1,"updated":"2023-02-17T23:10:34.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2ma00068snrch31g967","content":"<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-03-23-41.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"管理OAuth客户端注册\"><a href=\"#管理OAuth客户端注册\" class=\"headerlink\" title=\"管理OAuth客户端注册\"></a>管理OAuth客户端注册</h1><p>oauth服务器需要为每个客户端分配唯一的客户端标识！</p>\n<h2 id=\"由谁来生成客户端-ID？\"><a href=\"#由谁来生成客户端-ID？\" class=\"headerlink\" title=\"由谁来生成客户端 ID？\"></a>由谁来生成客户端 ID？</h2><p>在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 <em>授权服务器</em> 颁发给客户端</p>\n<p>通过客户端 ID查找信息，客户端 ID是从请求 </p>\n<h2 id=\"对客户端授权\"><a href=\"#对客户端授权\" class=\"headerlink\" title=\"对客户端授权\"></a>对客户端授权</h2><p>OAuth协议要求授权服务器提供两个端点：</p>\n<ul>\n<li>授权端点，运行在前端信道上；</li>\n<li>令牌端点，运行 在后端信道上</li>\n</ul>\n<h3 id=\"授权端点\"><a href=\"#授权端点\" class=\"headerlink\" title=\"授权端点\"></a>授权端点</h3><p>授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象</p>\n<h3 id=\"令牌端点\"><a href=\"#令牌端点\" class=\"headerlink\" title=\"令牌端点\"></a>令牌端点</h3><p>令牌端点不面向用户</p>\n<p>客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-10-49.png\"></p>\n<p>OAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-05-02.png\"></p>\n<h3 id=\"重定向到授权端点\"><a href=\"#重定向到授权端点\" class=\"headerlink\" title=\"重定向到授权端点\"></a>重定向到授权端点</h3><p>授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。</p>\n<p>资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：</p>\n<ol>\n<li>需要检查客户端是否存在；</li>\n<li>需要渲染出一个页面来（&#x2F;authorize），让用户交互并进行授权</li>\n</ol>\n<h3 id=\"资源拥有者对客户端授权\"><a href=\"#资源拥有者对客户端授权\" class=\"headerlink\" title=\"资源拥有者对客户端授权\"></a>资源拥有者对客户端授权</h3><ol>\n<li>在授权页面交互，发请求（&#x2F;approve）给授权点，生成授权码。</li>\n<li>生成授权码，将授权码存储。以便后续客户端用授权码换令牌</li>\n</ol>\n<p>通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致</p>\n<h3 id=\"授权点需要保存客户端注册信息\"><a href=\"#授权点需要保存客户端注册信息\" class=\"headerlink\" title=\"授权点需要保存客户端注册信息\"></a>授权点需要保存客户端注册信息</h3><ol>\n<li>client_id</li>\n<li>redirect_uri，可以是array</li>\n<li>client_secret</li>\n</ol>\n<h2 id=\"令牌颁发\"><a href=\"#令牌颁发\" class=\"headerlink\" title=\"令牌颁发\"></a>令牌颁发</h2><ol>\n<li>对客户端进行身份认证</li>\n<li>处理授权许可请求</li>\n</ol>\n<p>客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！</p>\n<p>授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！</p>\n<p>授权码的作用：保持一次性！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-08-14-35.png\"></p>\n<h3 id=\"对客户端进行身份认证\"><a href=\"#对客户端进行身份认证\" class=\"headerlink\" title=\"对客户端进行身份认证\"></a>对客户端进行身份认证</h3><p>客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！</p>\n<h3 id=\"处理授权许可请求\"><a href=\"#处理授权许可请求\" class=\"headerlink\" title=\"处理授权许可请求\"></a>处理授权许可请求</h3><p>根据 grant_type 参数，选择令牌颁发方式！</p>\n<p>OAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。</p>\n<p>看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-11-32-59.png\"></p>\n<p>客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！</p>\n<h1 id=\"授权许可类型\"><a href=\"#授权许可类型\" class=\"headerlink\" title=\"授权许可类型\"></a>授权许可类型</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-00-46-21.png\"></p>\n<ol>\n<li><strong>隐式许可类型</strong>，直接从授权端点返回令牌，没有令牌端点；</li>\n<li><strong>客户端凭据许可类型</strong>，没有明确的资源拥有者。只使用后端信道。</li>\n<li><strong>资源拥有者凭据许可类型</strong>，资源拥有者通过客户端使用账号密码换令牌</li>\n<li><strong>断言许可类型</strong>,</li>\n</ol>\n<p>隐式许可类型 的起点入口： </p>\n<p>授权点接口（<code>/authorize</code>）的url search参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数名</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">response_type</td>\n<td align=\"left\">emAuthRespType</td>\n<td align=\"left\">响应类型</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">需要申请的权限域</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端的唯一标识</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">redirect_uri</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端地址，需要授权完成后跳转的地址</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">state</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>回包结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 隐式许可类型</span></span><br><span class=\"line\">?access_token=987tghjkiu6trfghjuytrghj&amp;token_type=<span class=\"title class_\">Bearer</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emAuthRespType &#123;</span><br><span class=\"line\">  <span class=\"attr\">CODE</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">TOKEN</span>: <span class=\"string\">&#x27;token&#x27;</span>  <span class=\"comment\">// 隐式许可类型 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">body参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">username</td>\n<td align=\"left\">string</td>\n<td align=\"left\">账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">string</td>\n<td align=\"left\">密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>注意</p>\n<ul>\n<li>账号和密码是由用户交互输出的，交互的页面由客户端提供！</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">header参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Authorization</td>\n<td align=\"left\">‘Basic <clent_id>+<clent_secret>‘</td>\n<td align=\"left\"><em>客户端凭证许可类型</em>和*资源拥有者凭据许可类型 *的使用，传递账号密码</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">PASSWORD</span>: <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回报接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;987tghjkiu6trfghjuytrghj&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scope&quot;</span>: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (query.<span class=\"property\">response_type</span> == <span class=\"string\">&#x27;token&#x27;</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.</p>\n<p>这种许可流程只使用授权端点而不使 用令牌端点</p>\n<p>隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。</p>\n<p>response_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 </p>\n<h2 id=\"客户端凭据许可类型\"><a href=\"#客户端凭据许可类型\" class=\"headerlink\" title=\"客户端凭据许可类型\"></a>客户端凭据许可类型</h2><p>与前面不同，使用另外一个接口（<code>/token</code>）</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.<span class=\"property\">body</span>.<span class=\"property\">grant_type</span> == emGrantType.<span class=\"property\">CLIENT_CREDENTIALS</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>比如后端系统之间需要直接通信<br>只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 </p>\n<p>客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-51-53.png\"></p>\n<p>在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 </p>\n<p>客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-34-57.png\"></p>\n<h2 id=\"资源拥有者凭据许可类型\"><a href=\"#资源拥有者凭据许可类型\" class=\"headerlink\" title=\"资源拥有者凭据许可类型\"></a>资源拥有者凭据许可类型</h2><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-16-00-30.png\"></p>\n<p>用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。</p>\n<p>这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 </p>\n<p>授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant_type == <span class=\"string\">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-05-42-33.png\"></p>\n<h1 id=\"客户端部署的应用类型\"><a href=\"#客户端部署的应用类型\" class=\"headerlink\" title=\"客户端部署的应用类型\"></a>客户端部署的应用类型</h1><ol>\n<li>Web应用；</li>\n<li>浏览器应用；</li>\n<li>原生应用；</li>\n</ol>\n<h2 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h2><p>Web应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。</p>\n<p>Web 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 </p>\n<h2 id=\"浏览器应用\"><a href=\"#浏览器应用\" class=\"headerlink\" title=\"浏览器应用\"></a>浏览器应用</h2><p>浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 </p>\n<p>因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 </p>\n<h2 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h2><p>原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。</p>\n<h1 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h1><p>客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。</p>\n<p>运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 </p>\n<p>不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密</p>\n<p>Web 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者</p>\n<h1 id=\"OAuth令牌\"><a href=\"#OAuth令牌\" class=\"headerlink\" title=\"OAuth令牌\"></a>OAuth令牌</h1><p><strong>授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效</strong></p>\n<p><em>授权服务器</em> 和 <em>受保护资源</em> 间共享数据库。存在两者不共享的场景！</p>\n<p>在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-13-31-55.png\"></p>\n<h2 id=\"JWT的结构\"><a href=\"#JWT的结构\" class=\"headerlink\" title=\"JWT的结构\"></a>JWT的结构</h2><p>JWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. </p>\n</blockquote>\n<p>句点符号将字符串分割成了两部分</p>\n<p>以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0</p>\n<p>. </p>\n<p>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</p>\n<p>.</p>\n</blockquote>\n<p>对第一部分解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。</p>\n<p>第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-14-54-58.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;none&#x27;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> payload = &#123;</span><br><span class=\"line\">  <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">sub</span>: code.<span class=\"property\">user</span> ? code.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,   </span><br><span class=\"line\">  <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">iat</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>),   </span><br><span class=\"line\">  <span class=\"attr\">exp</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>) + (<span class=\"number\">5</span> * <span class=\"number\">60</span>),   </span><br><span class=\"line\">  <span class=\"attr\">jti</span>: randomstring.<span class=\"title function_\">generate</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">  + base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"令牌的加密保护：JOSE\"><a href=\"#令牌的加密保护：JOSE\" class=\"headerlink\" title=\"令牌的加密保护：JOSE\"></a>令牌的加密保护：JOSE</h2><p>JSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准</p>\n<h3 id=\"使用HS256的对称签名\"><a href=\"#使用HS256的对称签名\" class=\"headerlink\" title=\"使用HS256的对称签名\"></a>使用HS256的对称签名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = jose.<span class=\"property\">jws</span>.<span class=\"property\">JWS</span>.<span class=\"title function_\">sign</span>(</span><br><span class=\"line\">  header.<span class=\"property\">alg</span>,   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header),   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload),   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(sharedTokenSecret).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// access_token</span></span><br><span class=\"line\"><span class=\"comment\">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   </span></span><br><span class=\"line\"><span class=\"comment\">// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   </span></span><br><span class=\"line\"><span class=\"comment\">// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  </span></span><br><span class=\"line\"><span class=\"comment\">// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RS256的非对称签名\"><a href=\"#使用RS256的非对称签名\" class=\"headerlink\" title=\"使用RS256的非对称签名\"></a>使用RS256的非对称签名</h3><p>使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。</p>\n<p>使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、</p>\n<p><em>使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！</em></p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-06-17-02.png\"></p>\n<h1 id=\"内省协议\"><a href=\"#内省协议\" class=\"headerlink\" title=\"内省协议\"></a>内省协议</h1><p>OAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。<br>该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-08-23.png\"></p>\n<p>内省请求</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-15-45.png\"></p>\n<p>内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 </p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-16-11.png\"></p>\n<p>内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。</p>\n<h2 id=\"构建内省端点\"><a href=\"#构建内省端点\" class=\"headerlink\" title=\"构建内省端点\"></a>构建内省端点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResources = [&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,        </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getProtectedResource = <span class=\"keyword\">function</span>(<span class=\"params\">resourceId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __.<span class=\"title function_\">find</span>(protectedResources, <span class=\"keyword\">function</span>(<span class=\"params\">protectedResource</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>   protectedResource.<span class=\"property\">resource_id</span> == resourceId;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/introspect&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> auth = req.<span class=\"property\">headers</span>[<span class=\"string\">&#x27;authorization&#x27;</span>]; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceCredentials = <span class=\"title function_\">decodeClientCredentials</span>(auth); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceId = resourceCredentials.<span class=\"property\">id</span>; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceSecret = resourceCredentials.<span class=\"property\">secret</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resource = <span class=\"title function_\">getProtectedResource</span>(resourceId);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!resource) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resource.<span class=\"property\">resource_secret</span> != resourceSecret) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inToken = req.<span class=\"property\">body</span>.<span class=\"property\">token</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  nosql.<span class=\"title function_\">one</span>(<span class=\"keyword\">function</span>(<span class=\"params\">token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.<span class=\"property\">access_token</span> == inToken) &#123;        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> token;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,              </span><br><span class=\"line\">        <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">sub</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">username</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">preferred_username</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">scope</span>: token.<span class=\"property\">scope</span> ? token.<span class=\"property\">scope</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>) : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">client_id</span>: token.<span class=\"property\">client_id</span>       </span><br><span class=\"line\">      &#125;; </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">false</span>       </span><br><span class=\"line\">      &#125;;       </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"发起令牌内省请求\"><a href=\"#发起令牌内省请求\" class=\"headerlink\" title=\"发起令牌内省请求\"></a>发起令牌内省请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResource = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> form_data = qs.<span class=\"title function_\">stringify</span>(&#123;   </span><br><span class=\"line\">  <span class=\"attr\">token</span>: inToken</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Basic &#x27;</span> + <span class=\"title function_\">encodeClientCredentials</span>(</span><br><span class=\"line\">    protectedResource.<span class=\"property\">resource_id</span>, protectedResource.<span class=\"property\">resource_secret</span>)</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tokRes = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;POST&#x27;</span>, authServer.<span class=\"property\">introspectionEndpoint</span>, &#123;   </span><br><span class=\"line\">  <span class=\"attr\">body</span>: form_data,   </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: headers </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tokRes.<span class=\"property\">statusCode</span> &gt;= <span class=\"number\">200</span> &amp;&amp; tokRes.<span class=\"property\">statusCode</span> &lt; <span class=\"number\">300</span>) &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(tokRes.<span class=\"title function_\">getBody</span>()); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Got introspection response&#x27;</span>, body);   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> active = body.<span class=\"property\">active</span>;   </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (active) &#123;        </span><br><span class=\"line\">    req.<span class=\"property\">access_token</span> = body;   </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果</p>\n<h1 id=\"动态客户端注册\"><a href=\"#动态客户端注册\" class=\"headerlink\" title=\"动态客户端注册\"></a>动态客户端注册</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-12-16-09.png\"></p>\n<p>OAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。</p>\n<h1 id=\"生成授权码\"><a href=\"#生成授权码\" class=\"headerlink\" title=\"生成授权码\"></a>生成授权码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;random-string&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"title function_\">randomString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">table</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">field</span>: &#123; code &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">KEYUTIL</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsrsasign&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rsaKeypair = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">generateKeypair</span>(<span class=\"string\">&quot;RSA&quot;</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PRIVATE</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">prvKeyObj</span>, <span class=\"string\">&quot;PKCS8PRV&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">pubKeyObj</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-03-52-06.png\"><br>参考：<a href=\"http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\">http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html\">oauth2 nodejs实战</a></li>\n<li><a href=\"https://www.jianshu.com/p/7febbe553c83\">使用 Nodejs 搭建一个 OAuth2.0 服务</a></li>\n<li><a href=\"http://www.rfcreader.com/#rfc6749\">rfc6749</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-03-23-41.png\"></p>","more":"<h1 id=\"管理OAuth客户端注册\"><a href=\"#管理OAuth客户端注册\" class=\"headerlink\" title=\"管理OAuth客户端注册\"></a>管理OAuth客户端注册</h1><p>oauth服务器需要为每个客户端分配唯一的客户端标识！</p>\n<h2 id=\"由谁来生成客户端-ID？\"><a href=\"#由谁来生成客户端-ID？\" class=\"headerlink\" title=\"由谁来生成客户端 ID？\"></a>由谁来生成客户端 ID？</h2><p>在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 <em>授权服务器</em> 颁发给客户端</p>\n<p>通过客户端 ID查找信息，客户端 ID是从请求 </p>\n<h2 id=\"对客户端授权\"><a href=\"#对客户端授权\" class=\"headerlink\" title=\"对客户端授权\"></a>对客户端授权</h2><p>OAuth协议要求授权服务器提供两个端点：</p>\n<ul>\n<li>授权端点，运行在前端信道上；</li>\n<li>令牌端点，运行 在后端信道上</li>\n</ul>\n<h3 id=\"授权端点\"><a href=\"#授权端点\" class=\"headerlink\" title=\"授权端点\"></a>授权端点</h3><p>授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象</p>\n<h3 id=\"令牌端点\"><a href=\"#令牌端点\" class=\"headerlink\" title=\"令牌端点\"></a>令牌端点</h3><p>令牌端点不面向用户</p>\n<p>客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-10-49.png\"></p>\n<p>OAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-05-02.png\"></p>\n<h3 id=\"重定向到授权端点\"><a href=\"#重定向到授权端点\" class=\"headerlink\" title=\"重定向到授权端点\"></a>重定向到授权端点</h3><p>授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。</p>\n<p>资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：</p>\n<ol>\n<li>需要检查客户端是否存在；</li>\n<li>需要渲染出一个页面来（&#x2F;authorize），让用户交互并进行授权</li>\n</ol>\n<h3 id=\"资源拥有者对客户端授权\"><a href=\"#资源拥有者对客户端授权\" class=\"headerlink\" title=\"资源拥有者对客户端授权\"></a>资源拥有者对客户端授权</h3><ol>\n<li>在授权页面交互，发请求（&#x2F;approve）给授权点，生成授权码。</li>\n<li>生成授权码，将授权码存储。以便后续客户端用授权码换令牌</li>\n</ol>\n<p>通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致</p>\n<h3 id=\"授权点需要保存客户端注册信息\"><a href=\"#授权点需要保存客户端注册信息\" class=\"headerlink\" title=\"授权点需要保存客户端注册信息\"></a>授权点需要保存客户端注册信息</h3><ol>\n<li>client_id</li>\n<li>redirect_uri，可以是array</li>\n<li>client_secret</li>\n</ol>\n<h2 id=\"令牌颁发\"><a href=\"#令牌颁发\" class=\"headerlink\" title=\"令牌颁发\"></a>令牌颁发</h2><ol>\n<li>对客户端进行身份认证</li>\n<li>处理授权许可请求</li>\n</ol>\n<p>客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！</p>\n<p>授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！</p>\n<p>授权码的作用：保持一次性！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-08-14-35.png\"></p>\n<h3 id=\"对客户端进行身份认证\"><a href=\"#对客户端进行身份认证\" class=\"headerlink\" title=\"对客户端进行身份认证\"></a>对客户端进行身份认证</h3><p>客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！</p>\n<h3 id=\"处理授权许可请求\"><a href=\"#处理授权许可请求\" class=\"headerlink\" title=\"处理授权许可请求\"></a>处理授权许可请求</h3><p>根据 grant_type 参数，选择令牌颁发方式！</p>\n<p>OAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。</p>\n<p>看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-11-32-59.png\"></p>\n<p>客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！</p>\n<h1 id=\"授权许可类型\"><a href=\"#授权许可类型\" class=\"headerlink\" title=\"授权许可类型\"></a>授权许可类型</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-00-46-21.png\"></p>\n<ol>\n<li><strong>隐式许可类型</strong>，直接从授权端点返回令牌，没有令牌端点；</li>\n<li><strong>客户端凭据许可类型</strong>，没有明确的资源拥有者。只使用后端信道。</li>\n<li><strong>资源拥有者凭据许可类型</strong>，资源拥有者通过客户端使用账号密码换令牌</li>\n<li><strong>断言许可类型</strong>,</li>\n</ol>\n<p>隐式许可类型 的起点入口： </p>\n<p>授权点接口（<code>/authorize</code>）的url search参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数名</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">response_type</td>\n<td align=\"left\">emAuthRespType</td>\n<td align=\"left\">响应类型</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">需要申请的权限域</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端的唯一标识</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">redirect_uri</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端地址，需要授权完成后跳转的地址</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">state</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>回包结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 隐式许可类型</span></span><br><span class=\"line\">?access_token=987tghjkiu6trfghjuytrghj&amp;token_type=<span class=\"title class_\">Bearer</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emAuthRespType &#123;</span><br><span class=\"line\">  <span class=\"attr\">CODE</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">TOKEN</span>: <span class=\"string\">&#x27;token&#x27;</span>  <span class=\"comment\">// 隐式许可类型 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">body参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">username</td>\n<td align=\"left\">string</td>\n<td align=\"left\">账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">string</td>\n<td align=\"left\">密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>注意</p>\n<ul>\n<li>账号和密码是由用户交互输出的，交互的页面由客户端提供！</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">header参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Authorization</td>\n<td align=\"left\">‘Basic <clent_id>+<clent_secret>‘</td>\n<td align=\"left\"><em>客户端凭证许可类型</em>和*资源拥有者凭据许可类型 *的使用，传递账号密码</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">PASSWORD</span>: <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回报接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;987tghjkiu6trfghjuytrghj&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scope&quot;</span>: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (query.<span class=\"property\">response_type</span> == <span class=\"string\">&#x27;token&#x27;</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.</p>\n<p>这种许可流程只使用授权端点而不使 用令牌端点</p>\n<p>隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。</p>\n<p>response_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 </p>\n<h2 id=\"客户端凭据许可类型\"><a href=\"#客户端凭据许可类型\" class=\"headerlink\" title=\"客户端凭据许可类型\"></a>客户端凭据许可类型</h2><p>与前面不同，使用另外一个接口（<code>/token</code>）</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.<span class=\"property\">body</span>.<span class=\"property\">grant_type</span> == emGrantType.<span class=\"property\">CLIENT_CREDENTIALS</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>比如后端系统之间需要直接通信<br>只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 </p>\n<p>客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-51-53.png\"></p>\n<p>在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 </p>\n<p>客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-34-57.png\"></p>\n<h2 id=\"资源拥有者凭据许可类型\"><a href=\"#资源拥有者凭据许可类型\" class=\"headerlink\" title=\"资源拥有者凭据许可类型\"></a>资源拥有者凭据许可类型</h2><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-16-00-30.png\"></p>\n<p>用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。</p>\n<p>这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 </p>\n<p>授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant_type == <span class=\"string\">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-05-42-33.png\"></p>\n<h1 id=\"客户端部署的应用类型\"><a href=\"#客户端部署的应用类型\" class=\"headerlink\" title=\"客户端部署的应用类型\"></a>客户端部署的应用类型</h1><ol>\n<li>Web应用；</li>\n<li>浏览器应用；</li>\n<li>原生应用；</li>\n</ol>\n<h2 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h2><p>Web应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。</p>\n<p>Web 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 </p>\n<h2 id=\"浏览器应用\"><a href=\"#浏览器应用\" class=\"headerlink\" title=\"浏览器应用\"></a>浏览器应用</h2><p>浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 </p>\n<p>因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 </p>\n<h2 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h2><p>原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。</p>\n<h1 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h1><p>客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。</p>\n<p>运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 </p>\n<p>不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密</p>\n<p>Web 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者</p>\n<h1 id=\"OAuth令牌\"><a href=\"#OAuth令牌\" class=\"headerlink\" title=\"OAuth令牌\"></a>OAuth令牌</h1><p><strong>授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效</strong></p>\n<p><em>授权服务器</em> 和 <em>受保护资源</em> 间共享数据库。存在两者不共享的场景！</p>\n<p>在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-13-31-55.png\"></p>\n<h2 id=\"JWT的结构\"><a href=\"#JWT的结构\" class=\"headerlink\" title=\"JWT的结构\"></a>JWT的结构</h2><p>JWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. </p>\n</blockquote>\n<p>句点符号将字符串分割成了两部分</p>\n<p>以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0</p>\n<p>. </p>\n<p>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</p>\n<p>.</p>\n</blockquote>\n<p>对第一部分解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。</p>\n<p>第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-14-54-58.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;none&#x27;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> payload = &#123;</span><br><span class=\"line\">  <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">sub</span>: code.<span class=\"property\">user</span> ? code.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,   </span><br><span class=\"line\">  <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">iat</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>),   </span><br><span class=\"line\">  <span class=\"attr\">exp</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>) + (<span class=\"number\">5</span> * <span class=\"number\">60</span>),   </span><br><span class=\"line\">  <span class=\"attr\">jti</span>: randomstring.<span class=\"title function_\">generate</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">  + base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"令牌的加密保护：JOSE\"><a href=\"#令牌的加密保护：JOSE\" class=\"headerlink\" title=\"令牌的加密保护：JOSE\"></a>令牌的加密保护：JOSE</h2><p>JSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准</p>\n<h3 id=\"使用HS256的对称签名\"><a href=\"#使用HS256的对称签名\" class=\"headerlink\" title=\"使用HS256的对称签名\"></a>使用HS256的对称签名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = jose.<span class=\"property\">jws</span>.<span class=\"property\">JWS</span>.<span class=\"title function_\">sign</span>(</span><br><span class=\"line\">  header.<span class=\"property\">alg</span>,   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header),   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload),   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(sharedTokenSecret).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// access_token</span></span><br><span class=\"line\"><span class=\"comment\">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   </span></span><br><span class=\"line\"><span class=\"comment\">// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   </span></span><br><span class=\"line\"><span class=\"comment\">// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  </span></span><br><span class=\"line\"><span class=\"comment\">// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RS256的非对称签名\"><a href=\"#使用RS256的非对称签名\" class=\"headerlink\" title=\"使用RS256的非对称签名\"></a>使用RS256的非对称签名</h3><p>使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。</p>\n<p>使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、</p>\n<p><em>使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！</em></p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-06-17-02.png\"></p>\n<h1 id=\"内省协议\"><a href=\"#内省协议\" class=\"headerlink\" title=\"内省协议\"></a>内省协议</h1><p>OAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。<br>该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-08-23.png\"></p>\n<p>内省请求</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-15-45.png\"></p>\n<p>内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 </p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-16-11.png\"></p>\n<p>内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。</p>\n<h2 id=\"构建内省端点\"><a href=\"#构建内省端点\" class=\"headerlink\" title=\"构建内省端点\"></a>构建内省端点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResources = [&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,        </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getProtectedResource = <span class=\"keyword\">function</span>(<span class=\"params\">resourceId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __.<span class=\"title function_\">find</span>(protectedResources, <span class=\"keyword\">function</span>(<span class=\"params\">protectedResource</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>   protectedResource.<span class=\"property\">resource_id</span> == resourceId;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/introspect&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> auth = req.<span class=\"property\">headers</span>[<span class=\"string\">&#x27;authorization&#x27;</span>]; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceCredentials = <span class=\"title function_\">decodeClientCredentials</span>(auth); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceId = resourceCredentials.<span class=\"property\">id</span>; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceSecret = resourceCredentials.<span class=\"property\">secret</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resource = <span class=\"title function_\">getProtectedResource</span>(resourceId);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!resource) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resource.<span class=\"property\">resource_secret</span> != resourceSecret) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inToken = req.<span class=\"property\">body</span>.<span class=\"property\">token</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  nosql.<span class=\"title function_\">one</span>(<span class=\"keyword\">function</span>(<span class=\"params\">token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.<span class=\"property\">access_token</span> == inToken) &#123;        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> token;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,              </span><br><span class=\"line\">        <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">sub</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">username</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">preferred_username</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">scope</span>: token.<span class=\"property\">scope</span> ? token.<span class=\"property\">scope</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>) : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">client_id</span>: token.<span class=\"property\">client_id</span>       </span><br><span class=\"line\">      &#125;; </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">false</span>       </span><br><span class=\"line\">      &#125;;       </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"发起令牌内省请求\"><a href=\"#发起令牌内省请求\" class=\"headerlink\" title=\"发起令牌内省请求\"></a>发起令牌内省请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResource = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> form_data = qs.<span class=\"title function_\">stringify</span>(&#123;   </span><br><span class=\"line\">  <span class=\"attr\">token</span>: inToken</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Basic &#x27;</span> + <span class=\"title function_\">encodeClientCredentials</span>(</span><br><span class=\"line\">    protectedResource.<span class=\"property\">resource_id</span>, protectedResource.<span class=\"property\">resource_secret</span>)</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tokRes = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;POST&#x27;</span>, authServer.<span class=\"property\">introspectionEndpoint</span>, &#123;   </span><br><span class=\"line\">  <span class=\"attr\">body</span>: form_data,   </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: headers </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tokRes.<span class=\"property\">statusCode</span> &gt;= <span class=\"number\">200</span> &amp;&amp; tokRes.<span class=\"property\">statusCode</span> &lt; <span class=\"number\">300</span>) &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(tokRes.<span class=\"title function_\">getBody</span>()); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Got introspection response&#x27;</span>, body);   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> active = body.<span class=\"property\">active</span>;   </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (active) &#123;        </span><br><span class=\"line\">    req.<span class=\"property\">access_token</span> = body;   </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果</p>\n<h1 id=\"动态客户端注册\"><a href=\"#动态客户端注册\" class=\"headerlink\" title=\"动态客户端注册\"></a>动态客户端注册</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-12-16-09.png\"></p>\n<p>OAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。</p>\n<h1 id=\"生成授权码\"><a href=\"#生成授权码\" class=\"headerlink\" title=\"生成授权码\"></a>生成授权码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;random-string&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"title function_\">randomString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">table</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">field</span>: &#123; code &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">KEYUTIL</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsrsasign&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rsaKeypair = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">generateKeypair</span>(<span class=\"string\">&quot;RSA&quot;</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PRIVATE</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">prvKeyObj</span>, <span class=\"string\">&quot;PKCS8PRV&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">pubKeyObj</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-03-52-06.png\"><br>参考：<a href=\"http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\">http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html\">oauth2 nodejs实战</a></li>\n<li><a href=\"https://www.jianshu.com/p/7febbe553c83\">使用 Nodejs 搭建一个 OAuth2.0 服务</a></li>\n<li><a href=\"http://www.rfcreader.com/#rfc6749\">rfc6749</a></li>\n</ul>"},{"title":"hexo：从0开始与踩坑实录","date":"2021-03-16T06:46:49.000Z","description":" ","_content":"\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件(gittalk)\n\n仓库：https://github.com/gitalk/gitalk\n\nNexT已经内置，只需要修改NexT配置文件！\n\n```yml\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id:  # GitHub repo owner\n  repo:  # Repository name to store issues\n  client_id:  # GitHub Application Client ID\n  client_secret:  # GitHub Application Client Secret\n  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: false # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n```\n\n上面配置 client_id 和 client_secret 需要在github注册 OAuth App: \n\nhttps://github.com/settings/applications/new\n\n![](Snipaste_2023-02-16_13-28-44.png)\n\n```yml\nApplication name： # 应用名称，随意填写即可\nHomepage URL： # 你的网站地址，如https://yourname.github.io\nApplication description # 描述，随意填写即可\nAuthorization callback URL：# 你的网站地址，如https://yourname.github.io\n```\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","source":"_posts/hexo：从0开始与踩坑实录.md","raw":"---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: \" \"\n---\n\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件(gittalk)\n\n仓库：https://github.com/gitalk/gitalk\n\nNexT已经内置，只需要修改NexT配置文件！\n\n```yml\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id:  # GitHub repo owner\n  repo:  # Repository name to store issues\n  client_id:  # GitHub Application Client ID\n  client_secret:  # GitHub Application Client Secret\n  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: false # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n```\n\n上面配置 client_id 和 client_secret 需要在github注册 OAuth App: \n\nhttps://github.com/settings/applications/new\n\n![](Snipaste_2023-02-16_13-28-44.png)\n\n```yml\nApplication name： # 应用名称，随意填写即可\nHomepage URL： # 你的网站地址，如https://yourname.github.io\nApplication description # 描述，随意填写即可\nAuthorization callback URL：# 你的网站地址，如https://yourname.github.io\n```\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","slug":"hexo：从0开始与踩坑实录","published":1,"updated":"2023-02-16T18:58:25.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mb00078snre8pf9bwp","content":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件-gittalk\"><a href=\"#评论插件-gittalk\" class=\"headerlink\" title=\"评论插件(gittalk)\"></a>评论插件(gittalk)</h1><p>仓库：<a href=\"https://github.com/gitalk/gitalk\">https://github.com/gitalk/gitalk</a></p>\n<p>NexT已经内置，只需要修改NexT配置文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">github_id:</span>  <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>  <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>  <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>  <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">admin_user:</span>  <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  <span class=\"attr\">distraction_free_mode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置 client_id 和 client_secret 需要在github注册 OAuth App: </p>\n<p><a href=\"https://github.com/settings/applications/new\">https://github.com/settings/applications/new</a></p>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-16_13-28-44.png\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">name：</span> <span class=\"comment\"># 应用名称，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Homepage</span> <span class=\"string\">URL：</span> <span class=\"comment\"># 你的网站地址，如https://yourname.github.io</span></span><br><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">description</span> <span class=\"comment\"># 描述，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Authorization</span> <span class=\"string\">callback</span> <span class=\"string\">URL：#</span> <span class=\"string\">你的网站地址，如https://yourname.github.io</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件-gittalk\"><a href=\"#评论插件-gittalk\" class=\"headerlink\" title=\"评论插件(gittalk)\"></a>评论插件(gittalk)</h1><p>仓库：<a href=\"https://github.com/gitalk/gitalk\">https://github.com/gitalk/gitalk</a></p>\n<p>NexT已经内置，只需要修改NexT配置文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">github_id:</span>  <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>  <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>  <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>  <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">admin_user:</span>  <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  <span class=\"attr\">distraction_free_mode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置 client_id 和 client_secret 需要在github注册 OAuth App: </p>\n<p><a href=\"https://github.com/settings/applications/new\">https://github.com/settings/applications/new</a></p>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-16_13-28-44.png\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">name：</span> <span class=\"comment\"># 应用名称，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Homepage</span> <span class=\"string\">URL：</span> <span class=\"comment\"># 你的网站地址，如https://yourname.github.io</span></span><br><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">description</span> <span class=\"comment\"># 描述，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Authorization</span> <span class=\"string\">callback</span> <span class=\"string\">URL：#</span> <span class=\"string\">你的网站地址，如https://yourname.github.io</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n"},{"title":"面试题46. 把数字翻译成字符串","date":"2020-04-16T18:13:49.000Z","description":" ","_content":"\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","source":"_posts/面试题46-把数字翻译成字符串.md","raw":"---\ntitle: 面试题46. 把数字翻译成字符串\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","slug":"面试题46-把数字翻译成字符串","published":1,"updated":"2023-02-16T18:58:25.396Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mc00088snr1icp63vj","content":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"面试题30. 包含min函数的栈","date":"2020-04-15T23:33:59.000Z","_content":"\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n<!-- more -->\n\n示例:\n```js\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();   --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n提示：\n\n各函数的调用总次数不超过 20000 次\n \n\n注意：本题与主站 155 题相同：https://leetcode-cn.com/problems/min-stack/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\n\n## 双栈实现最小栈\n\n```js\n\n/**\n * 双栈实现最小栈\n * 1._data保存数据 _data: 9, 10, 7, 11, 5\n * 2._min保存最小值 _min: 9, 7, 5\n * \n * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min\n * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this._data = [];\n  this._min = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  if (!this._min.length || x <= this._min[this._min.length - 1]) {\n    this._min.push(x);\n  }\n  this._data.push(x);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const tail = this._data[this._data.length - 1];\n  if (tail === this._min[this._min.length - 1]) {\n    this._min.pop();\n  }\n  return this._data.pop();\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const len = this._data.length;\n  return this._data[len - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this._min[this._min.length - 1];\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n```\n","source":"_posts/面试题30. 包含min函数的栈.md","raw":"---\ntitle: 面试题30. 包含min函数的栈\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n<!-- more -->\n\n示例:\n```js\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();   --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n提示：\n\n各函数的调用总次数不超过 20000 次\n \n\n注意：本题与主站 155 题相同：https://leetcode-cn.com/problems/min-stack/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\n\n## 双栈实现最小栈\n\n```js\n\n/**\n * 双栈实现最小栈\n * 1._data保存数据 _data: 9, 10, 7, 11, 5\n * 2._min保存最小值 _min: 9, 7, 5\n * \n * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min\n * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this._data = [];\n  this._min = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  if (!this._min.length || x <= this._min[this._min.length - 1]) {\n    this._min.push(x);\n  }\n  this._data.push(x);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const tail = this._data[this._data.length - 1];\n  if (tail === this._min[this._min.length - 1]) {\n    this._min.pop();\n  }\n  return this._data.pop();\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const len = this._data.length;\n  return this._data[len - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this._min[this._min.length - 1];\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n```\n","slug":"面试题30. 包含min函数的栈","published":1,"updated":"2023-02-17T23:36:33.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2md000b8snr89zwhjiy","content":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MinStack</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">top</span>();   --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>各函数的调用总次数不超过 20000 次\n </p>\n<p>注意：本题与主站 155 题相同：<a href=\"https://leetcode-cn.com/problems/min-stack/\">https://leetcode-cn.com/problems/min-stack/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\">https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof</a></p>\n<h2 id=\"双栈实现最小栈\"><a href=\"#双栈实现最小栈\" class=\"headerlink\" title=\"双栈实现最小栈\"></a>双栈实现最小栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双栈实现最小栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data保存数据 _data: 9, 10, 7, 11, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._min保存最小值 _min: 9, 7, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MinStack</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> || x &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tail === <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">min</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.min()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>","more":"<p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MinStack</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">top</span>();   --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>各函数的调用总次数不超过 20000 次\n </p>\n<p>注意：本题与主站 155 题相同：<a href=\"https://leetcode-cn.com/problems/min-stack/\">https://leetcode-cn.com/problems/min-stack/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\">https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof</a></p>\n<h2 id=\"双栈实现最小栈\"><a href=\"#双栈实现最小栈\" class=\"headerlink\" title=\"双栈实现最小栈\"></a>双栈实现最小栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双栈实现最小栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data保存数据 _data: 9, 10, 7, 11, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._min保存最小值 _min: 9, 7, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MinStack</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> || x &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tail === <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">min</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.min()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"面试题47. 礼物的最大价值","date":"2020-04-16T23:33:59.000Z","_content":"\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n<!-- more -->\n\n示例 1:\n\n输入: \n```\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n```\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n \n\n提示：\n```\n0 < grid.length <= 200\n0 < grid[0].length <= 200\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\n\n## 1.深度优先遍历（超时）\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue1 = function(grid) {\n  let res = 0;\n  const m = grid.length - 1;\n  const n = grid[0].length - 1;\n\n  dfs(grid, 0, 0, 0);\n\n  function dfs(grid, i, j, count) {\n    if (i > m || j > n) return;\n    count += grid[i][j];\n    if (i === m && j === n) {\n      res = Math.max(res, count);\n      return;\n    }\n    // to right\n    dfs(grid, i, j + 1, count);\n    // to bottom\n    dfs(grid, i + 1, j, count);\n  }\n\n  return res;\n}\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i][j]：到达(i,j)位置的最大价值\n * 最优子结构：\n * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]\n * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]\n * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]\n * 边界：dp[0][0] = grid[0][0]\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue2 = function(grid) {\n  if (!grid.length) return 0;\n  const m = grid.length;\n  const n = grid[0].length;\n  let dp = new Array(m).fill();\n  dp = dp.map(() => new Array(n).fill(0));\n  dp[0][0] = grid[0][0];\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const sub1 = i < 1 ? 0 : dp[i-1][j];\n      const sub2 = j < 1 ? 0 :dp[i][j-1];\n      dp[i][j] = Math.max(sub1, sub2) + grid[i][j]\n    }\n  }\n  return dp[m-1][n-1];\n};\n```\n\n","source":"_posts/面试题47. 礼物的最大价值.md","raw":"---\ntitle: 面试题47. 礼物的最大价值\ndate: 2020-04-17 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n<!-- more -->\n\n示例 1:\n\n输入: \n```\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n```\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n \n\n提示：\n```\n0 < grid.length <= 200\n0 < grid[0].length <= 200\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\n\n## 1.深度优先遍历（超时）\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue1 = function(grid) {\n  let res = 0;\n  const m = grid.length - 1;\n  const n = grid[0].length - 1;\n\n  dfs(grid, 0, 0, 0);\n\n  function dfs(grid, i, j, count) {\n    if (i > m || j > n) return;\n    count += grid[i][j];\n    if (i === m && j === n) {\n      res = Math.max(res, count);\n      return;\n    }\n    // to right\n    dfs(grid, i, j + 1, count);\n    // to bottom\n    dfs(grid, i + 1, j, count);\n  }\n\n  return res;\n}\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i][j]：到达(i,j)位置的最大价值\n * 最优子结构：\n * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]\n * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]\n * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]\n * 边界：dp[0][0] = grid[0][0]\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue2 = function(grid) {\n  if (!grid.length) return 0;\n  const m = grid.length;\n  const n = grid[0].length;\n  let dp = new Array(m).fill();\n  dp = dp.map(() => new Array(n).fill(0));\n  dp[0][0] = grid[0][0];\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const sub1 = i < 1 ? 0 : dp[i-1][j];\n      const sub2 = j < 1 ? 0 :dp[i][j-1];\n      dp[i][j] = Math.max(sub1, sub2) + grid[i][j]\n    }\n  }\n  return dp[m-1][n-1];\n};\n```\n\n","slug":"面试题47. 礼物的最大价值","published":1,"updated":"2023-02-17T23:51:19.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2me000c8snr9m60fxld","content":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,3,1],</span><br><span class=\"line\">  [1,5,1],</span><br><span class=\"line\">  [4,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n </p>\n<p>提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &lt; grid.length &lt;= 200</span><br><span class=\"line\">0 &lt; grid[0].length &lt;= 200</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\">https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof</a></p>\n<h2 id=\"1-深度优先遍历（超时）\"><a href=\"#1-深度优先遍历（超时）\" class=\"headerlink\" title=\"1.深度优先遍历（超时）\"></a>1.深度优先遍历（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue1 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">grid, i, j, count</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; m || j &gt; n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    count += grid[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === m &amp;&amp; j === n) &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, count);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// to right</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i, j + <span class=\"number\">1</span>, count);</span><br><span class=\"line\">    <span class=\"comment\">// to bottom</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i + <span class=\"number\">1</span>, j, count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i][j]：到达(i,j)位置的最大价值</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界：dp[0][0] = grid[0][0]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue2 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!grid.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub1 = i &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub2 = j &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> :dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[i][j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sub1, sub2) + grid[i][j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>","more":"<p>示例 1:</p>\n<p>输入: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,3,1],</span><br><span class=\"line\">  [1,5,1],</span><br><span class=\"line\">  [4,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n </p>\n<p>提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &lt; grid.length &lt;= 200</span><br><span class=\"line\">0 &lt; grid[0].length &lt;= 200</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\">https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof</a></p>\n<h2 id=\"1-深度优先遍历（超时）\"><a href=\"#1-深度优先遍历（超时）\" class=\"headerlink\" title=\"1.深度优先遍历（超时）\"></a>1.深度优先遍历（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue1 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">grid, i, j, count</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; m || j &gt; n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    count += grid[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === m &amp;&amp; j === n) &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, count);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// to right</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i, j + <span class=\"number\">1</span>, count);</span><br><span class=\"line\">    <span class=\"comment\">// to bottom</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i + <span class=\"number\">1</span>, j, count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i][j]：到达(i,j)位置的最大价值</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界：dp[0][0] = grid[0][0]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue2 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!grid.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub1 = i &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub2 = j &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> :dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[i][j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sub1, sub2) + grid[i][j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题49. 丑数","date":"2020-04-16T23:26:51.000Z","_content":"\n\n我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n<!-- more -->\n\n示例:\n\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n说明:  \n\n1 是丑数。\nn 不超过1690。\n注意：本题与主站 264 题相同：https://leetcode-cn.com/problems/ugly-number-ii/\n\n通过次数7,052提交次数11,250\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/chou-shu-lcof\n\n## 1.动态规划\n\n```js\n/**\n * 动态规划\n * dp[i]: 第i个丑数\n * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]\n * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一\n * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n  let ugly1 = 1;\n  let ugly2 = 1;\n  let ugly3 = 1;\n  let dp = [0, 1];\n  let count = 2;\n  while (count <= n) {\n    let tmp1 = dp[ugly1] * 2;\n    let tmp2 = dp[ugly2] * 3;\n    let tmp3 = dp[ugly3] * 5;\n    dp[count] = Math.min(tmp1, tmp2, tmp3);\n    if (dp[count] === tmp1) ugly1++;\n    if (dp[count] === tmp2) ugly2++;\n    if (dp[count] === tmp3) ugly3++;\n    count++;\n  }\n  return dp[n];\n};\n```\n","source":"_posts/面试题49. 丑数.md","raw":"---\ntitle: 面试题49. 丑数\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n<!-- more -->\n\n示例:\n\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n说明:  \n\n1 是丑数。\nn 不超过1690。\n注意：本题与主站 264 题相同：https://leetcode-cn.com/problems/ugly-number-ii/\n\n通过次数7,052提交次数11,250\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/chou-shu-lcof\n\n## 1.动态规划\n\n```js\n/**\n * 动态规划\n * dp[i]: 第i个丑数\n * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]\n * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一\n * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n  let ugly1 = 1;\n  let ugly2 = 1;\n  let ugly3 = 1;\n  let dp = [0, 1];\n  let count = 2;\n  while (count <= n) {\n    let tmp1 = dp[ugly1] * 2;\n    let tmp2 = dp[ugly2] * 3;\n    let tmp3 = dp[ugly3] * 5;\n    dp[count] = Math.min(tmp1, tmp2, tmp3);\n    if (dp[count] === tmp1) ugly1++;\n    if (dp[count] === tmp2) ugly2++;\n    if (dp[count] === tmp3) ugly3++;\n    count++;\n  }\n  return dp[n];\n};\n```\n","slug":"面试题49. 丑数","published":1,"updated":"2023-02-17T23:41:04.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mf000h8snrd5q4hp54","content":"<p>我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: n &#x3D; 10<br>输出: 12<br>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<br>说明:  </p>\n<p>1 是丑数。<br>n 不超过1690。<br>注意：本题与主站 264 题相同：<a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p>\n<p>通过次数7,052提交次数11,250</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/chou-shu-lcof\">https://leetcode-cn.com/problems/chou-shu-lcof</a></p>\n<h2 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1.动态规划\"></a>1.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]: 第i个丑数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nthUglyNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp1 = dp[ugly1] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp2 = dp[ugly2] * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp3 = dp[ugly3] * <span class=\"number\">5</span>;</span><br><span class=\"line\">    dp[count] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(tmp1, tmp2, tmp3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp1) ugly1++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp2) ugly2++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp3) ugly3++;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>","more":"<p>示例:</p>\n<p>输入: n &#x3D; 10<br>输出: 12<br>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<br>说明:  </p>\n<p>1 是丑数。<br>n 不超过1690。<br>注意：本题与主站 264 题相同：<a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p>\n<p>通过次数7,052提交次数11,250</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/chou-shu-lcof\">https://leetcode-cn.com/problems/chou-shu-lcof</a></p>\n<h2 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1.动态规划\"></a>1.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]: 第i个丑数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nthUglyNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp1 = dp[ugly1] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp2 = dp[ugly2] * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp3 = dp[ugly3] * <span class=\"number\">5</span>;</span><br><span class=\"line\">    dp[count] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(tmp1, tmp2, tmp3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp1) ugly1++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp2) ugly2++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp3) ugly3++;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题50. 第一个只出现一次的字符","date":"2020-04-15T23:26:51.000Z","_content":"\n\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。\n\n<!-- more -->\n\n示例:\n\ns = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n \n\n限制：\n\n0 <= s 的长度 <= 50000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\n\n## Hash表记录\n\n```js\n/**\n * @param {string} s\n * @return {character}\n */\nvar firstUniqChar = function(s) {\n  const charMap = {};\n  for (let i = 0; i < s.length; i++) {\n    charMap[s[i]] = charMap[s[i]] ? 2 : 1;\n  }\n  for (let key in charMap) {\n    if (charMap[key] === 1) return key;\n  }\n  return ' ';\n};\n```","source":"_posts/面试题50. 第一个只出现一次的字符.md","raw":"---\ntitle: 面试题50. 第一个只出现一次的字符\ndate: 2020-04-16 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。\n\n<!-- more -->\n\n示例:\n\ns = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n \n\n限制：\n\n0 <= s 的长度 <= 50000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\n\n## Hash表记录\n\n```js\n/**\n * @param {string} s\n * @return {character}\n */\nvar firstUniqChar = function(s) {\n  const charMap = {};\n  for (let i = 0; i < s.length; i++) {\n    charMap[s[i]] = charMap[s[i]] ? 2 : 1;\n  }\n  for (let key in charMap) {\n    if (charMap[key] === 1) return key;\n  }\n  return ' ';\n};\n```","slug":"面试题50. 第一个只出现一次的字符","published":1,"updated":"2023-02-17T23:43:29.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mg000k8snrfp8w1zoz","content":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>s &#x3D; “abaccdeff”<br>返回 “b”</p>\n<p>s &#x3D; “”<br>返回 “ “\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\">https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof</a></p>\n<h2 id=\"Hash表记录\"><a href=\"#Hash表记录\" class=\"headerlink\" title=\"Hash表记录\"></a>Hash表记录</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">character</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> charMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    charMap[s[i]] = charMap[s[i]] ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> charMap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charMap[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。</p>","more":"<p>示例:</p>\n<p>s &#x3D; “abaccdeff”<br>返回 “b”</p>\n<p>s &#x3D; “”<br>返回 “ “\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\">https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof</a></p>\n<h2 id=\"Hash表记录\"><a href=\"#Hash表记录\" class=\"headerlink\" title=\"Hash表记录\"></a>Hash表记录</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">character</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> charMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    charMap[s[i]] = charMap[s[i]] ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> charMap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charMap[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题52. 两个链表的第一个公共节点","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表：\n\n![](160_statement.png)\n\n在节点 c1 开始相交。\n\n<!-- more -->\n\n \n\n示例 1：\n\n![img](160_example_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\n\n示例 2：\n\n![img](160_example_2.png)\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\n\n示例 3：\n\n![img](160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n\n\n注意：\n\n如果两个链表没有交点，返回 null.\n在返回结果后，两个链表仍须保持原有的结构。\n可假定整个链表结构中没有循环。\n程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n\n## 计算长短链表差值\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * 1.遍历headA, headB，分别计算长度countA, countB\n * 2.根据countA, countB判断长链表long和短链表short，相差长度k\n * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  if (!headA || !headB) return null;\n  if (headA === headB) return headA;\n  let curA = headA;\n  let curB = headB;\n  let countA = 0;\n  let countB = 0;  \n  // 计算A链表和B链表的长度\n  while (curA.next || curB.next) {\n    if (curA.next) {\n      countA++;\n      curA = curA.next;\n    }\n    if (curB.next) {\n      countB++;\n      curB = curB.next;\n    }\n  }\n  if (curA !== curB) return null;\n\n  let long;\n  let short;\n  let k;\n  if (countB > countA) {\n    long = headB;\n    short = headA;\n    k = countB - countA;\n  } else {\n    long = headA;\n    short = headB;\n    k = countA - countB;\n  }\n  while (long) {\n    long = long.next;\n    if (k) {\n      k--;\n    } else {\n      short = short.next;\n    }\n    if (long === short) break;\n  }\n  return long;\n};\n```\n","source":"_posts/面试题52. 两个链表的第一个公共节点.md","raw":"---\ntitle: 面试题52. 两个链表的第一个公共节点\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表：\n\n![](160_statement.png)\n\n在节点 c1 开始相交。\n\n<!-- more -->\n\n \n\n示例 1：\n\n![img](160_example_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\n\n示例 2：\n\n![img](160_example_2.png)\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\n\n示例 3：\n\n![img](160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n\n\n注意：\n\n如果两个链表没有交点，返回 null.\n在返回结果后，两个链表仍须保持原有的结构。\n可假定整个链表结构中没有循环。\n程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n\n## 计算长短链表差值\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * 1.遍历headA, headB，分别计算长度countA, countB\n * 2.根据countA, countB判断长链表long和短链表short，相差长度k\n * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  if (!headA || !headB) return null;\n  if (headA === headB) return headA;\n  let curA = headA;\n  let curB = headB;\n  let countA = 0;\n  let countB = 0;  \n  // 计算A链表和B链表的长度\n  while (curA.next || curB.next) {\n    if (curA.next) {\n      countA++;\n      curA = curA.next;\n    }\n    if (curB.next) {\n      countB++;\n      curB = curB.next;\n    }\n  }\n  if (curA !== curB) return null;\n\n  let long;\n  let short;\n  let k;\n  if (countB > countA) {\n    long = headB;\n    short = headA;\n    k = countB - countA;\n  } else {\n    long = headA;\n    short = headB;\n    k = countA - countB;\n  }\n  while (long) {\n    long = long.next;\n    if (k) {\n      k--;\n    } else {\n      short = short.next;\n    }\n    if (long === short) break;\n  }\n  return long;\n};\n```\n","slug":"面试题52. 两个链表的第一个公共节点","published":1,"updated":"2023-02-18T00:00:14.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mi000p8snr4pfnh5lr","content":"<p>输入两个链表，找出它们的第一个公共节点。</p>\n<p>如下面的两个链表：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_statement.png\"></p>\n<p>在节点 c1 开始相交。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Reference of the node with value &#x3D; 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p>\n<p>示例 2：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Reference of the node with value &#x3D; 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p>\n<p>示例 3：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p>\n<p>注意：</p>\n<p>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br>本题与主站 160 题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>\n<h2 id=\"计算长短链表差值\"><a href=\"#计算长短链表差值\" class=\"headerlink\" title=\"计算长短链表差值\"></a>计算长短链表差值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.遍历headA, headB，分别计算长度countA, countB</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据countA, countB判断长链表long和短链表short，相差长度k</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!headA || !headB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headA === headB) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curA = headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curB = headB;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countA = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countB = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 计算A链表和B链表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curA.<span class=\"property\">next</span> || curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curA.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countA++;</span><br><span class=\"line\">      curA = curA.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countB++;</span><br><span class=\"line\">      curB = curB.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curA !== curB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> long;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> short;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> k;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (countB &gt; countA) &#123;</span><br><span class=\"line\">    long = headB;</span><br><span class=\"line\">    short = headA;</span><br><span class=\"line\">    k = countB - countA;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    long = headA;</span><br><span class=\"line\">    short = headB;</span><br><span class=\"line\">    k = countA - countB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (long) &#123;</span><br><span class=\"line\">    long = long.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k) &#123;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      short = short.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (long === short) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入两个链表，找出它们的第一个公共节点。</p>\n<p>如下面的两个链表：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_statement.png\"></p>\n<p>在节点 c1 开始相交。</p>","more":"<p>示例 1：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Reference of the node with value &#x3D; 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p>\n<p>示例 2：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Reference of the node with value &#x3D; 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p>\n<p>示例 3：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p>\n<p>注意：</p>\n<p>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br>本题与主站 160 题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>\n<h2 id=\"计算长短链表差值\"><a href=\"#计算长短链表差值\" class=\"headerlink\" title=\"计算长短链表差值\"></a>计算长短链表差值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.遍历headA, headB，分别计算长度countA, countB</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据countA, countB判断长链表long和短链表short，相差长度k</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!headA || !headB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headA === headB) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curA = headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curB = headB;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countA = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countB = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 计算A链表和B链表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curA.<span class=\"property\">next</span> || curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curA.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countA++;</span><br><span class=\"line\">      curA = curA.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countB++;</span><br><span class=\"line\">      curB = curB.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curA !== curB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> long;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> short;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> k;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (countB &gt; countA) &#123;</span><br><span class=\"line\">    long = headB;</span><br><span class=\"line\">    short = headA;</span><br><span class=\"line\">    k = countB - countA;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    long = headA;</span><br><span class=\"line\">    short = headB;</span><br><span class=\"line\">    k = countA - countB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (long) &#123;</span><br><span class=\"line\">    long = long.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k) &#123;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      short = short.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (long === short) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题53 - II. 0～n-1中缺失的数字","date":"2020-04-15T23:33:59.000Z","_content":"\n\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n<!-- more -->\n\n示例 1:\n\n输入: [0,1,3]\n输出: 2\n示例 2:\n\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n \n\n限制：\n\n1 <= 数组长度 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\n\n## 1.二分查找\n\n```js\n/**\n * 二分查找\n * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n  if (!nums.length) return 0;\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    let mid = left + Math.floor((right - left) / 2);\n    if (\n      nums[mid] !== mid\n      && (nums[mid - 1] === mid - 1 || nums[mid - 1] === undefined)\n    ) {\n      return mid;\n    }\n    if (nums[mid] === mid) {\n      left = mid + 1;\n\n    } else {\n      right = mid - 1;\n    }\n  }\n  return nums.length;\n};\n```\n","source":"_posts/面试题53 - II. 0～n-1中缺失的数字.md","raw":"---\ntitle: 面试题53 - II. 0～n-1中缺失的数字\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n<!-- more -->\n\n示例 1:\n\n输入: [0,1,3]\n输出: 2\n示例 2:\n\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n \n\n限制：\n\n1 <= 数组长度 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\n\n## 1.二分查找\n\n```js\n/**\n * 二分查找\n * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n  if (!nums.length) return 0;\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    let mid = left + Math.floor((right - left) / 2);\n    if (\n      nums[mid] !== mid\n      && (nums[mid - 1] === mid - 1 || nums[mid - 1] === undefined)\n    ) {\n      return mid;\n    }\n    if (nums[mid] === mid) {\n      left = mid + 1;\n\n    } else {\n      right = mid - 1;\n    }\n  }\n  return nums.length;\n};\n```\n","slug":"面试题53 - II. 0～n-1中缺失的数字","published":1,"updated":"2023-02-18T00:09:28.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mk000s8snr8z0t4ze3","content":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p>\n<p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof</a></p>\n<h2 id=\"1-二分查找\"><a href=\"#1-二分查找\" class=\"headerlink\" title=\"1.二分查找\"></a>1.二分查找</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nums[mid] !== mid</span><br><span class=\"line\">      &amp;&amp; (nums[mid - <span class=\"number\">1</span>] === mid - <span class=\"number\">1</span> || nums[mid - <span class=\"number\">1</span>] === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>","more":"<p>示例 1:</p>\n<p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p>\n<p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof</a></p>\n<h2 id=\"1-二分查找\"><a href=\"#1-二分查找\" class=\"headerlink\" title=\"1.二分查找\"></a>1.二分查找</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nums[mid] !== mid</span><br><span class=\"line\">      &amp;&amp; (nums[mid - <span class=\"number\">1</span>] === mid - <span class=\"number\">1</span> || nums[mid - <span class=\"number\">1</span>] === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题55 - II. 平衡二叉树","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n<!-- more -->\n\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n示例 2:\n\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n返回 false 。\n\n \n\n限制：\n\n1 <= 树的结点个数 <= 10000\n注意：本题与主站 110 题相同：https://leetcode-cn.com/problems/balanced-binary-tree/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\n\n## 1.深度优先遍历（后序）\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 深度优先（后序递归遍历）计算左右子树的深度\n * 判断左右子树深度差是否超过1\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced1 = function(root) {\n  let res = true;\n  dfs(root);\n  function dfs(node) {\n    if (!node) return 0;\n    const lDeep = dfs(node.left) + 1;\n    const rDeep = dfs(node.right) + 1;\n    if (Math.abs(lDeep - rDeep) > 1) {\n      res = false;\n    }\n    return Math.max(lDeep, rDeep);\n  }\n  return res;\n};\n\nvar isBalanced = isBalanced1;\n```\n","source":"_posts/面试题55 - II. 平衡二叉树.md","raw":"---\ntitle: 面试题55 - II. 平衡二叉树\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n<!-- more -->\n\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n示例 2:\n\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n返回 false 。\n\n \n\n限制：\n\n1 <= 树的结点个数 <= 10000\n注意：本题与主站 110 题相同：https://leetcode-cn.com/problems/balanced-binary-tree/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\n\n## 1.深度优先遍历（后序）\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 深度优先（后序递归遍历）计算左右子树的深度\n * 判断左右子树深度差是否超过1\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced1 = function(root) {\n  let res = true;\n  dfs(root);\n  function dfs(node) {\n    if (!node) return 0;\n    const lDeep = dfs(node.left) + 1;\n    const rDeep = dfs(node.right) + 1;\n    if (Math.abs(lDeep - rDeep) > 1) {\n      res = false;\n    }\n    return Math.max(lDeep, rDeep);\n  }\n  return res;\n};\n\nvar isBalanced = isBalanced1;\n```\n","slug":"面试题55 - II. 平衡二叉树","published":1,"updated":"2023-02-18T00:07:20.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2ml000w8snr5qrd3axv","content":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<span id=\"more\"></span>\n\n\n<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>返回 true 。</p>\n<p>示例 2:</p>\n<p>给定二叉树 [1,2,2,3,3,null,null,4,4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      1</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    2   2</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   4</span><br></pre></td></tr></table></figure>\n<p>返回 false 。</p>\n<p> </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 树的结点个数 &lt;&#x3D; 10000<br>注意：本题与主站 110 题相同：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\">https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof</a></p>\n<h2 id=\"1-深度优先遍历（后序）\"><a href=\"#1-深度优先遍历（后序）\" class=\"headerlink\" title=\"1.深度优先遍历（后序）\"></a>1.深度优先遍历（后序）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度优先（后序递归遍历）计算左右子树的深度</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断左右子树深度差是否超过1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced1 = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">left</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">right</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(lDeep - rDeep) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(lDeep, rDeep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = isBalanced1;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>","more":"<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>返回 true 。</p>\n<p>示例 2:</p>\n<p>给定二叉树 [1,2,2,3,3,null,null,4,4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      1</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    2   2</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   4</span><br></pre></td></tr></table></figure>\n<p>返回 false 。</p>\n<p> </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 树的结点个数 &lt;&#x3D; 10000<br>注意：本题与主站 110 题相同：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\">https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof</a></p>\n<h2 id=\"1-深度优先遍历（后序）\"><a href=\"#1-深度优先遍历（后序）\" class=\"headerlink\" title=\"1.深度优先遍历（后序）\"></a>1.深度优先遍历（后序）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度优先（后序递归遍历）计算左右子树的深度</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断左右子树深度差是否超过1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced1 = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">left</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">right</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(lDeep - rDeep) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(lDeep, rDeep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = isBalanced1;</span><br></pre></td></tr></table></figure>"},{"title":"面试题57 - II. 和为s的连续正数序列","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n<!-- more -->\n \n\n示例 1：\n\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n示例 2：\n\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n \n\n限制：\n\n1 <= target <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n\n## 使用滑动窗口（双指针变种）\n\n```js\n/**\n * 使用滑动窗口（双指针变种）\n * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target\n * 1.当sum等于target，则保存win副本，然后继续右移idx\n * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）\n * @param {number} target\n * @return {number[][]}\n */\nvar findContinuousSequence = function(target) {\n  if (target < 2) return [];\n  let idx = 1;\n  let sum = 0;\n  let win = [];\n  const res = [];\n  const max = Math.ceil(target / 2);\n  while (idx <= max) {\n    if (sum < target) {\n      sum += idx;\n      win.push(idx);\n      idx++;\n    }\n\n    if (sum > target) {\n      sum -= win.shift();\n    }\n\n    if (sum === target) {\n      res.push(win.slice(0));\n      sum -= win.shift();\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/面试题57 - II. 和为s的连续正数序列.md","raw":"---\ntitle: 面试题57 - II. 和为s的连续正数序列\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n<!-- more -->\n \n\n示例 1：\n\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n示例 2：\n\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n \n\n限制：\n\n1 <= target <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n\n## 使用滑动窗口（双指针变种）\n\n```js\n/**\n * 使用滑动窗口（双指针变种）\n * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target\n * 1.当sum等于target，则保存win副本，然后继续右移idx\n * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）\n * @param {number} target\n * @return {number[][]}\n */\nvar findContinuousSequence = function(target) {\n  if (target < 2) return [];\n  let idx = 1;\n  let sum = 0;\n  let win = [];\n  const res = [];\n  const max = Math.ceil(target / 2);\n  while (idx <= max) {\n    if (sum < target) {\n      sum += idx;\n      win.push(idx);\n      idx++;\n    }\n\n    if (sum > target) {\n      sum -= win.shift();\n    }\n\n    if (sum === target) {\n      res.push(win.slice(0));\n      sum -= win.shift();\n    }\n  }\n  return res;\n};\n```\n","slug":"面试题57 - II. 和为s的连续正数序列","published":1,"updated":"2023-02-17T23:49:12.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mm000z8snrhyju6bw2","content":"<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<span id=\"more\"></span>\n<p> </p>\n<p>示例 1：</p>\n<p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]<br>示例 2：</p>\n<p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; target &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a></p>\n<h2 id=\"使用滑动窗口（双指针变种）\"><a href=\"#使用滑动窗口（双指针变种）\" class=\"headerlink\" title=\"使用滑动窗口（双指针变种）\"></a>使用滑动窗口（双指针变种）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用滑动窗口（双指针变种）</span></span><br><span class=\"line\"><span class=\"comment\"> * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当sum等于target，则保存win副本，然后继续右移idx</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> win = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(target / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (idx &lt;= max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">      sum += idx;</span><br><span class=\"line\">      win.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(win.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>","more":"<p> </p>\n<p>示例 1：</p>\n<p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]<br>示例 2：</p>\n<p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; target &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a></p>\n<h2 id=\"使用滑动窗口（双指针变种）\"><a href=\"#使用滑动窗口（双指针变种）\" class=\"headerlink\" title=\"使用滑动窗口（双指针变种）\"></a>使用滑动窗口（双指针变种）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用滑动窗口（双指针变种）</span></span><br><span class=\"line\"><span class=\"comment\"> * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当sum等于target，则保存win副本，然后继续右移idx</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> win = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(target / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (idx &lt;= max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">      sum += idx;</span><br><span class=\"line\">      win.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(win.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题58 - I. 翻转单词顺序","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n示例 2：\n\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n示例 3：\n\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n \n\n说明：\n\n无空格字符构成一个单词。\n输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n注意：本题与主站 151 题相同：https://leetcode-cn.com/problems/reverse-words-in-a-string/\n\n注意：此题对比原题有改动\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\n\n## 1.滑动窗口+双指针\n\n```js\n/**\n * 滑动窗口+双指针\n * 1.使用滑动窗口取出每个单词\n * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n  if (!s) return '';\n  let left = 0;\n  let right = 1;\n  const isSpace = (val) => ['', ' '].includes(val); \n  const wordArr = [];\n  // [left. right)\n  while (right <= s.length) {\n    if (\n      !isSpace(s[left])\n      && !isSpace(s[right - 1])\n      && isSpace(s[right] || '')\n    ) {\n      wordArr.push(s.slice(left, right));\n      left = right;\n    }\n    if (isSpace(s[left])) left++;\n    right++;\n  }\n  left = 0;\n  right = wordArr.length - 1;\n  // [left, right]\n  while (left < right) {\n    const tmp = wordArr[left];\n    wordArr[left] = wordArr[right];\n    wordArr[right] = tmp;\n    left++;\n    right--;\n  }\n  return wordArr.join(' ');\n};\n```\n","source":"_posts/面试题58 - I. 翻转单词顺序.md","raw":"---\ntitle: 面试题58 - I. 翻转单词顺序\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n示例 2：\n\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n示例 3：\n\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n \n\n说明：\n\n无空格字符构成一个单词。\n输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n注意：本题与主站 151 题相同：https://leetcode-cn.com/problems/reverse-words-in-a-string/\n\n注意：此题对比原题有改动\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\n\n## 1.滑动窗口+双指针\n\n```js\n/**\n * 滑动窗口+双指针\n * 1.使用滑动窗口取出每个单词\n * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n  if (!s) return '';\n  let left = 0;\n  let right = 1;\n  const isSpace = (val) => ['', ' '].includes(val); \n  const wordArr = [];\n  // [left. right)\n  while (right <= s.length) {\n    if (\n      !isSpace(s[left])\n      && !isSpace(s[right - 1])\n      && isSpace(s[right] || '')\n    ) {\n      wordArr.push(s.slice(left, right));\n      left = right;\n    }\n    if (isSpace(s[left])) left++;\n    right++;\n  }\n  left = 0;\n  right = wordArr.length - 1;\n  // [left, right]\n  while (left < right) {\n    const tmp = wordArr[left];\n    wordArr[left] = wordArr[right];\n    wordArr[right] = tmp;\n    left++;\n    right--;\n  }\n  return wordArr.join(' ');\n};\n```\n","slug":"面试题58 - I. 翻转单词顺序","published":1,"updated":"2023-02-17T23:48:02.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mn00138snrfw282x8y","content":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入: “the sky is blue”<br>输出: “blue is sky the”<br>示例 2：</p>\n<p>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>示例 3：</p>\n<p>输入: “a good   example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n </p>\n<p>说明：</p>\n<p>无空格字符构成一个单词。<br>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<br>注意：本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p>\n<p>注意：此题对比原题有改动</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof</a></p>\n<h2 id=\"1-滑动窗口-双指针\"><a href=\"#1-滑动窗口-双指针\" class=\"headerlink\" title=\"1.滑动窗口+双指针\"></a>1.滑动窗口+双指针</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口+双指针</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用滑动窗口取出每个单词</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!s) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isSpace</span> = (<span class=\"params\">val</span>) =&gt; [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>].<span class=\"title function_\">includes</span>(val); </span><br><span class=\"line\">  <span class=\"keyword\">const</span> wordArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// [left. right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt;= s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !<span class=\"title function_\">isSpace</span>(s[left])</span><br><span class=\"line\">      &amp;&amp; !<span class=\"title function_\">isSpace</span>(s[right - <span class=\"number\">1</span>])</span><br><span class=\"line\">      &amp;&amp; <span class=\"title function_\">isSpace</span>(s[right] || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      wordArr.<span class=\"title function_\">push</span>(s.<span class=\"title function_\">slice</span>(left, right));</span><br><span class=\"line\">      left = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSpace</span>(s[left])) left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  right = wordArr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = wordArr[left];</span><br><span class=\"line\">    wordArr[left] = wordArr[right];</span><br><span class=\"line\">    wordArr[right] = tmp;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wordArr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>","more":"<p>示例 1：</p>\n<p>输入: “the sky is blue”<br>输出: “blue is sky the”<br>示例 2：</p>\n<p>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>示例 3：</p>\n<p>输入: “a good   example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n </p>\n<p>说明：</p>\n<p>无空格字符构成一个单词。<br>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<br>注意：本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p>\n<p>注意：此题对比原题有改动</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof</a></p>\n<h2 id=\"1-滑动窗口-双指针\"><a href=\"#1-滑动窗口-双指针\" class=\"headerlink\" title=\"1.滑动窗口+双指针\"></a>1.滑动窗口+双指针</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口+双指针</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用滑动窗口取出每个单词</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!s) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isSpace</span> = (<span class=\"params\">val</span>) =&gt; [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>].<span class=\"title function_\">includes</span>(val); </span><br><span class=\"line\">  <span class=\"keyword\">const</span> wordArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// [left. right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt;= s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !<span class=\"title function_\">isSpace</span>(s[left])</span><br><span class=\"line\">      &amp;&amp; !<span class=\"title function_\">isSpace</span>(s[right - <span class=\"number\">1</span>])</span><br><span class=\"line\">      &amp;&amp; <span class=\"title function_\">isSpace</span>(s[right] || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      wordArr.<span class=\"title function_\">push</span>(s.<span class=\"title function_\">slice</span>(left, right));</span><br><span class=\"line\">      left = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSpace</span>(s[left])) left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  right = wordArr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = wordArr[left];</span><br><span class=\"line\">    wordArr[left] = wordArr[right];</span><br><span class=\"line\">    wordArr[right] = tmp;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wordArr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题59 - I. 滑动窗口的最大值","date":"2020-04-15T23:33:59.000Z","_content":"\n\n给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。\n\n<!-- more -->\n\n示例:\n\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n```\n  滑动窗口的位置                 最大值\n---------------               -------\n[\n  1  3  -1] -3  5  3  6  7       3\n  1 [3  -1  -3] 5  3  6  7       3\n  1  3 [-1  -3  5] 3  6  7       5\n  1  3  -1 [-3  5  3] 6  7       5\n  1  3  -1  -3 [5  3  6] 7       6\n  1  3  -1  -3  5 [3  6  7       7\n]\n```\n\n提示：\n\n你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\n\n\n## 暴力法\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  let left = 0;\n  let right = k - 1;\n  const res = [];\n  while (right < nums.length) {\n    // [left, right]\n    let max = -Infinity;\n    for (let i = left; i <= right; i++) {\n      max = Math.max(max, nums[i]);\n    }\n    res.push(max);\n    left++;\n    right++;\n  }\n  return res;\n};\n```\n\n## 双端队列\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  const res= [];\n  let curMaxNumIdx;\n  const deQueue = new DeQueue(nums, k);\n\n  curMaxNumIdx = deQueue.getLeftHead();\n  res.push(nums[curMaxNumIdx]);\n\n  for (let i = k; i < nums.length; i++) {\n    deQueue.push(i);\n    curMaxNumIdx = deQueue.getLeftHead();\n    res.push(nums[curMaxNumIdx]);\n  }\n  return res;\n}\n\n/**\n * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前\n * 并且这些idx都是在滑动中\n */\nfunction DeQueue(nums, k) {\n  this._queue = [];\n  this._nums = nums;\n  this._k = k;\n  this._init();\n}\n\nDeQueue.prototype.push = function(idx) {\n  this._clean(idx);\n  this._queue.push(idx);\n}\n\nDeQueue.prototype.getLeftHead = function() {\n  return this._queue[0];\n}\n\nDeQueue.prototype._init = function() {\n  for (let i = 0; i < this._k; i++) {\n    this.push(i);\n  }\n}\n\nDeQueue.prototype._clean = function(idx) {\n  const queueLen = this._queue.length;\n  const leftHead = this._queue[0];\n  const minValidIdx = idx + 1 - this._k;\n  // 队列为空，不需要清理无用元素\n  if (!queueLen) return;\n\n  // ps: 每次调用_clean只会调用一次\n  // 当前滑动窗口中index的取值范围是：[minValidIdx, idx]\n  // 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉\n  if (leftHead < minValidIdx) {\n    this._queue.shift();\n  }\n\n  // PS: 调用多次更新序列\n  // 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作\n  // deQueue中的元素要求是：一个由大到小的有序列\n  // 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉\n  let rightHead = this._queue[this._queue.length - 1];\n  while (this._queue.length && this._nums[idx] >= this._nums[rightHead]) {\n    this._queue.pop();\n    rightHead = this._queue[this._queue.length - 1];\n  }\n}\n```\n","source":"_posts/面试题59 - I. 滑动窗口的最大值.md","raw":"---\ntitle: 面试题59 - I. 滑动窗口的最大值\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。\n\n<!-- more -->\n\n示例:\n\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n```\n  滑动窗口的位置                 最大值\n---------------               -------\n[\n  1  3  -1] -3  5  3  6  7       3\n  1 [3  -1  -3] 5  3  6  7       3\n  1  3 [-1  -3  5] 3  6  7       5\n  1  3  -1 [-3  5  3] 6  7       5\n  1  3  -1  -3 [5  3  6] 7       6\n  1  3  -1  -3  5 [3  6  7       7\n]\n```\n\n提示：\n\n你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\n\n\n## 暴力法\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  let left = 0;\n  let right = k - 1;\n  const res = [];\n  while (right < nums.length) {\n    // [left, right]\n    let max = -Infinity;\n    for (let i = left; i <= right; i++) {\n      max = Math.max(max, nums[i]);\n    }\n    res.push(max);\n    left++;\n    right++;\n  }\n  return res;\n};\n```\n\n## 双端队列\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  const res= [];\n  let curMaxNumIdx;\n  const deQueue = new DeQueue(nums, k);\n\n  curMaxNumIdx = deQueue.getLeftHead();\n  res.push(nums[curMaxNumIdx]);\n\n  for (let i = k; i < nums.length; i++) {\n    deQueue.push(i);\n    curMaxNumIdx = deQueue.getLeftHead();\n    res.push(nums[curMaxNumIdx]);\n  }\n  return res;\n}\n\n/**\n * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前\n * 并且这些idx都是在滑动中\n */\nfunction DeQueue(nums, k) {\n  this._queue = [];\n  this._nums = nums;\n  this._k = k;\n  this._init();\n}\n\nDeQueue.prototype.push = function(idx) {\n  this._clean(idx);\n  this._queue.push(idx);\n}\n\nDeQueue.prototype.getLeftHead = function() {\n  return this._queue[0];\n}\n\nDeQueue.prototype._init = function() {\n  for (let i = 0; i < this._k; i++) {\n    this.push(i);\n  }\n}\n\nDeQueue.prototype._clean = function(idx) {\n  const queueLen = this._queue.length;\n  const leftHead = this._queue[0];\n  const minValidIdx = idx + 1 - this._k;\n  // 队列为空，不需要清理无用元素\n  if (!queueLen) return;\n\n  // ps: 每次调用_clean只会调用一次\n  // 当前滑动窗口中index的取值范围是：[minValidIdx, idx]\n  // 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉\n  if (leftHead < minValidIdx) {\n    this._queue.shift();\n  }\n\n  // PS: 调用多次更新序列\n  // 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作\n  // deQueue中的元素要求是：一个由大到小的有序列\n  // 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉\n  let rightHead = this._queue[this._queue.length - 1];\n  while (this._queue.length && this._nums[idx] >= this._nums[rightHead]) {\n    this._queue.pop();\n    rightHead = this._queue[this._queue.length - 1];\n  }\n}\n```\n","slug":"面试题59 - I. 滑动窗口的最大值","published":1,"updated":"2023-02-17T23:58:50.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mn00168snr2ecx7vjm","content":"<p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3<br>输出: [3,3,5,5,6,7]<br>解释: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  滑动窗口的位置                 最大值</span><br><span class=\"line\">---------------               -------</span><br><span class=\"line\">[</span><br><span class=\"line\">  1  3  -1] -3  5  3  6  7       3</span><br><span class=\"line\">  1 [3  -1  -3] 5  3  6  7       3</span><br><span class=\"line\">  1  3 [-1  -3  5] 3  6  7       5</span><br><span class=\"line\">  1  3  -1 [-3  5  3] 6  7       5</span><br><span class=\"line\">  1  3  -1  -3 [5  3  6] 7       6</span><br><span class=\"line\">  1  3  -1  -3  5 [3  6  7       7</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = k - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = -<span class=\"title class_\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res= [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curMaxNumIdx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DeQueue</span>(nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">  curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    deQueue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">    curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且这些idx都是在滑动中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DeQueue</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span> = nums;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span> = k;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_clean</span>(idx);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getLeftHead</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_clean</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueLen = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minValidIdx = idx + <span class=\"number\">1</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 队列为空，不需要清理无用元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!queueLen) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ps: 每次调用_clean只会调用一次</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前滑动窗口中index的取值范围是：[minValidIdx, idx]</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftHead &lt; minValidIdx) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// PS: 调用多次更新序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// deQueue中的元素要求是：一个由大到小的有序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[idx] &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[rightHead]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p>","more":"<p>示例:</p>\n<p>输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3<br>输出: [3,3,5,5,6,7]<br>解释: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  滑动窗口的位置                 最大值</span><br><span class=\"line\">---------------               -------</span><br><span class=\"line\">[</span><br><span class=\"line\">  1  3  -1] -3  5  3  6  7       3</span><br><span class=\"line\">  1 [3  -1  -3] 5  3  6  7       3</span><br><span class=\"line\">  1  3 [-1  -3  5] 3  6  7       5</span><br><span class=\"line\">  1  3  -1 [-3  5  3] 6  7       5</span><br><span class=\"line\">  1  3  -1  -3 [5  3  6] 7       6</span><br><span class=\"line\">  1  3  -1  -3  5 [3  6  7       7</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = k - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = -<span class=\"title class_\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res= [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curMaxNumIdx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DeQueue</span>(nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">  curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    deQueue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">    curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且这些idx都是在滑动中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DeQueue</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span> = nums;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span> = k;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_clean</span>(idx);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getLeftHead</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_clean</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueLen = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minValidIdx = idx + <span class=\"number\">1</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 队列为空，不需要清理无用元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!queueLen) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ps: 每次调用_clean只会调用一次</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前滑动窗口中index的取值范围是：[minValidIdx, idx]</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftHead &lt; minValidIdx) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// PS: 调用多次更新序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// deQueue中的元素要求是：一个由大到小的有序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[idx] &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[rightHead]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题59 - II. 队列的最大值","date":"2020-04-16T23:26:51.000Z","_content":"\n\n请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。\n\n<!-- more -->\n\n若队列为空，pop_front 和 max_value 需要返回 -1\n\n示例 1：\n\n输入: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n示例 2：\n\n输入: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n输出: [null,-1,-1]\n \n\n限制：\n\n1 <= push_back,pop_front,max_value的总操作数 <= 10000\n1 <= value <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\n\n## 辅助双端队列\n\n```js\n/**\n * 辅助双端队列\n * 1._data队列正常对数据进行入队出队\n * 2._max是一个双端队列。每次_data入队元素，_max如下操作：\n * 2.1 当_max空，如对元素\n * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。\n * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素\n * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了\n */\nvar MaxQueue = function() {\n  this._data = [];\n  this._max = [];\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.max_value = function() {\n  if (!this._max.length) return -1;\n  return this._max[0];\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nMaxQueue.prototype.push_back = function(value) {\n  this._data.push(value);\n  while (this._max.length && value > this._max[this._max.length-1]) {\n    this._max.pop();\n  }\n  this._max.push(value);\n\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.pop_front = function() {\n  if (!this._data.length) return -1;\n  const head = this._data.shift();\n  if (head === this._max[0]) {\n    this._max.shift();\n  }\n  return head;\n};\n\n/**\n * Your MaxQueue object will be instantiated and called as such:\n * var obj = new MaxQueue()\n * var param_1 = obj.max_value()\n * obj.push_back(value)\n * var param_3 = obj.pop_front()\n */\n```\n","source":"_posts/面试题59 - II. 队列的最大值.md","raw":"---\ntitle: 面试题59 - II. 队列的最大值\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。\n\n<!-- more -->\n\n若队列为空，pop_front 和 max_value 需要返回 -1\n\n示例 1：\n\n输入: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n示例 2：\n\n输入: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n输出: [null,-1,-1]\n \n\n限制：\n\n1 <= push_back,pop_front,max_value的总操作数 <= 10000\n1 <= value <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\n\n## 辅助双端队列\n\n```js\n/**\n * 辅助双端队列\n * 1._data队列正常对数据进行入队出队\n * 2._max是一个双端队列。每次_data入队元素，_max如下操作：\n * 2.1 当_max空，如对元素\n * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。\n * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素\n * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了\n */\nvar MaxQueue = function() {\n  this._data = [];\n  this._max = [];\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.max_value = function() {\n  if (!this._max.length) return -1;\n  return this._max[0];\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nMaxQueue.prototype.push_back = function(value) {\n  this._data.push(value);\n  while (this._max.length && value > this._max[this._max.length-1]) {\n    this._max.pop();\n  }\n  this._max.push(value);\n\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.pop_front = function() {\n  if (!this._data.length) return -1;\n  const head = this._data.shift();\n  if (head === this._max[0]) {\n    this._max.shift();\n  }\n  return head;\n};\n\n/**\n * Your MaxQueue object will be instantiated and called as such:\n * var obj = new MaxQueue()\n * var param_1 = obj.max_value()\n * obj.push_back(value)\n * var param_3 = obj.pop_front()\n */\n```\n","slug":"面试题59 - II. 队列的最大值","published":1,"updated":"2023-02-17T23:46:57.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mo001a8snr6kwcdvdw","content":"<p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p>\n<span id=\"more\"></span>\n\n<p>若队列为空，pop_front 和 max_value 需要返回 -1</p>\n<p>示例 1：</p>\n<p>输入:<br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br>输出: [null,null,null,2,1,2]<br>示例 2：</p>\n<p>输入:<br>[“MaxQueue”,”pop_front”,”max_value”]<br>[[],[],[]]<br>输出: [null,-1,-1]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; push_back,pop_front,max_value的总操作数 &lt;&#x3D; 10000<br>1 &lt;&#x3D; value &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"辅助双端队列\"><a href=\"#辅助双端队列\" class=\"headerlink\" title=\"辅助双端队列\"></a>辅助双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 辅助双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data队列正常对数据进行入队出队</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._max是一个双端队列。每次_data入队元素，_max如下操作：</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.1 当_max空，如对元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。</span></span><br><span class=\"line\"><span class=\"comment\"> * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MaxQueue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">max_value</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push_back</span> = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span> &amp;&amp; value &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop_front</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head === <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MaxQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MaxQueue()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.max_value()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push_back(value)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.pop_front()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p>","more":"<p>若队列为空，pop_front 和 max_value 需要返回 -1</p>\n<p>示例 1：</p>\n<p>输入:<br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br>输出: [null,null,null,2,1,2]<br>示例 2：</p>\n<p>输入:<br>[“MaxQueue”,”pop_front”,”max_value”]<br>[[],[],[]]<br>输出: [null,-1,-1]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; push_back,pop_front,max_value的总操作数 &lt;&#x3D; 10000<br>1 &lt;&#x3D; value &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"辅助双端队列\"><a href=\"#辅助双端队列\" class=\"headerlink\" title=\"辅助双端队列\"></a>辅助双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 辅助双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data队列正常对数据进行入队出队</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._max是一个双端队列。每次_data入队元素，_max如下操作：</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.1 当_max空，如对元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。</span></span><br><span class=\"line\"><span class=\"comment\"> * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MaxQueue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">max_value</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push_back</span> = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span> &amp;&amp; value &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop_front</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head === <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MaxQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MaxQueue()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.max_value()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push_back(value)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.pop_front()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"面试题60. n个骰子的点数","date":"2020-04-15T23:33:59.000Z","_content":"\n\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n<!-- more -->\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n \n\n示例 1:\n\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n示例 2:\n\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n \n\n限制：\n\n1 <= n <= 11\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\n\n## 1.动态规划穷举\n\n```js\n/**\n * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数\n * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成\n * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 <= j <= 6\n * @param {number} n\n * @return {number[]}\n */\nvar twoSum = twoSumDp2;\nfunction twoSumDp1(n) {\n  let dp = new Array(n + 1).fill();\n  dp = dp.map(() => new Array(7).fill(0));\n  for (let i = 1; i <=  6; i++) {\n    dp[1][i] = 1;\n  }\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    if (!dp[n][i]) continue;\n    const tmp = dp[n][i] / all;\n    res.push(tmp);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[i][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          const sub = dp[i - 1][j - num] || 0;\n          dp[i][j] += sub;\n        }\n      }\n    } \n  }\n  return res;\n};\n```\n\n## 2.优化动态规划\n\n使用一个长度是2的二维数值存储dp元素，因为计算`dp[i][j]`只是依赖`dp[i - 1][j - num]`\n\n```js\nfunction twoSumDp2(n) {\n  const dp = [[0, 1, 1, 1, 1, 1, 1], []];\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    res.push(dp[0][i] / all);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[1][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          dp[1][j] += dp[0][j - num] || 0;\n        }\n      }\n      dp[0] = dp[1];\n      dp[1] = [];\n    } \n  }\n  return res;\n};\n```\n","source":"_posts/面试题60. n个骰子的点数.md","raw":"---\ntitle: 面试题60. n个骰子的点数\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n<!-- more -->\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n \n\n示例 1:\n\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n示例 2:\n\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n \n\n限制：\n\n1 <= n <= 11\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\n\n## 1.动态规划穷举\n\n```js\n/**\n * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数\n * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成\n * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 <= j <= 6\n * @param {number} n\n * @return {number[]}\n */\nvar twoSum = twoSumDp2;\nfunction twoSumDp1(n) {\n  let dp = new Array(n + 1).fill();\n  dp = dp.map(() => new Array(7).fill(0));\n  for (let i = 1; i <=  6; i++) {\n    dp[1][i] = 1;\n  }\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    if (!dp[n][i]) continue;\n    const tmp = dp[n][i] / all;\n    res.push(tmp);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[i][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          const sub = dp[i - 1][j - num] || 0;\n          dp[i][j] += sub;\n        }\n      }\n    } \n  }\n  return res;\n};\n```\n\n## 2.优化动态规划\n\n使用一个长度是2的二维数值存储dp元素，因为计算`dp[i][j]`只是依赖`dp[i - 1][j - num]`\n\n```js\nfunction twoSumDp2(n) {\n  const dp = [[0, 1, 1, 1, 1, 1, 1], []];\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    res.push(dp[0][i] / all);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[1][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          dp[1][j] += dp[0][j - num] || 0;\n        }\n      }\n      dp[0] = dp[1];\n      dp[1] = [];\n    } \n  }\n  return res;\n};\n```\n","slug":"面试题60. n个骰子的点数","published":1,"updated":"2023-02-18T00:05:08.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mp001d8snr2xud7p6z","content":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<span id=\"more\"></span>\n\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p> </p>\n<p>示例 1:</p>\n<p>输入: 1<br>输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<br>示例 2:</p>\n<p>输入: 2<br>输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 11</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\">https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof</a></p>\n<h2 id=\"1-动态规划穷举\"><a href=\"#1-动态规划穷举\" class=\"headerlink\" title=\"1.动态规划穷举\"></a>1.动态规划穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 &lt;= j &lt;= 6</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = twoSumDp2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">7</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;=  <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dp[n][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = dp[n][i] / all;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> sub = dp[i - <span class=\"number\">1</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">          dp[i][j] += sub;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-优化动态规划\"><a href=\"#2-优化动态规划\" class=\"headerlink\" title=\"2.优化动态规划\"></a>2.优化动态规划</h2><p>使用一个长度是2的二维数值存储dp元素，因为计算<code>dp[i][j]</code>只是依赖<code>dp[i - 1][j - num]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], []];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(dp[<span class=\"number\">0</span>][i] / all);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          dp[<span class=\"number\">1</span>][j] += dp[<span class=\"number\">0</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>","more":"<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p> </p>\n<p>示例 1:</p>\n<p>输入: 1<br>输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<br>示例 2:</p>\n<p>输入: 2<br>输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 11</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\">https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof</a></p>\n<h2 id=\"1-动态规划穷举\"><a href=\"#1-动态规划穷举\" class=\"headerlink\" title=\"1.动态规划穷举\"></a>1.动态规划穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 &lt;= j &lt;= 6</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = twoSumDp2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">7</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;=  <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dp[n][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = dp[n][i] / all;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> sub = dp[i - <span class=\"number\">1</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">          dp[i][j] += sub;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-优化动态规划\"><a href=\"#2-优化动态规划\" class=\"headerlink\" title=\"2.优化动态规划\"></a>2.优化动态规划</h2><p>使用一个长度是2的二维数值存储dp元素，因为计算<code>dp[i][j]</code>只是依赖<code>dp[i - 1][j - num]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], []];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(dp[<span class=\"number\">0</span>][i] / all);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          dp[<span class=\"number\">1</span>][j] += dp[<span class=\"number\">0</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题61. 扑克牌中的顺子","date":"2020-04-16T23:37:04.000Z","_content":"\n\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1,2,3,4,5]\n输出: True\n \n\n示例 2:\n\n输入: [0,0,1,2,5]\n输出: True\n \n\n限制：\n\n数组长度为 5 \n\n数组的数取值为 [0, 13] .\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\n\n## 1.找最大最小值\n\n```js\n/**\n * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 <- 序列长度\n * 2.如果存在重复，则不是顺子\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isStraight = function(nums) {\n  let min = 14\n  let max = -1;\n  const repeated = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (!nums[i]) continue; \n    min = Math.min(min, nums[i]);\n    max = Math.max(max, nums[i]);\n    if (!repeated.includes(nums[i])) {\n      repeated.push(nums[i]);\n    } else {\n      return false;\n    }\n  }\n  if (max - min + 1 > 5) return false;\n  return true;\n};\n```\n","source":"_posts/面试题61. 扑克牌中的顺子.md","raw":"---\ntitle: 面试题61. 扑克牌中的顺子\ndate: 2020-04-17 07:37:04\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1,2,3,4,5]\n输出: True\n \n\n示例 2:\n\n输入: [0,0,1,2,5]\n输出: True\n \n\n限制：\n\n数组长度为 5 \n\n数组的数取值为 [0, 13] .\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\n\n## 1.找最大最小值\n\n```js\n/**\n * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 <- 序列长度\n * 2.如果存在重复，则不是顺子\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isStraight = function(nums) {\n  let min = 14\n  let max = -1;\n  const repeated = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (!nums[i]) continue; \n    min = Math.min(min, nums[i]);\n    max = Math.max(max, nums[i]);\n    if (!repeated.includes(nums[i])) {\n      repeated.push(nums[i]);\n    } else {\n      return false;\n    }\n  }\n  if (max - min + 1 > 5) return false;\n  return true;\n};\n```\n","slug":"面试题61. 扑克牌中的顺子","published":1,"updated":"2023-02-17T23:39:43.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mq001g8snr2gkn69yv","content":"<p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [1,2,3,4,5]<br>输出: True\n </p>\n<p>示例 2:</p>\n<p>输入: [0,0,1,2,5]<br>输出: True\n </p>\n<p>限制：</p>\n<p>数组长度为 5 </p>\n<p>数组的数取值为 [0, 13] .</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof</a></p>\n<h2 id=\"1-找最大最小值\"><a href=\"#1-找最大最小值\" class=\"headerlink\" title=\"1.找最大最小值\"></a>1.找最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 &lt;- 序列长度</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果存在重复，则不是顺子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isStraight = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"number\">14</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repeated = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums[i]) <span class=\"keyword\">continue</span>; </span><br><span class=\"line\">    min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, nums[i]);</span><br><span class=\"line\">    max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!repeated.<span class=\"title function_\">includes</span>(nums[i])) &#123;</span><br><span class=\"line\">      repeated.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max - min + <span class=\"number\">1</span> &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p>","more":"<p>示例 1:</p>\n<p>输入: [1,2,3,4,5]<br>输出: True\n </p>\n<p>示例 2:</p>\n<p>输入: [0,0,1,2,5]<br>输出: True\n </p>\n<p>限制：</p>\n<p>数组长度为 5 </p>\n<p>数组的数取值为 [0, 13] .</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof</a></p>\n<h2 id=\"1-找最大最小值\"><a href=\"#1-找最大最小值\" class=\"headerlink\" title=\"1.找最大最小值\"></a>1.找最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 &lt;- 序列长度</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果存在重复，则不是顺子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isStraight = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"number\">14</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repeated = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums[i]) <span class=\"keyword\">continue</span>; </span><br><span class=\"line\">    min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, nums[i]);</span><br><span class=\"line\">    max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!repeated.<span class=\"title function_\">includes</span>(nums[i])) &#123;</span><br><span class=\"line\">      repeated.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max - min + <span class=\"number\">1</span> &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题62. 圆圈中最后剩下的数字","date":"2020-04-16T18:13:49.000Z","description":" ","_content":"\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n \n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![](2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","source":"_posts/面试题62-圆圈中最后剩下的数字.md","raw":"---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n \n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![](2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","slug":"面试题62-圆圈中最后剩下的数字","published":1,"updated":"2023-02-17T22:49:33.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mq001k8snrfyrmcdl6","content":"<p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/2020/04/17/%E9%9D%A2%E8%AF%95%E9%A2%9862-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/2020-04-16_17-00.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/2020/04/17/%E9%9D%A2%E8%AF%95%E9%A2%9862-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/2020-04-16_17-00.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"面试题67. 把字符串转换成整数","date":"2020-04-16T23:26:51.000Z","_content":"\n\n写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。\n\n<!-- more -->\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n\n说明：\n\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n示例 1:\n\n输入: \"42\"\n输出: 42\n示例 2:\n\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n示例 3:\n\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n示例 4:\n\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n示例 5:\n\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n \n\n注意：本题与主站 8 题相同：https://leetcode-cn.com/problems/string-to-integer-atoi/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\n\n## 1.正则表达式\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt1 = function(str) {\n  const matched = str.match(/^\\s*([-|+]?\\d+).*$/);\n  if (!matched) return 0; \n  let num = +matched[1];\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n  if (num > max) return max;\n  if (num < min) return min;\n\n  return num;\n};\n```\n\n## 2.线性遍历\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt2 = function(str) {\n  let sign;\n  let res = '';\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n\n  for (let i = 0; i < str.length; i++) {\n    if (sign) {\n      if ('0' <= str[i] && str[i] <= '9') {\n        res += str[i];\n      } else {\n        break;\n      }\n    } else {\n      if (str[i] === ' ') continue;\n      if ('0' <= str[i] && str[i] <= '9') {\n        sign = '+';\n        res += str[i];\n      } else if (['+', '-'].includes(str[i])) {\n        sign = str[i];\n      } else {\n        return 0;\n      }\n    }\n  }\n  res = sign === '-' ? -res : res;\n  if (res > max) return max;\n  if (res < min) return min;\n\n  return res;\n};\n```","source":"_posts/面试题67. 把字符串转换成整数.md","raw":"---\ntitle: 面试题67. 把字符串转换成整数\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。\n\n<!-- more -->\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n\n说明：\n\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n示例 1:\n\n输入: \"42\"\n输出: 42\n示例 2:\n\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n示例 3:\n\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n示例 4:\n\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n示例 5:\n\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n \n\n注意：本题与主站 8 题相同：https://leetcode-cn.com/problems/string-to-integer-atoi/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\n\n## 1.正则表达式\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt1 = function(str) {\n  const matched = str.match(/^\\s*([-|+]?\\d+).*$/);\n  if (!matched) return 0; \n  let num = +matched[1];\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n  if (num > max) return max;\n  if (num < min) return min;\n\n  return num;\n};\n```\n\n## 2.线性遍历\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt2 = function(str) {\n  let sign;\n  let res = '';\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n\n  for (let i = 0; i < str.length; i++) {\n    if (sign) {\n      if ('0' <= str[i] && str[i] <= '9') {\n        res += str[i];\n      } else {\n        break;\n      }\n    } else {\n      if (str[i] === ' ') continue;\n      if ('0' <= str[i] && str[i] <= '9') {\n        sign = '+';\n        res += str[i];\n      } else if (['+', '-'].includes(str[i])) {\n        sign = str[i];\n      } else {\n        return 0;\n      }\n    }\n  }\n  res = sign === '-' ? -res : res;\n  if (res > max) return max;\n  if (res < min) return min;\n\n  return res;\n};\n```","slug":"面试题67. 把字符串转换成整数","published":1,"updated":"2023-02-17T23:35:37.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle97h2mr001n8snrcvvl0ips","content":"<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>\n<span id=\"more\"></span>\n\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p>说明：</p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p>示例 1:</p>\n<p>输入: “42”<br>输出: 42<br>示例 2:</p>\n<p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p>\n<p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p>\n<p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p>\n<p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。\n </p>\n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\">https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof</a></p>\n<h2 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt1 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> matched = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\s*([-|+]?\\d+).*$/</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matched) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = +matched[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-线性遍历\"><a href=\"#2-线性遍历\" class=\"headerlink\" title=\"2.线性遍历\"></a>2.线性遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt2 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sign;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sign) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        sign = <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(str[i])) &#123;</span><br><span class=\"line\">        sign = str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = sign === <span class=\"string\">&#x27;-&#x27;</span> ? -res : res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>","more":"<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p>说明：</p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p>示例 1:</p>\n<p>输入: “42”<br>输出: 42<br>示例 2:</p>\n<p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p>\n<p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p>\n<p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p>\n<p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。\n </p>\n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\">https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof</a></p>\n<h2 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt1 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> matched = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\s*([-|+]?\\d+).*$/</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matched) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = +matched[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-线性遍历\"><a href=\"#2-线性遍历\" class=\"headerlink\" title=\"2.线性遍历\"></a>2.线性遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt2 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sign;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sign) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        sign = <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(str[i])) &#123;</span><br><span class=\"line\">        sign = str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = sign === <span class=\"string\">&#x27;-&#x27;</span> ? -res : res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/oauth2实践/2022-10-07-03-23-41.png","slug":"2022-10-07-03-23-41.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-08-14-35.png","slug":"2022-10-07-08-14-35.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-11-32-59.png","slug":"2022-10-07-11-32-59.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-12-05-02.png","slug":"2022-10-07-12-05-02.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-12-10-49.png","slug":"2022-10-07-12-10-49.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-14-34-57.png","slug":"2022-10-07-14-34-57.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-14-51-53.png","slug":"2022-10-07-14-51-53.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-16-00-30.png","slug":"2022-10-07-16-00-30.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-05-42-33.png","slug":"2022-10-08-05-42-33.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-13-31-55.png","slug":"2022-10-08-13-31-55.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-14-54-58.png","slug":"2022-10-08-14-54-58.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-06-17-02.png","slug":"2022-10-09-06-17-02.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-08-23.png","slug":"2022-10-09-07-08-23.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-15-45.png","slug":"2022-10-09-07-15-45.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-16-11.png","slug":"2022-10-09-07-16-11.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-12-16-09.png","slug":"2022-10-09-12-16-09.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-24-00-46-21.png","slug":"2022-10-24-00-46-21.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-24-03-52-06.png","slug":"2022-10-24-03-52-06.png","post":"cle97h2ma00068snrch31g967","modified":0,"renderable":0},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","slug":"Snipaste_2023-02-14_21-58-08.png","post":"cle97h2mb00078snre8pf9bwp","modified":0,"renderable":0},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","slug":"Snipaste_2023-02-16_13-28-44.png","post":"cle97h2mb00078snre8pf9bwp","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_1.png","slug":"160_example_1.png","post":"cle97h2mi000p8snr4pfnh5lr","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_2.png","slug":"160_example_2.png","post":"cle97h2mi000p8snr4pfnh5lr","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_3.png","slug":"160_example_3.png","post":"cle97h2mi000p8snr4pfnh5lr","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_statement.png","slug":"160_statement.png","post":"cle97h2mi000p8snr4pfnh5lr","modified":0,"renderable":0},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","slug":"2020-04-16_17-00.png","post":"cle97h2mq001k8snrfyrmcdl6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cle97h2m300018snrfufif02p","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mf000d8snr38nydu58"},{"post_id":"cle97h2mc00088snr1icp63vj","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mg000i8snrd7o7cj7y"},{"post_id":"cle97h2md000b8snr89zwhjiy","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mh000l8snre8ozgmg9"},{"post_id":"cle97h2m700038snrf3f215r7","category_id":"cle97h2mc00098snrcbxg4te4","_id":"cle97h2mj000q8snr4x9we80h"},{"post_id":"cle97h2me000c8snr9m60fxld","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mk000t8snre5bs109j"},{"post_id":"cle97h2mf000h8snrd5q4hp54","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ml000x8snr0ys4dj0j"},{"post_id":"cle97h2ma00068snrch31g967","category_id":"cle97h2mf000e8snr3vb8avq4","_id":"cle97h2mm00108snr7li7h0u1"},{"post_id":"cle97h2mg000k8snrfp8w1zoz","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mn00148snrhl1p0wta"},{"post_id":"cle97h2mi000p8snr4pfnh5lr","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mo00178snr335idymv"},{"post_id":"cle97h2mb00078snre8pf9bwp","category_id":"cle97h2mh000m8snrcjp6786h","_id":"cle97h2mp001b8snra70c2x8r"},{"post_id":"cle97h2mk000s8snr8z0t4ze3","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mp001e8snr00r91cgq"},{"post_id":"cle97h2ml000w8snr5qrd3axv","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mq001h8snr0s3w8gw0"},{"post_id":"cle97h2mm000z8snrhyju6bw2","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2mr001l8snr0tlt85gh"},{"post_id":"cle97h2mn00138snrfw282x8y","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001o8snrbw4icy0m"},{"post_id":"cle97h2mn00168snr2ecx7vjm","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001q8snr2acg5nx0"},{"post_id":"cle97h2mo001a8snr6kwcdvdw","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001s8snr77iaas7m"},{"post_id":"cle97h2mp001d8snr2xud7p6z","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001u8snrf3qe85hw"},{"post_id":"cle97h2mq001g8snr2gkn69yv","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001w8snr036cb211"},{"post_id":"cle97h2mq001k8snrfyrmcdl6","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms001y8snr7jei2xd7"},{"post_id":"cle97h2mr001n8snrcvvl0ips","category_id":"cle97h2m900048snr7e2y6iuk","_id":"cle97h2ms00208snrgvdwa7h7"}],"PostTag":[{"post_id":"cle97h2md000b8snr89zwhjiy","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mf000g8snr25d49vy2"},{"post_id":"cle97h2md000b8snr89zwhjiy","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mg000j8snr5bew42i6"},{"post_id":"cle97h2m300018snrfufif02p","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mh000o8snr181o13b3"},{"post_id":"cle97h2m300018snrfufif02p","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mj000r8snrhmwod0a9"},{"post_id":"cle97h2me000c8snr9m60fxld","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ml000v8snr3dsx69lj"},{"post_id":"cle97h2me000c8snr9m60fxld","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mm000y8snrc5hz0obx"},{"post_id":"cle97h2mf000h8snrd5q4hp54","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mn00128snresvc4gdw"},{"post_id":"cle97h2mf000h8snrd5q4hp54","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mn00158snrdzyp76q8"},{"post_id":"cle97h2mg000k8snrfp8w1zoz","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mo00188snr3ptjeky6"},{"post_id":"cle97h2mg000k8snrfp8w1zoz","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mp001c8snrd1h30wbg"},{"post_id":"cle97h2mi000p8snr4pfnh5lr","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mq001f8snr34i3b2y8"},{"post_id":"cle97h2mi000p8snr4pfnh5lr","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mq001j8snr2ssh4khn"},{"post_id":"cle97h2m700038snrf3f215r7","tag_id":"cle97h2mf000f8snrfctt9fhq","_id":"cle97h2mr001m8snrcmtr5g3g"},{"post_id":"cle97h2m700038snrf3f215r7","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms001p8snr81ai0pyw"},{"post_id":"cle97h2mk000s8snr8z0t4ze3","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms001r8snr6obm13pz"},{"post_id":"cle97h2mk000s8snr8z0t4ze3","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms001t8snrgxi1acrf"},{"post_id":"cle97h2ml000w8snr5qrd3axv","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms001v8snrcqmwe9hd"},{"post_id":"cle97h2ml000w8snr5qrd3axv","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms001x8snr597zc1tw"},{"post_id":"cle97h2mm000z8snrhyju6bw2","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms001z8snrb9abbhdy"},{"post_id":"cle97h2mm000z8snrhyju6bw2","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms00218snrhf769wb6"},{"post_id":"cle97h2mn00138snrfw282x8y","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms00228snrgj8s6f6q"},{"post_id":"cle97h2mn00138snrfw282x8y","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms00238snr4cin7es2"},{"post_id":"cle97h2ma00068snrch31g967","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms00248snrfldk2vfa"},{"post_id":"cle97h2ma00068snrch31g967","tag_id":"cle97h2mm00118snrfke03lp1","_id":"cle97h2ms00258snrbflug0d3"},{"post_id":"cle97h2mn00168snr2ecx7vjm","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms00268snr6zwq5xug"},{"post_id":"cle97h2mn00168snr2ecx7vjm","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms00278snr6ruu9ktx"},{"post_id":"cle97h2mo001a8snr6kwcdvdw","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2ms00288snr2vgedxhy"},{"post_id":"cle97h2mo001a8snr6kwcdvdw","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2ms00298snr67m50pt6"},{"post_id":"cle97h2mp001d8snr2xud7p6z","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mt002a8snrcawhhejk"},{"post_id":"cle97h2mp001d8snr2xud7p6z","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mt002b8snrcg4f2978"},{"post_id":"cle97h2mb00078snre8pf9bwp","tag_id":"cle97h2mo00198snr3tik7eyk","_id":"cle97h2mt002c8snrajuubw3h"},{"post_id":"cle97h2mq001g8snr2gkn69yv","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mt002d8snr98rk1fml"},{"post_id":"cle97h2mq001g8snr2gkn69yv","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mt002e8snret14hcep"},{"post_id":"cle97h2mq001k8snrfyrmcdl6","tag_id":"cle97h2mq001i8snrcmd397be","_id":"cle97h2mt002f8snr5he86j8f"},{"post_id":"cle97h2mc00088snr1icp63vj","tag_id":"cle97h2mq001i8snrcmd397be","_id":"cle97h2mt002g8snr6exj68l4"},{"post_id":"cle97h2mr001n8snrcvvl0ips","tag_id":"cle97h2ma00058snr0y6j0kwz","_id":"cle97h2mt002h8snrfv7v2g22"},{"post_id":"cle97h2mr001n8snrcvvl0ips","tag_id":"cle97h2md000a8snrg7c9a6ct","_id":"cle97h2mt002i8snr3dty1oig"}],"Tag":[{"name":"算法题","_id":"cle97h2ma00058snr0y6j0kwz"},{"name":"旧文迁移","_id":"cle97h2md000a8snrg7c9a6ct"},{"name":"Rust","_id":"cle97h2mf000f8snrfctt9fhq"},{"name":"oauth2","_id":"cle97h2mm00118snrfke03lp1"},{"name":"hexo","_id":"cle97h2mo00198snr3tik7eyk"},{"name":"LCOF","_id":"cle97h2mq001i8snrcmd397be"}]}}