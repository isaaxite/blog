{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/面试题46-把数字翻译成字符串.md","hash":"804d16829dc811dfaf91df03ef80f3e452fd4569","modified":1676441340103},{"_id":"source/_posts/hexo：从0开始与踩坑实录.md","hash":"ae41d81757612bf47c03183c8fdba43e4f32b1ff","modified":1676524597402},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字.md","hash":"dee968ff9513a0846ce7ce5ebcfe55cca7589192","modified":1676441340104},{"_id":"source/_posts/Rust学习.md","hash":"72ff328ece03d27fd98a1b0424dc9411cb32f933","modified":1676441340103},{"_id":"source/tags/index.md","hash":"e9ddd4225c4ba625b2f968fa66d9dcb9db4ce717","modified":1676441340104},{"_id":"source/categories/index.md","hash":"3c437d96dbabdb3ff9bbc4620e6ed8bc99ef0a4b","modified":1676441340104},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","hash":"5df7db65a5cb90909a924f0516166079d8d6bc34","modified":1676441340103},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1676441340105},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1676441340109},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1676441340104},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1676441340105},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1676441340109},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1676441340109},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1676441340109},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1676441340110},{"_id":"themes/next/_config.yml","hash":"95258693953cde88c635dd0ff0d9d50007e5dbae","modified":1676525040749},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1676441340131},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1676441340105},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1676441340105},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1676441340107},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1676441340115},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1676441340107},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1676441340107},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1676441340110},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1676441340107},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1676441340107},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1676441340108},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1676441340108},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1676441340108},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1676441340108},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1676441340111},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1676441340111},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1676441340111},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1676441340111},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1676441340111},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1676441340112},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1676441340112},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1676441340112},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1676441340112},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1676441340115},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1676441340115},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1676441340115},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1676441340115},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1676441340115},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1676441340116},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1676441340116},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1676441340116},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1676441340116},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1676441340116},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1676441340116},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1676441340116},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1676441340117},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1676441340117},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1676441340117},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1676441340117},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1676441340117},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1676441340117},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1676441340117},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1676441340118},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1676441340118},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1676441340118},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1676441340130},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1676441340118},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1676441340134},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1676441340130},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1676441340130},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1676441340131},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1676441340131},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1676441340131},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1676441340106},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1676441340106},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1676441340106},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1676441340112},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1676441340106},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1676441340113},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1676441340113},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1676441340113},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1676441340113},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1676441340114},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1676441340114},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1676441340113},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1676441340114},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1676441340114},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1676441340114},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1676441340118},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1676441340115},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1676441340114},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1676441340118},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1676441340118},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1676441340119},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1676441340120},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1676441340122},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1676441340120},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1676441340119},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1676441340123},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1676441340123},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1676441340123},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1676441340125},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1676441340126},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1676441340131},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1676441340125},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1676441340128},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1676441340128},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1676441340127},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1676441340133},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1676441340133},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1676441340133},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1676441340134},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1676441340133},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1676441340134},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1676441340134},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1676441340134},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1676441340134},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1676441340135},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1676441340135},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1676441340135},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1676441340135},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1676441340135},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1676441340136},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1676441340135},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1676441340136},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1676441340136},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1676441340136},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1676441340136},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1676441340152},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1676441340149},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1676441340152},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1676441340153},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1676441340153},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1676441340153},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1676441340153},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1676441340153},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1676441340153},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1676441340154},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1676441340154},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1676441340154},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1676441340154},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1676441340154},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1676441340154},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1676441340155},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1676441340155},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1676441340154},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1676441340155},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1676441340155},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1676441340156},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1676441340156},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1676441340119},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1676441340119},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1676441340119},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1676441340119},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1676441340119},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1676441340120},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1676441340120},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1676441340120},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1676441340120},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1676441340120},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1676441340121},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1676441340121},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1676441340121},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1676441340121},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1676441340121},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1676441340121},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1676441340122},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1676441340123},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1676441340122},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1676441340124},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1676441340124},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1676441340124},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1676441340125},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1676441340124},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1676441340125},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1676441340125},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1676441340125},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1676441340126},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1676441340126},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1676441340127},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1676441340127},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1676441340127},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1676441340127},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1676441340127},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1676441340127},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1676441340128},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1676441340128},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1676441340128},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1676441340128},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1676441340129},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1676441340129},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1676441340129},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1676441340129},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1676441340130},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1676441340129},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1676441340131},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1676441340132},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1676441340130},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1676441340130},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1676441340130},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1676441340132},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1676441340132},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1676441340132},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1676441340132},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1676441340133},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1676441340133},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1676441340133},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1676441340132},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1676441340133},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1676441340152},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1676441340152},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1676441340152},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1676441340152},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1676441340152},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1676441340156},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1676441340155},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1676441340137},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1676441340137},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1676441340137},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1676441340159},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1676441340160},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1676441340140},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1676441340143},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1676441340143},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1676441340145},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1676441340145},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1676441340145},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1676441340147},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1676441340148},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1676441340149},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1676441340149},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1676441340149},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1676441340149},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1676441340150},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1676441340151},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1676441340151},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1676441340151},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1676441340151},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1676441340151},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1676441340151},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1676441340138},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1676441340138},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1676441340157},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1676441340138},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1676441340158},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1676441340139},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1676441340140},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1676441340140},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1676441340140},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1676441340137},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1676441340138},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1676441340140},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1676441340137},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1676441340138},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1676441340138},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1676441340141},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1676441340141},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1676441340141},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1676441340141},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1676441340141},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1676441340142},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1676441340142},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1676441340142},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1676441340142},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1676441340143},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1676441340143},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1676441340142},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1676441340143},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1676441340143},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1676441340144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1676441340144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1676441340144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1676441340144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1676441340144},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1676441340145},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1676441340145},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1676441340145},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1676441340145},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1676441340146},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1676441340147},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1676441340147},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1676441340148},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1676441340148},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1676441340148},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1676441340148},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1676441340148},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1676441340158},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1676441340159}],"Category":[{"name":"Rust","_id":"cle6nqsx80004ranna3x9e68v"},{"name":"hexo","_id":"cle6nqsxc0008ranngr8igmnn"},{"name":"算法题","_id":"cle6nqsxd000brannh6u1bl9d"}],"Data":[],"Page":[{"title":"categories","date":"2023-02-14T08:56:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n","updated":"2023-02-15T06:09:00.104Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cle6nqswy0000rann6b150glh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-02-14T09:18:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-14 17:18:56\ntype: \"tags\"\n---\n","updated":"2023-02-15T06:09:00.104Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cle6nqsx50002rannbnu2fpo7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Rust学习","date":"2023-02-14T16:56:17.000Z","_content":"\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","source":"_posts/Rust学习.md","raw":"---\ntitle: Rust学习\ndate: 2023-02-15 00:56:17\ntags:\n- Rust\n- 旧文迁移\n\ncategories:\n- Rust\n---\n\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","slug":"Rust学习","published":1,"updated":"2023-02-15T06:09:00.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6nqsx20001rann3er2anr9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>\n<span id=\"more\"></span>\n\n<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>","more":"<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />"},{"title":"hexo：从0开始与踩坑实录","date":"2021-03-16T06:46:49.000Z","description":" ","_content":"\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","source":"_posts/hexo：从0开始与踩坑实录.md","raw":"---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: \" \"\n---\n\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","slug":"hexo：从0开始与踩坑实录","published":1,"updated":"2023-02-16T05:16:37.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6nqsx60003rann0u4kdp2p","content":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h1><h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件\"><a href=\"#评论插件\" class=\"headerlink\" title=\"评论插件\"></a>评论插件</h1><h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n"},{"title":"面试题46. 把数字翻译成字符串","date":"2020-04-16T18:13:49.000Z","description":" ","_content":"\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","source":"_posts/面试题46-把数字翻译成字符串.md","raw":"---\ntitle: 面试题46. 把数字翻译成字符串\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n \n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","slug":"面试题46-把数字翻译成字符串","published":1,"updated":"2023-02-15T06:09:00.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6nqsxa0006rann04i0c2ws","content":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"面试题62. 圆圈中最后剩下的数字","date":"2020-04-16T18:13:49.000Z","description":" ","_content":"\n\n# 面试题62. 圆圈中最后剩下的数字\n\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n \n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![2020-04-16_17-00](yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","source":"_posts/面试题62-圆圈中最后剩下的数字.md","raw":"---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n\n\n# 面试题62. 圆圈中最后剩下的数字\n\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n \n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![2020-04-16_17-00](yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","slug":"面试题62-圆圈中最后剩下的数字","published":1,"updated":"2023-02-15T06:09:00.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle6nqsxb0007rann7mx10qup","content":"<h1 id=\"面试题62-圆圈中最后剩下的数字\"><a href=\"#面试题62-圆圈中最后剩下的数字\" class=\"headerlink\" title=\"面试题62. 圆圈中最后剩下的数字\"></a>面试题62. 圆圈中最后剩下的数字</h1><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png\" alt=\"2020-04-16_17-00\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面试题62-圆圈中最后剩下的数字\"><a href=\"#面试题62-圆圈中最后剩下的数字\" class=\"headerlink\" title=\"面试题62. 圆圈中最后剩下的数字\"></a>面试题62. 圆圈中最后剩下的数字</h1><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png\" alt=\"2020-04-16_17-00\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","post":"cle6nqsx60003rann0u4kdp2p","slug":"Snipaste_2023-02-14_21-58-08.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cle6nqsx20001rann3er2anr9","category_id":"cle6nqsx80004ranna3x9e68v","_id":"cle6nqsxd000arann8nmkg5jw"},{"post_id":"cle6nqsx60003rann0u4kdp2p","category_id":"cle6nqsxc0008ranngr8igmnn","_id":"cle6nqsxf000frann8jy46huf"},{"post_id":"cle6nqsxa0006rann04i0c2ws","category_id":"cle6nqsxd000brannh6u1bl9d","_id":"cle6nqsxg000jrann2ys1hmka"},{"post_id":"cle6nqsxb0007rann7mx10qup","category_id":"cle6nqsxd000brannh6u1bl9d","_id":"cle6nqsxh000mrann1t1w2m8h"}],"PostTag":[{"post_id":"cle6nqsx20001rann3er2anr9","tag_id":"cle6nqsxa0005rann8qqs493v","_id":"cle6nqsxe000drannhy9x3dil"},{"post_id":"cle6nqsx20001rann3er2anr9","tag_id":"cle6nqsxd0009rannc0oo3f49","_id":"cle6nqsxe000erannc17q0p8d"},{"post_id":"cle6nqsx60003rann0u4kdp2p","tag_id":"cle6nqsxe000crannexerhy2t","_id":"cle6nqsxg000irann7ivk8m3x"},{"post_id":"cle6nqsxa0006rann04i0c2ws","tag_id":"cle6nqsxf000hrann7fuqcx74","_id":"cle6nqsxh000lrann3rs58rct"},{"post_id":"cle6nqsxb0007rann7mx10qup","tag_id":"cle6nqsxf000hrann7fuqcx74","_id":"cle6nqsxh000nrannedr244h9"}],"Tag":[{"name":"Rust","_id":"cle6nqsxa0005rann8qqs493v"},{"name":"旧文迁移","_id":"cle6nqsxd0009rannc0oo3f49"},{"name":"hexo","_id":"cle6nqsxe000crannexerhy2t"},{"name":"LCOF","_id":"cle6nqsxf000hrann7fuqcx74"}]}}