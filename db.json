{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat_qrcode.png","path":"images/wechat_qrcode.png","modified":0,"renderable":0},{"_id":"source/images/wechat_qrcode.jpg","path":"images/wechat_qrcode.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"e8e5364929517e7cd431c68a4175320d30399a05","modified":1676573905399},{"_id":"source/images/avatar.jpg","hash":"ca49e5cfc0d31651c3a2b8d0148204ecdbd0b133","modified":1676669688958},{"_id":"source/_posts/$set和$del和方法的实现原理.md","hash":"d41c34fc4c73e94d638c77952c1abd243ce7d95f","modified":1676681058777},{"_id":"source/_posts/46. 全排列.md","hash":"abba05c24759c927d334834aae9ea45e6ab95519","modified":1676678779355},{"_id":"source/_posts/Rust学习.md","hash":"b969c71f267bb75076d9b810b6c320a02e99ebd6","modified":1676573905373},{"_id":"source/_posts/filter的实现原理.md","hash":"1b76b89329bef8a830e2294a2f74959506ae5a53","modified":1676681293678},{"_id":"source/_posts/hexo：从0开始与踩坑实录.md","hash":"13d8827f80e70a3353944e726bb4b661b0551096","modified":1676573905373},{"_id":"source/_posts/oauth2实践.md","hash":"fb98732497c507ad91082794c1720f61d5f3f45c","modified":1676675434625},{"_id":"source/_posts/nextTick实现原理.md","hash":"0ced0b2f096461fa4d74e1fce99bdb453bda6882","modified":1676681463757},{"_id":"source/_posts/v-for的原理分析.md","hash":"de4bbc2a2d70592ad32a4af4186dffd5cd83fdf0","modified":1676681550606},{"_id":"source/_posts/vnode的内部实现.md","hash":"33f71a3126c2140e10f2c7e70dd3d62896c3ff26","modified":1676681939790},{"_id":"source/_posts/vue中的diff算法实现.md","hash":"50074ac32cc805c100449018eb62c8d9b86fa329","modified":1676682164218},{"_id":"source/_posts/多角度剖析计算属性的运行机制.md","hash":"226a4ef9b5144053d28972aaab2c73155a851c1c","modified":1676682321715},{"_id":"source/_posts/面试题19-正则表达式匹配.md","hash":"ac3f6729e8a075c5b4abdc42f3088763afdeb629","modified":1676679698824},{"_id":"source/_posts/面试题29-顺时针打印矩阵.md","hash":"3aa6cdfdeed132b51503cce01be3181e6bdedc8b","modified":1676679525873},{"_id":"source/_posts/面试题31-栈的压入、弹出序列.md","hash":"76f9db873d8720bd901945e97dc78607dc66f9ed","modified":1676679658533},{"_id":"source/_posts/面试题26-树的子结构.md","hash":"5aa4ec43ee10404b92ab9801789d3970ec25d83c","modified":1676679273839},{"_id":"source/_posts/面试题30. 包含min函数的栈.md","hash":"4a2d7b7dcd69efbefcfe260c6ff14815bb1929ec","modified":1676676993074},{"_id":"source/_posts/面试题37-序列化二叉树.md","hash":"dc26bff98479f393ee5bc7b1580e6abfee4741f4","modified":1676679576292},{"_id":"source/_posts/面试题38-字符串的排列.md","hash":"4102333bfbfd3e796a08bf17da023cfaeff0c94e","modified":1676679750450},{"_id":"source/_posts/面试题39-数组中出现次数超过一半的数字.md","hash":"a6d504cce989a0616640cacd074856b12b7590c2","modified":1676679376478},{"_id":"source/_posts/面试题41-数据流中的中位数.md","hash":"1652994797f91087f98bc7d3c2cb3c60efc7c980","modified":1676679326084},{"_id":"source/_posts/面试题46-把数字翻译成字符串.md","hash":"691f1382eb2cf936342b191b46111d9a27cb178c","modified":1676679905575},{"_id":"source/_posts/面试题47. 礼物的最大价值.md","hash":"f534b34f182002c159b1a7b94ada13b0ff6fa193","modified":1676677879774},{"_id":"source/_posts/面试题50. 第一个只出现一次的字符.md","hash":"961f69f4b20bdafae0cf4b00bae780e45586ab67","modified":1676677409706},{"_id":"source/_posts/面试题49. 丑数.md","hash":"b0f1d939b0ea663fd6367638e5730eeae840c261","modified":1676677264146},{"_id":"source/_posts/面试题48-最长不含重复字符的子字符串.md","hash":"b0b2c23dcd194c5a60c637b71709a44a6fd641fb","modified":1676679809648},{"_id":"source/_posts/面试题51-数组中的逆序对.md","hash":"7cdc7bf37fcb72500e82678668dcf7ec44267721","modified":1676679426425},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点.md","hash":"1ad14715e884df6b61f4547860dff41f12a0ddde","modified":1676678414816},{"_id":"source/_posts/面试题53 - II. 0～n-1中缺失的数字.md","hash":"0e3bdb07f602fbcce5cecd8066ef04b1101d4d17","modified":1676678968363},{"_id":"source/_posts/面试题56-II-数组中数字出现的次数-II.md","hash":"37e2d06bbc76282fe5e21a536088cfaa24a6f00d","modified":1676679478640},{"_id":"source/_posts/面试题55 - II. 平衡二叉树.md","hash":"1b66daaab654664737bf42de061d3ee780edd248","modified":1676678840412},{"_id":"source/_posts/面试题57 - II. 和为s的连续正数序列.md","hash":"24ffeba9fc7fb9a798eee2c0bfdd2b7baef4ed3b","modified":1676677752548},{"_id":"source/_posts/面试题58 - I. 翻转单词顺序.md","hash":"05dcf6076f66bbc2a4981616c4fc3de5a79258dc","modified":1676677682980},{"_id":"source/_posts/面试题58-II-左旋转字符串.md","hash":"2a60d27ebd2b3c10e8ceccbf1b1483f2811e51e3","modified":1676679846328},{"_id":"source/_posts/面试题59 - I. 滑动窗口的最大值.md","hash":"d554bd1336888d83031f0330e535b9dedc6e259d","modified":1676678330445},{"_id":"source/_posts/面试题59 - II. 队列的最大值.md","hash":"96f2f8fb8a4d4ea2ad32f15efb59c9646e875549","modified":1676677617440},{"_id":"source/_posts/面试题60. n个骰子的点数.md","hash":"42ef6238c63a964edcea79c0cb2841eb761d5eba","modified":1676678708643},{"_id":"source/_posts/面试题61. 扑克牌中的顺子.md","hash":"dddf180e09414b39665d3bd2d96eaf901da92b9a","modified":1676677183112},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字.md","hash":"175099a997810db8d94ece71ebe75a584ca4d627","modified":1676680046216},{"_id":"source/_posts/面试题67. 把字符串转换成整数.md","hash":"8513c9413606eeb2dab88058a3789fb5f6be378f","modified":1676676937603},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","hash":"5df7db65a5cb90909a924f0516166079d8d6bc34","modified":1676573905375},{"_id":"source/tags/index.md","hash":"e7cf6395863ce64f3cf8bf08d736f49b39d823ab","modified":1676573905401},{"_id":"source/_posts/oauth2实践/2022-10-07-08-14-35.png","hash":"3b85b200ccf5424c8c62577884cdc98e4028b034","modified":1676675167896},{"_id":"source/_posts/oauth2实践/2022-10-08-05-42-33.png","hash":"0aaddbc77f8c241fb7138b42c6acc434b2ad93db","modified":1676675167905},{"_id":"source/_posts/oauth2实践/2022-10-09-07-16-11.png","hash":"f7d45b19a044dcc5f77979d445916d9bb7364061","modified":1676675167915},{"_id":"source/_posts/oauth2实践/2022-10-24-03-52-06.png","hash":"dd51b021fae7595b373bb26ea58c55a9ebda02a9","modified":1676675167919},{"_id":"source/_posts/vue中的diff算法实现/add-in-after.png","hash":"0ed7e1c6586ccf68a68d94f5e7b60a3ab14fd25c","modified":1576001123948},{"_id":"source/_posts/vue中的diff算法实现/add-in-before.png","hash":"ce3a7fc5d7e378cf2b7fd5e3d636181e0ca54b86","modified":1576001171252},{"_id":"source/_posts/vue中的diff算法实现/add-in-middle.png","hash":"4efc3ba9631d50a5550017037171c5ab9376b2ac","modified":1576001198243},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-02.png","hash":"f0cb9bca10bd25d5e17212244351c4eae7f0ede1","modified":1576384033304},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-03.png","hash":"037658a8a8b42a864fee56029ebbd737e6277fc1","modified":1576384033305},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-04.png","hash":"5c589b00fcc266da3e2e5229b506e7344606bfa0","modified":1576384033306},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-05.png","hash":"b969f12db6f6ddbca3b2040b18a4d8f14c140ef7","modified":1575921778276},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children.png","hash":"46316849c8230efe0bdb366291c7b660b2a676d3","modified":1575921778276},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode.png","hash":"14abafcbdcf0621a84a48cbb1f2440c676032c72","modified":1575921778277},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-01.png","hash":"212cfb0e1e2b92cf0361482d277bb5ab8811bd55","modified":1576384033303},{"_id":"source/_posts/vue中的diff算法实现/attrs.png","hash":"f6ae3405eb786fdda3887ca23e1efc366e2a07e7","modified":1574439066494},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_1.png","hash":"caed517185571d6152535de107b811339dd4120e","modified":1676675167874},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1676675167877},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_3.png","hash":"f23312984e4e54e4b72d2b328da7666936d7715f","modified":1676675167876},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","hash":"cdeef9460fd0f29ed5a5bd011c8a0dddfa8436e5","modified":1676674157760},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_2.png","hash":"d36a34dfb0f680f6595927ea906b6709f6ed6137","modified":1676675167875},{"_id":"source/images/wechat_qrcode.jpg","hash":"b951c872f7fa231629d71a6f63e78f49d51db6fb","modified":1676670941049},{"_id":"source/images/wechatpay.jpg","hash":"fb99901b7dd6b048d15630ad758503fb5be335d9","modified":1676673175866},{"_id":"source/_posts/vue中的diff算法实现/998023-20180519212357826-1474719173.png","hash":"74832100aaea04dabe7f0b282aa47b3e95ec0ba5","modified":1575921778229},{"_id":"source/_posts/oauth2实践/2022-10-07-12-05-02.png","hash":"960802d618574d41a103b4a24c1371bd853aa401","modified":1676675167899},{"_id":"source/_posts/oauth2实践/2022-10-07-14-34-57.png","hash":"73228e817c684995c1026830e0b9e3c32b1af8bb","modified":1676675167902},{"_id":"source/_posts/oauth2实践/2022-10-07-14-51-53.png","hash":"ae4074ae944137af88d5a950c4bbc0510c105366","modified":1676675167903},{"_id":"source/_posts/vue中的diff算法实现/element.jpg","hash":"780ff338ddc5711e43822543d53f926584ed7927","modified":1574439066495},{"_id":"source/_posts/oauth2实践/2022-10-09-06-17-02.png","hash":"2d279ae769dc04ceb432d2c177414075283e5c82","modified":1676675167912},{"_id":"source/_posts/oauth2实践/2022-10-09-07-08-23.png","hash":"1b6738a023da8e2c53099547927399190ce0ecad","modified":1676675167913},{"_id":"source/_posts/oauth2实践/2022-10-09-07-15-45.png","hash":"e457300dab9052a3af7de80ccce6b05fbeec1b15","modified":1676675167914},{"_id":"source/_posts/oauth2实践/2022-10-09-12-16-09.png","hash":"aa57bc29fd6d5ad3f73d9d6d5860939088edaf0e","modified":1676675167916},{"_id":"source/_posts/vue中的diff算法实现/ast.jpg","hash":"9194179e92649b20a907eed5fee306c50d1ccb7c","modified":1574439066494},{"_id":"source/images/alipay.jpg","hash":"0738cbd11a0d3b8319f1d7c78adddc96bf6e5789","modified":1676673147441},{"_id":"source/_posts/oauth2实践/2022-10-07-03-23-41.png","hash":"8dabc5e9c129b278f9f55c9776b4dbece7dcb2b5","modified":1676675167895},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","hash":"c739e75d121aca4cbf9a4e74b767249c81d84a25","modified":1676573905394},{"_id":"source/_posts/oauth2实践/2022-10-07-12-10-49.png","hash":"b81451ff07907e0a055ba1cad2bfa25830d99d76","modified":1676675167900},{"_id":"source/_posts/oauth2实践/2022-10-07-16-00-30.png","hash":"71d06949252f91fd0209085035c36f66fb1971a9","modified":1676675167905},{"_id":"source/_posts/oauth2实践/2022-10-07-11-32-59.png","hash":"4619a0e7e2091307f07c2b0eaabb44828433acba","modified":1676675167898},{"_id":"source/_posts/oauth2实践/2022-10-24-00-46-21.png","hash":"228a5e7adcb79034ed63c1fb8a07d8b643bff3c5","modified":1676675167918},{"_id":"source/_posts/oauth2实践/2022-10-08-13-31-55.png","hash":"34c9c4c3c341b1c30fe03ab3d08af3bb8b35e727","modified":1676675167908},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1675225243000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1675225243000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1675225243000},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1675225243000},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1675225243000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1675225243000},{"_id":"themes/next/_config.yml","hash":"06870170b52d540e86f3b11e27f4b70b113851c7","modified":1676680602322},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1675225243000},{"_id":"themes/next/_vendors.yml","hash":"48ae2854826d6ad46cca5a5fdfcc13f09870c8b2","modified":1675225243000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1675225243000},{"_id":"themes/next/package.json","hash":"3b8084a2e1cb83ca6bbb1066599ead017c4202f3","modified":1675225243000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1675225243000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1675225243000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1675225243000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1675225243000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1675225243000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1675225243000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1675225243000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1675225243000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1675225243000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1675225243000},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1675225243000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1675225243000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1675225243000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1675225243000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1675225243000},{"_id":"themes/next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1675225243000},{"_id":"themes/next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1675225243000},{"_id":"themes/next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1675225243000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1675225243000},{"_id":"themes/next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1675225243000},{"_id":"themes/next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1675225243000},{"_id":"themes/next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1675225243000},{"_id":"themes/next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1675225243000},{"_id":"themes/next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1675225243000},{"_id":"themes/next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1675225243000},{"_id":"themes/next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1675225243000},{"_id":"themes/next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1675225243000},{"_id":"themes/next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1675225243000},{"_id":"themes/next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1675225243000},{"_id":"themes/next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1675225243000},{"_id":"themes/next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1675225243000},{"_id":"themes/next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1675225243000},{"_id":"themes/next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1675225243000},{"_id":"themes/next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1675225243000},{"_id":"themes/next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1675225243000},{"_id":"themes/next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1675225243000},{"_id":"themes/next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1675225243000},{"_id":"themes/next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1675225243000},{"_id":"themes/next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1675225243000},{"_id":"themes/next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1675225243000},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1675225243000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1675225243000},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1675225243000},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1675225243000},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1675225243000},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1675225243000},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1675225243000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1675225243000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1675225243000},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"8da13d7c325addb6b7c1d9ac3683dafd43e3709a","modified":1675225243000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1675225243000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1675225243000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1675225243000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"f1bf7f86c11419b63323bd21e388e6bdaf24d27d","modified":1675225243000},{"_id":"themes/next/.github/workflows/pr-reminder.yml","hash":"3ab3e8d9dc0e1d9bd54f44fba476792fb1ee190d","modified":1675225243000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1675225243000},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1675225243000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1675225243000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1675225243000},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1675225243000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1675225243000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1675225243000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1675225243000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1675225243000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1675225243000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1675225243000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1675225243000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1675225243000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1675225243000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1675225243000},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1675225243000},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1675225243000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1675225243000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1675225243000},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1675225243000},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1675225243000},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1675225243000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1675225243000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1675225243000},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1675225243000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1675225243000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1675225243000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1675225243000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1675225243000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1675225243000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1675225243000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1675225243000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1675225243000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1675225243000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1675225243000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1675225243000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1675225243000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1675225243000},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1675225243000},{"_id":"themes/next/source/css/_mixins.styl","hash":"04a07a4dbeb00683d783eff26c44492c35b924e0","modified":1675225243000},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1675225243000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1675225243000},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1675225243000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1675225243000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1675225243000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1675225243000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1675225243000},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1675225243000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1675225243000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1675225243000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1675225243000},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1675225243000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1675225243000},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1675225243000},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1675225243000},{"_id":"themes/next/source/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1675225243000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1675225243000},{"_id":"themes/next/source/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1675225243000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1675225243000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1675225243000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1675225243000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1675225243000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1675225243000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1675225243000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1675225243000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1675225243000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1675225243000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1675225243000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1675225243000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1675225243000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1675225243000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1675225243000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1675225243000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1675225243000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1675225243000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1675225243000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1675225243000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1675225243000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1675225243000},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1675225243000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1675225243000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1675225243000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1675225243000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1675225243000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1675225243000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1675225243000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1675225243000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1675225243000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1675225243000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1675225243000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1675225243000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9845209c54174a42cbff5b5efd5e2e2fb7e60589","modified":1675225243000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1675225243000},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1675225243000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"cef9c5f9524fd01b59b0a89e51904b42cbdedc8c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1675225243000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1675225243000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1675225243000},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1675225243000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1675225243000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1675225243000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1675225243000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1675225243000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1675225243000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1675225243000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1675225243000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1675225243000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1675225243000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1675225243000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"0c79462439b1361034a03590cd69a8abb3a678a6","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1675225243000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f3506fd0c0303ea365de1c7774d98a1a3f3027cf","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1675225243000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1675225243000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1675225243000},{"_id":"source/_posts/oauth2实践/2022-10-08-14-54-58.png","hash":"e43f591016e0b7d89eb72d80f13db8f93d9b51bb","modified":1676675167910},{"_id":"source/images/wechat_qrcode.png","hash":"39a9d13496251800b07f63b98c8298ee08cd9d1f","modified":1676670622902},{"_id":"public/atom.xml","hash":"35093a210e859156e811b6e6c32f5031bcf89e30","modified":1676682332412},{"_id":"public/search.xml","hash":"200fd7af1aa538d14cda9e596fb0d661e2f3caa0","modified":1676682332412},{"_id":"public/categories/index.html","hash":"92a08aa9286d6ee239d3ff80425577bfd57f8ccc","modified":1676682332412},{"_id":"public/tags/index.html","hash":"35bf19b1d3e1fe2a0dabf3105b6ca7647dea904b","modified":1676682332412},{"_id":"public/2023/02/18/多角度剖析计算属性的运行机制/index.html","hash":"0f68ff910d2ea3c6ebafc8a695fc97af99628482","modified":1676682332412},{"_id":"public/archives/2019/index.html","hash":"fdac62a60faf68469041eab15f51489a0c3ae39b","modified":1676682332412},{"_id":"public/archives/2019/11/index.html","hash":"0b4e30e2f306ab3d85d6d2da428b6987b9f909a3","modified":1676682332412},{"_id":"public/archives/2019/12/index.html","hash":"e6f7d0142903e1f160d960ee6685da6088456b4d","modified":1676682332412},{"_id":"public/archives/2021/index.html","hash":"449c3f5f19d626eb3e20a5c5b069eaa59c3d3963","modified":1676682332412},{"_id":"public/archives/2021/03/index.html","hash":"3a286a0744e6af4590651c6dd060b62fb03e4f83","modified":1676682332412},{"_id":"public/archives/2022/index.html","hash":"f098b148462240a882c99fed47e3238585254bd3","modified":1676682332412},{"_id":"public/archives/2022/10/index.html","hash":"19ae8d24374d9838b1d449915ca090de44ae5873","modified":1676682332412},{"_id":"public/archives/2023/index.html","hash":"500e40b328ac77c3be70ff6e0bbc5f4cc6fd720e","modified":1676682332412},{"_id":"public/archives/2023/02/index.html","hash":"a2de82c519060ce57fc541bd2177015bab6836e1","modified":1676682332412},{"_id":"public/categories/源码分析/index.html","hash":"5b946bb22ce11897fd48eb382e790f66eb778995","modified":1676682332412},{"_id":"public/categories/Rust/index.html","hash":"40d356c4345b9d9c7d77251f7b80ee8c5f966878","modified":1676682332412},{"_id":"public/categories/源码分析/vue/index.html","hash":"42455f6c2da6d8fa17966072acc16f6a736961e9","modified":1676682332412},{"_id":"public/categories/hexo/index.html","hash":"c3d2f06f52c2515066629edccd79a72d7d825dbf","modified":1676682332412},{"_id":"public/categories/安全/index.html","hash":"555bdcaedb5acf54a8173f195c2fcede56627be8","modified":1676682332412},{"_id":"public/tags/vue/index.html","hash":"426ec8656a43528c427473fe09eaf991c45d3720","modified":1676682332412},{"_id":"public/tags/vue源码分析/index.html","hash":"ec0f3a1ab8a80042630cfbe1ac153f3fb8e9a245","modified":1676682332412},{"_id":"public/tags/Rust/index.html","hash":"f980022186d583af2c64a617229afc998d8a9358","modified":1676682332412},{"_id":"public/tags/hexo/index.html","hash":"c328a6cc15c62e6de0bffd9b5c555c1fbacf26a4","modified":1676682332412},{"_id":"public/tags/oauth2/index.html","hash":"02f4083f84b3e94d8a078633dc74883a5dc8d228","modified":1676682332412},{"_id":"public/tags/LCOF/index.html","hash":"1cf0e4731f61da2e4e08291d3c41bb3afa9dc0a0","modified":1676682332412},{"_id":"public/2023/02/15/Rust学习/index.html","hash":"4a809aeb8384a44f43d265ae392ab027f1fac498","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/index.html","hash":"bb5f7172c02babf497019dd5cca5ba021b74992c","modified":1676682332412},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/index.html","hash":"3823f994af618ba085b31bfc0ece405193626e36","modified":1676682332412},{"_id":"public/2020/04/17/面试题61. 扑克牌中的顺子/index.html","hash":"b9300485c7b76f18207d9a08e45188cb6c339a5b","modified":1676682332412},{"_id":"public/2020/04/17/46. 全排列/index.html","hash":"934870486f5fbe3fe575bf036cf12b028d85ff58","modified":1676682332412},{"_id":"public/2020/04/17/面试题47. 礼物的最大价值/index.html","hash":"89b8c3bf58f79790e8d9e440fc938be0a97d1035","modified":1676682332412},{"_id":"public/2020/04/17/面试题19-正则表达式匹配/index.html","hash":"e1c2194d3a8bf1d5c25c76e3113279d2fd0d86cd","modified":1676682332412},{"_id":"public/2020/04/17/面试题29-顺时针打印矩阵/index.html","hash":"ca3fd405d238553f0b612cc59acacad87883c219","modified":1676682332412},{"_id":"public/2020/04/17/面试题31-栈的压入、弹出序列/index.html","hash":"1a41e732e12639286adec36b32d72017e97cbaaa","modified":1676682332412},{"_id":"public/2020/04/17/面试题37-序列化二叉树/index.html","hash":"c14f860ef7d76f454f985ad1da91d1b96606c641","modified":1676682332412},{"_id":"public/2020/04/17/面试题38-字符串的排列/index.html","hash":"5f67a85715d488e35c8744544a1440a3a5ca72d4","modified":1676682332412},{"_id":"public/2020/04/17/面试题39-数组中出现次数超过一半的数字/index.html","hash":"f9449987ae31aa656a9c2f14a06684f7f6b4850b","modified":1676682332412},{"_id":"public/2020/04/17/面试题41-数据流中的中位数/index.html","hash":"6613874cee8e0e45fd2df7fdd9f4b32b616dfad7","modified":1676682332412},{"_id":"public/2020/04/17/面试题48-最长不含重复字符的子字符串/index.html","hash":"b992741786f3411fb5746b98ab129e8500e044b8","modified":1676682332412},{"_id":"public/2020/04/17/面试题49. 丑数/index.html","hash":"3d9e8182a0666a231a49d796155a88838e5a56f7","modified":1676682332412},{"_id":"public/2020/04/17/面试题51-数组中的逆序对/index.html","hash":"25f34a8924a764e5d4b44abed75fdd143a01ab2c","modified":1676682332412},{"_id":"public/2020/04/17/面试题56-II-数组中数字出现的次数-II/index.html","hash":"ec4f4c3e287f5e55a8da9181728352529aeb8f65","modified":1676682332412},{"_id":"public/2020/04/17/面试题58-II-左旋转字符串/index.html","hash":"ef01bbc9ae69f40123d999dffc9ed47dfb1a0dae","modified":1676682332412},{"_id":"public/2020/04/17/面试题59 - II. 队列的最大值/index.html","hash":"f35a30dd5691f9af6a37c6521c69c4643949d1ae","modified":1676682332412},{"_id":"public/2020/04/17/面试题62-圆圈中最后剩下的数字/index.html","hash":"4e58f9b311474917fdd244eae1edce6105dd845e","modified":1676682332412},{"_id":"public/2020/04/17/面试题67. 把字符串转换成整数/index.html","hash":"c8098952481587b4ab261f975e0fdbefc171f559","modified":1676682332412},{"_id":"public/2020/04/17/面试题46-把数字翻译成字符串/index.html","hash":"e1da6b0b9da0562e3e1396b259e9e0ac81963ac4","modified":1676682332412},{"_id":"public/2020/04/16/面试题26-树的子结构/index.html","hash":"37624611c95e787042f892203c925f464f45fe9d","modified":1676682332412},{"_id":"public/2020/04/16/面试题30. 包含min函数的栈/index.html","hash":"7ddad327ef2931f0b269dc2ad12d9fe9baa05eb5","modified":1676682332412},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/index.html","hash":"0788b438c82d0f78b90e62f4d02c9cd19f793a63","modified":1676682332412},{"_id":"public/2020/04/16/面试题53 - II. 0～n-1中缺失的数字/index.html","hash":"c643ed844221641fc0b8e6e7fd6027fabbcbfc46","modified":1676682332412},{"_id":"public/2020/04/16/面试题55 - II. 平衡二叉树/index.html","hash":"281ae6e9ad787cf6e02455e0620f5c9a5341520d","modified":1676682332412},{"_id":"public/2020/04/16/面试题57 - II. 和为s的连续正数序列/index.html","hash":"88806517ff3d8ba1063819459169a860568288ab","modified":1676682332412},{"_id":"public/2020/04/16/面试题58 - I. 翻转单词顺序/index.html","hash":"01243dd6c9209837ae1985080a92ad949f344b62","modified":1676682332412},{"_id":"public/2020/04/16/面试题59 - I. 滑动窗口的最大值/index.html","hash":"20e77fdea1bec03679bb4edfd920484a61032a2c","modified":1676682332412},{"_id":"public/2020/04/16/面试题60. n个骰子的点数/index.html","hash":"d19be13ffe68bf2e933dc95d3a95e6a5f0439b09","modified":1676682332412},{"_id":"public/2020/04/16/面试题50. 第一个只出现一次的字符/index.html","hash":"ec69bd96596b624b301cab41fe2404926783f415","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/index.html","hash":"c6a9e5eb069eb08e063aa0b816af0a88a260cd6a","modified":1676682332412},{"_id":"public/2019/12/14/filter的实现原理/index.html","hash":"55a63e9acb9e4da42831d51421378e88b9fa223f","modified":1676682332412},{"_id":"public/2019/11/21/vnode的内部实现/index.html","hash":"54d966fd11499ff9b2e2f3edb15f987d14a45a1e","modified":1676682332412},{"_id":"public/2019/11/20/nextTick实现原理/index.html","hash":"28cdbf009bd5c5622bf39f74165ed642ae95ebaf","modified":1676682332412},{"_id":"public/2019/11/19/v-for的原理分析/index.html","hash":"062913092fac9ee57224c8498548386982ae6e38","modified":1676682332412},{"_id":"public/2019/11/09/$set和$del和方法的实现原理/index.html","hash":"1e98d4422d73b9d639dcdf4698a8fbbca24ead62","modified":1676682332412},{"_id":"public/archives/index.html","hash":"4c4cbf05e9e89723d9acd74d1c3bc7863eed4005","modified":1676682332412},{"_id":"public/archives/page/2/index.html","hash":"b28e0ea25c2dacf5449251586308e9e9f734509c","modified":1676682332412},{"_id":"public/archives/page/3/index.html","hash":"74ef5bbbf9fd9b9f8f522afd04b76637c2cf70ad","modified":1676682332412},{"_id":"public/archives/page/4/index.html","hash":"353a0773002f7e36f63f65ce2403182a8ab6fb42","modified":1676682332412},{"_id":"public/archives/2020/index.html","hash":"204c95d1f4f22b48c6fc3c3edd30642887129446","modified":1676682332412},{"_id":"public/archives/2020/page/2/index.html","hash":"0e669f2c3d5fb2355e83e7d5ac4b4fdc3c590068","modified":1676682332412},{"_id":"public/archives/2020/page/3/index.html","hash":"b9844b32bb41f5c82dba9feac3b87d907d29590d","modified":1676682332412},{"_id":"public/archives/2020/04/index.html","hash":"dddb3908396b90cf4948768533e0fa2f21598dcf","modified":1676682332412},{"_id":"public/archives/2020/04/page/2/index.html","hash":"00dd3f3903c6fac1ae25ec9fdefdf19757592ee0","modified":1676682332412},{"_id":"public/archives/2020/04/page/3/index.html","hash":"3852ced3004dfc1d8a58540de1c8384263c85861","modified":1676682332412},{"_id":"public/categories/算法题/index.html","hash":"fb6136a5ef5110422f58041a1eccc0926000e23b","modified":1676682332412},{"_id":"public/categories/算法题/page/2/index.html","hash":"5b7ef8d362bfe599bc4c9c3b139abd4d82c8e935","modified":1676682332412},{"_id":"public/categories/算法题/page/3/index.html","hash":"33a0d61490cadf1db5f1c1a9011c90608f772578","modified":1676682332412},{"_id":"public/tags/算法题/index.html","hash":"4d6574085f18f1c954f748adbe28b4b83a7d0cb6","modified":1676682332412},{"_id":"public/tags/算法题/page/2/index.html","hash":"58a24afbd715116985fff00c351e4108e61f2780","modified":1676682332412},{"_id":"public/tags/算法题/page/3/index.html","hash":"9e2993f8f81a16b5eeebec840bc38e8f7a709cda","modified":1676682332412},{"_id":"public/tags/旧文迁移/index.html","hash":"1b8db485af239a831fba12572739b7f4f6df527c","modified":1676682332412},{"_id":"public/tags/旧文迁移/page/2/index.html","hash":"80dd4ba82cb12a4b8f008668bfc2d26722f909b9","modified":1676682332412},{"_id":"public/tags/旧文迁移/page/3/index.html","hash":"7bd526d2d4ccd931c25bc8058b7a6d7366ed28ca","modified":1676682332412},{"_id":"public/index.html","hash":"93dd3e9fadb74daaeaf2e13c5a39a20dda1e2d85","modified":1676682332412},{"_id":"public/page/2/index.html","hash":"b58f4c1842ae391dfb222374698da608a15bfa67","modified":1676682332412},{"_id":"public/page/3/index.html","hash":"cc5a186823d74307709c935f2c738df905366aed","modified":1676682332412},{"_id":"public/page/4/index.html","hash":"fec98f0edb84006495090f69c6b4218f0e22754a","modified":1676682332412},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1676682332412},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1676682332412},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1676682332412},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1676682332412},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1676682332412},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1676682332412},{"_id":"public/images/avatar.jpg","hash":"ca49e5cfc0d31651c3a2b8d0148204ecdbd0b133","modified":1676682332412},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","hash":"5df7db65a5cb90909a924f0516166079d8d6bc34","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-08-14-35.png","hash":"3b85b200ccf5424c8c62577884cdc98e4028b034","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-05-42-33.png","hash":"0aaddbc77f8c241fb7138b42c6acc434b2ad93db","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-16-11.png","hash":"f7d45b19a044dcc5f77979d445916d9bb7364061","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-24-03-52-06.png","hash":"dd51b021fae7595b373bb26ea58c55a9ebda02a9","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/998023-20180519212357826-1474719173.png","hash":"74832100aaea04dabe7f0b282aa47b3e95ec0ba5","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/add-in-after.png","hash":"0ed7e1c6586ccf68a68d94f5e7b60a3ab14fd25c","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/add-in-before.png","hash":"ce3a7fc5d7e378cf2b7fd5e3d636181e0ca54b86","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/add-in-middle.png","hash":"4efc3ba9631d50a5550017037171c5ab9376b2ac","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/attrs.png","hash":"f6ae3405eb786fdda3887ca23e1efc366e2a07e7","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children-02.png","hash":"f0cb9bca10bd25d5e17212244351c4eae7f0ede1","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children-01.png","hash":"212cfb0e1e2b92cf0361482d277bb5ab8811bd55","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children-03.png","hash":"037658a8a8b42a864fee56029ebbd737e6277fc1","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children-04.png","hash":"5c589b00fcc266da3e2e5229b506e7344606bfa0","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children-05.png","hash":"b969f12db6f6ddbca3b2040b18a4d8f14c140ef7","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode-children.png","hash":"46316849c8230efe0bdb366291c7b660b2a676d3","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/diff-vnode.png","hash":"14abafcbdcf0621a84a48cbb1f2440c676032c72","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/element.jpg","hash":"780ff338ddc5711e43822543d53f926584ed7927","modified":1676682332412},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_1.png","hash":"caed517185571d6152535de107b811339dd4120e","modified":1676682332412},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_3.png","hash":"f23312984e4e54e4b72d2b328da7666936d7715f","modified":1676682332412},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_statement.png","hash":"5ee1d1929b12ea5393a165b755798982ce93b852","modified":1676682332412},{"_id":"public/2020/04/16/面试题52. 两个链表的第一个公共节点/160_example_2.png","hash":"d36a34dfb0f680f6595927ea906b6709f6ed6137","modified":1676682332412},{"_id":"public/2020/04/17/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","hash":"cdeef9460fd0f29ed5a5bd011c8a0dddfa8436e5","modified":1676682332412},{"_id":"public/images/wechat_qrcode.jpg","hash":"b951c872f7fa231629d71a6f63e78f49d51db6fb","modified":1676682332412},{"_id":"public/images/wechatpay.jpg","hash":"fb99901b7dd6b048d15630ad758503fb5be335d9","modified":1676682332412},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1676682332412},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1676682332412},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1676682332412},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1676682332412},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1676682332412},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1676682332412},{"_id":"public/js/pjax.js","hash":"90fb7f346f777434ea68ab4e4be1d7b999ad63ac","modified":1676682332412},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1676682332412},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1676682332412},{"_id":"public/js/schemes/muse.js","hash":"0c490e9ba82efbb8bdf8465e6b537fafd51e1ed7","modified":1676682332412},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1676682332412},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1676682332412},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1676682332412},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1676682332412},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1676682332412},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1676682332412},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1676682332412},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1676682332412},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1676682332412},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1676682332412},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1676682332412},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1676682332412},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1676682332412},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1676682332412},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1676682332412},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1676682332412},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1676682332412},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1676682332412},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1676682332412},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1676682332412},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1676682332412},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1676682332412},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1676682332412},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1676682332412},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1676682332412},{"_id":"public/css/main.css","hash":"6eebf06ec9bc6fa95008982874045eac7ec3465f","modified":1676682332412},{"_id":"public/js/utils.js","hash":"af59257e46d25dda62967c35a65e2efcbd90d3bc","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-12-05-02.png","hash":"960802d618574d41a103b4a24c1371bd853aa401","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-14-34-57.png","hash":"73228e817c684995c1026830e0b9e3c32b1af8bb","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-06-17-02.png","hash":"2d279ae769dc04ceb432d2c177414075283e5c82","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-14-51-53.png","hash":"ae4074ae944137af88d5a950c4bbc0510c105366","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-15-45.png","hash":"e457300dab9052a3af7de80ccce6b05fbeec1b15","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-12-16-09.png","hash":"aa57bc29fd6d5ad3f73d9d6d5860939088edaf0e","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-09-07-08-23.png","hash":"1b6738a023da8e2c53099547927399190ce0ecad","modified":1676682332412},{"_id":"public/2019/12/26/vue中的diff算法实现/ast.jpg","hash":"9194179e92649b20a907eed5fee306c50d1ccb7c","modified":1676682332412},{"_id":"public/images/alipay.jpg","hash":"0738cbd11a0d3b8319f1d7c78adddc96bf6e5789","modified":1676682332412},{"_id":"public/2021/03/16/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","hash":"c739e75d121aca4cbf9a4e74b767249c81d84a25","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-03-23-41.png","hash":"8dabc5e9c129b278f9f55c9776b4dbece7dcb2b5","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-11-32-59.png","hash":"4619a0e7e2091307f07c2b0eaabb44828433acba","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-12-10-49.png","hash":"b81451ff07907e0a055ba1cad2bfa25830d99d76","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-07-16-00-30.png","hash":"71d06949252f91fd0209085035c36f66fb1971a9","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-24-00-46-21.png","hash":"228a5e7adcb79034ed63c1fb8a07d8b643bff3c5","modified":1676682332412},{"_id":"public/images/wechat_qrcode.png","hash":"39a9d13496251800b07f63b98c8298ee08cd9d1f","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-14-54-58.png","hash":"e43f591016e0b7d89eb72d80f13db8f93d9b51bb","modified":1676682332412},{"_id":"public/2022/10/18/oauth2实践/2022-10-08-13-31-55.png","hash":"34c9c4c3c341b1c30fe03ab3d08af3bb8b35e727","modified":1676682332412}],"Category":[{"name":"源码分析","_id":"cle99dccb00045onr0tagcd1r"},{"name":"算法题","_id":"cle99dcch00095onr1xlq0l33"},{"name":"Rust","_id":"cle99dccl000d5onr80u59g23"},{"name":"vue","parent":"cle99dccb00045onr0tagcd1r","_id":"cle99dcco000k5onrg1cs0hm3"},{"name":"hexo","_id":"cle99dccv000z5onrb9zt8rau"},{"name":"安全","_id":"cle99dcd1001g5onrhuoz25dy"}],"Data":[],"Page":[{"title":"categories","date":"2023-02-14T08:56:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n","updated":"2023-02-16T18:58:25.399Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cle99dcc500005onrczjm4rx9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2023-02-14T09:18:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-14 17:18:56\ntype: \"tags\"\n---\n","updated":"2023-02-16T18:58:25.401Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cle99dcc900025onr1agi77qs","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"$set和$del和方法的实现原理","date":"2019-11-09T00:41:47.000Z","_content":"\n\n# 大纲\n\n- [前言](#前言)\n- [nextTick的实现逻辑](#nextTick的实现逻辑)\n- [timerFunc是什么？](#timerFunc是什么？)\n- [timerFunc的实现](#timerFunc的实现)\n\n<!-- more -->\n\n# 前言\n\n- vue版本：`2.6.9`；\n- path：`vue/src/core/util/next-tick.js`；\n\n&nbsp;\n\n# nextTick的实现逻辑\n\n```typescript\nconst callbacks = []\nlet pending = false\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n进入nextTick，首先会点cb进行封装，涉及三个控制流！\n\n1. 如果存在cb，则调用cb函数：`cb.call(ctx)`；\n2. 如果`_resolve`存在，则调用 `_resolve(ctx)`，`_resolve`是`Promise.resolve`的引用！这是在当前环境支持`Promise`；\n3. 不做任何处理。\n\n在将`cb`推入`callbacks`后，判断当前是不是正在执行上次`callbacks`的回调函数，根据pending（待定）来判断，当前是否要执行新的`callbacks`的cb！\n\n\n\n先假设当前`pending = fakse`，那么进入`if (!pending)`，执行`timerFunc()`！\n\n&nbsp;\n\n# timerFunc是什么？\n\n`timerFunc`，是一个可将当前`callbacks`作为一个回调函数（这个包裹的函数就是下面的`flushCallbacks`），入队微/宏任务队列中，等待主线程代码执行完毕之后执行！\n\n```typescript\nfunction flushCallbacks () {\n  // 立刻执行 “pending = false” 意味着，在主线程代码执行完，\n  // 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始\n  // 就可以进入 \"if (!pending)\" 控制流再次执行触发 “timerFunc()”，\n  // 将新的“flushCallbacks” 放进微/宏任务队列\n  // 而不是等到 上一次 “callbacks” 的所有cb执行完之后\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n\n\n`timerFunc`根据当前环境的支持情况可能用`Promise`、`MutationObserver`、`setImmediate`、`setTimeout`实现！优先级：`Promise` > `MutationObserver` > `setImmediate` > `setTimeout`。\n\n- 微任务（micro task）：Promise、MutationObserver；\n- 宏任务（macro task）：setImmediate、setTimeout。\n\n任务调用优先级：微任务 > 宏任务。\n\n\n\n关于为什么这样的优先级，vue做了说明：\n\n> Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).\n>\n> 这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。\n\n&nbsp;\n\n\n# timerFunc的实现\n\n```typescript\nlet timerFunc\n```\n\n\n\n### Promise实现timerFunc\n\n```typescript\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    // 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，\n    // 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，\n    // 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### MutationObserver实现timerFunc\n\n```typescript\nelse if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  // 在本地Promise不可用的地方使用MutationObserver，\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // （＃6466 MutationObserver在IE11中不可靠）\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### setImmediate实现timerFunc\n\n```typescript\nelse if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  // 退回到setImmediate。\n  // 从技术上讲，它利用（宏）任务队列，\n  // 但它仍然是比setTimeout更好的选择。\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n}\n```\n\n\n\n### setTimeout实现timerFunc\n\n```typescript\nelse {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n","source":"_posts/$set和$del和方法的实现原理.md","raw":"---\ntitle: $set和$del和方法的实现原理\ndate: 2019-11-09 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\n---\n\n\n# 大纲\n\n- [前言](#前言)\n- [nextTick的实现逻辑](#nextTick的实现逻辑)\n- [timerFunc是什么？](#timerFunc是什么？)\n- [timerFunc的实现](#timerFunc的实现)\n\n<!-- more -->\n\n# 前言\n\n- vue版本：`2.6.9`；\n- path：`vue/src/core/util/next-tick.js`；\n\n&nbsp;\n\n# nextTick的实现逻辑\n\n```typescript\nconst callbacks = []\nlet pending = false\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n进入nextTick，首先会点cb进行封装，涉及三个控制流！\n\n1. 如果存在cb，则调用cb函数：`cb.call(ctx)`；\n2. 如果`_resolve`存在，则调用 `_resolve(ctx)`，`_resolve`是`Promise.resolve`的引用！这是在当前环境支持`Promise`；\n3. 不做任何处理。\n\n在将`cb`推入`callbacks`后，判断当前是不是正在执行上次`callbacks`的回调函数，根据pending（待定）来判断，当前是否要执行新的`callbacks`的cb！\n\n\n\n先假设当前`pending = fakse`，那么进入`if (!pending)`，执行`timerFunc()`！\n\n&nbsp;\n\n# timerFunc是什么？\n\n`timerFunc`，是一个可将当前`callbacks`作为一个回调函数（这个包裹的函数就是下面的`flushCallbacks`），入队微/宏任务队列中，等待主线程代码执行完毕之后执行！\n\n```typescript\nfunction flushCallbacks () {\n  // 立刻执行 “pending = false” 意味着，在主线程代码执行完，\n  // 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始\n  // 就可以进入 \"if (!pending)\" 控制流再次执行触发 “timerFunc()”，\n  // 将新的“flushCallbacks” 放进微/宏任务队列\n  // 而不是等到 上一次 “callbacks” 的所有cb执行完之后\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n\n\n`timerFunc`根据当前环境的支持情况可能用`Promise`、`MutationObserver`、`setImmediate`、`setTimeout`实现！优先级：`Promise` > `MutationObserver` > `setImmediate` > `setTimeout`。\n\n- 微任务（micro task）：Promise、MutationObserver；\n- 宏任务（macro task）：setImmediate、setTimeout。\n\n任务调用优先级：微任务 > 宏任务。\n\n\n\n关于为什么这样的优先级，vue做了说明：\n\n> Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).\n>\n> 这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。\n\n&nbsp;\n\n\n# timerFunc的实现\n\n```typescript\nlet timerFunc\n```\n\n\n\n### Promise实现timerFunc\n\n```typescript\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    // 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，\n    // 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，\n    // 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### MutationObserver实现timerFunc\n\n```typescript\nelse if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  // 在本地Promise不可用的地方使用MutationObserver，\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // （＃6466 MutationObserver在IE11中不可靠）\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### setImmediate实现timerFunc\n\n```typescript\nelse if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  // 退回到setImmediate。\n  // 从技术上讲，它利用（宏）任务队列，\n  // 但它仍然是比setTimeout更好的选择。\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n}\n```\n\n\n\n### setTimeout实现timerFunc\n\n```typescript\nelse {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n","slug":"$set和$del和方法的实现原理","published":1,"updated":"2023-02-18T00:44:18.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcc600015onrh624dlj0","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#nextTick%E7%9A%84%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">nextTick的实现逻辑</a></li>\n<li><a href=\"#timerFunc%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">timerFunc是什么？</a></li>\n<li><a href=\"#timerFunc%E7%9A%84%E5%AE%9E%E7%8E%B0\">timerFunc的实现</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>vue版本：<code>2.6.9</code>；</li>\n<li>path：<code>vue/src/core/util/next-tick.js</code>；</li>\n</ul>\n<p>&amp;nbsp;</p>\n<h1 id=\"nextTick的实现逻辑\"><a href=\"#nextTick的实现逻辑\" class=\"headerlink\" title=\"nextTick的实现逻辑\"></a>nextTick的实现逻辑</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入nextTick，首先会点cb进行封装，涉及三个控制流！</p>\n<ol>\n<li>如果存在cb，则调用cb函数：<code>cb.call(ctx)</code>；</li>\n<li>如果<code>_resolve</code>存在，则调用 <code>_resolve(ctx)</code>，<code>_resolve</code>是<code>Promise.resolve</code>的引用！这是在当前环境支持<code>Promise</code>；</li>\n<li>不做任何处理。</li>\n</ol>\n<p>在将<code>cb</code>推入<code>callbacks</code>后，判断当前是不是正在执行上次<code>callbacks</code>的回调函数，根据pending（待定）来判断，当前是否要执行新的<code>callbacks</code>的cb！</p>\n<p>先假设当前<code>pending = fakse</code>，那么进入<code>if (!pending)</code>，执行<code>timerFunc()</code>！</p>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc是什么？\"><a href=\"#timerFunc是什么？\" class=\"headerlink\" title=\"timerFunc是什么？\"></a>timerFunc是什么？</h1><p><code>timerFunc</code>，是一个可将当前<code>callbacks</code>作为一个回调函数（这个包裹的函数就是下面的<code>flushCallbacks</code>），入队微&#x2F;宏任务队列中，等待主线程代码执行完毕之后执行！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 立刻执行 “pending = false” 意味着，在主线程代码执行完，</span></span><br><span class=\"line\">  <span class=\"comment\">// 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 就可以进入 &quot;if (!pending)&quot; 控制流再次执行触发 “timerFunc()”，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将新的“flushCallbacks” 放进微/宏任务队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 而不是等到 上一次 “callbacks” 的所有cb执行完之后</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>timerFunc</code>根据当前环境的支持情况可能用<code>Promise</code>、<code>MutationObserver</code>、<code>setImmediate</code>、<code>setTimeout</code>实现！优先级：<code>Promise</code> &gt; <code>MutationObserver</code> &gt; <code>setImmediate</code> &gt; <code>setTimeout</code>。</p>\n<ul>\n<li>微任务（micro task）：Promise、MutationObserver；</li>\n<li>宏任务（macro task）：setImmediate、setTimeout。</li>\n</ul>\n<p>任务调用优先级：微任务 &gt; 宏任务。</p>\n<p>关于为什么这样的优先级，vue做了说明：</p>\n<blockquote>\n<p>Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).</p>\n<p>这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。</p>\n</blockquote>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc的实现\"><a href=\"#timerFunc的实现\" class=\"headerlink\" title=\"timerFunc的实现\"></a>timerFunc的实现</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise实现timerFunc\"><a href=\"#Promise实现timerFunc\" class=\"headerlink\" title=\"Promise实现timerFunc\"></a>Promise实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MutationObserver实现timerFunc\"><a href=\"#MutationObserver实现timerFunc\" class=\"headerlink\" title=\"MutationObserver实现timerFunc\"></a>MutationObserver实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本地Promise不可用的地方使用MutationObserver，</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// （＃6466 MutationObserver在IE11中不可靠）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter))</span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setImmediate实现timerFunc\"><a href=\"#setImmediate实现timerFunc\" class=\"headerlink\" title=\"setImmediate实现timerFunc\"></a>setImmediate实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  <span class=\"comment\">// 退回到setImmediate。</span></span><br><span class=\"line\">  <span class=\"comment\">// 从技术上讲，它利用（宏）任务队列，</span></span><br><span class=\"line\">  <span class=\"comment\">// 但它仍然是比setTimeout更好的选择。</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setTimeout实现timerFunc\"><a href=\"#setTimeout实现timerFunc\" class=\"headerlink\" title=\"setTimeout实现timerFunc\"></a>setTimeout实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#nextTick%E7%9A%84%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">nextTick的实现逻辑</a></li>\n<li><a href=\"#timerFunc%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">timerFunc是什么？</a></li>\n<li><a href=\"#timerFunc%E7%9A%84%E5%AE%9E%E7%8E%B0\">timerFunc的实现</a></li>\n</ul>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>vue版本：<code>2.6.9</code>；</li>\n<li>path：<code>vue/src/core/util/next-tick.js</code>；</li>\n</ul>\n<p>&amp;nbsp;</p>\n<h1 id=\"nextTick的实现逻辑\"><a href=\"#nextTick的实现逻辑\" class=\"headerlink\" title=\"nextTick的实现逻辑\"></a>nextTick的实现逻辑</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入nextTick，首先会点cb进行封装，涉及三个控制流！</p>\n<ol>\n<li>如果存在cb，则调用cb函数：<code>cb.call(ctx)</code>；</li>\n<li>如果<code>_resolve</code>存在，则调用 <code>_resolve(ctx)</code>，<code>_resolve</code>是<code>Promise.resolve</code>的引用！这是在当前环境支持<code>Promise</code>；</li>\n<li>不做任何处理。</li>\n</ol>\n<p>在将<code>cb</code>推入<code>callbacks</code>后，判断当前是不是正在执行上次<code>callbacks</code>的回调函数，根据pending（待定）来判断，当前是否要执行新的<code>callbacks</code>的cb！</p>\n<p>先假设当前<code>pending = fakse</code>，那么进入<code>if (!pending)</code>，执行<code>timerFunc()</code>！</p>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc是什么？\"><a href=\"#timerFunc是什么？\" class=\"headerlink\" title=\"timerFunc是什么？\"></a>timerFunc是什么？</h1><p><code>timerFunc</code>，是一个可将当前<code>callbacks</code>作为一个回调函数（这个包裹的函数就是下面的<code>flushCallbacks</code>），入队微&#x2F;宏任务队列中，等待主线程代码执行完毕之后执行！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 立刻执行 “pending = false” 意味着，在主线程代码执行完，</span></span><br><span class=\"line\">  <span class=\"comment\">// 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 就可以进入 &quot;if (!pending)&quot; 控制流再次执行触发 “timerFunc()”，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将新的“flushCallbacks” 放进微/宏任务队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 而不是等到 上一次 “callbacks” 的所有cb执行完之后</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>timerFunc</code>根据当前环境的支持情况可能用<code>Promise</code>、<code>MutationObserver</code>、<code>setImmediate</code>、<code>setTimeout</code>实现！优先级：<code>Promise</code> &gt; <code>MutationObserver</code> &gt; <code>setImmediate</code> &gt; <code>setTimeout</code>。</p>\n<ul>\n<li>微任务（micro task）：Promise、MutationObserver；</li>\n<li>宏任务（macro task）：setImmediate、setTimeout。</li>\n</ul>\n<p>任务调用优先级：微任务 &gt; 宏任务。</p>\n<p>关于为什么这样的优先级，vue做了说明：</p>\n<blockquote>\n<p>Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).</p>\n<p>这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。</p>\n</blockquote>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc的实现\"><a href=\"#timerFunc的实现\" class=\"headerlink\" title=\"timerFunc的实现\"></a>timerFunc的实现</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise实现timerFunc\"><a href=\"#Promise实现timerFunc\" class=\"headerlink\" title=\"Promise实现timerFunc\"></a>Promise实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MutationObserver实现timerFunc\"><a href=\"#MutationObserver实现timerFunc\" class=\"headerlink\" title=\"MutationObserver实现timerFunc\"></a>MutationObserver实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本地Promise不可用的地方使用MutationObserver，</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// （＃6466 MutationObserver在IE11中不可靠）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter))</span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setImmediate实现timerFunc\"><a href=\"#setImmediate实现timerFunc\" class=\"headerlink\" title=\"setImmediate实现timerFunc\"></a>setImmediate实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  <span class=\"comment\">// 退回到setImmediate。</span></span><br><span class=\"line\">  <span class=\"comment\">// 从技术上讲，它利用（宏）任务队列，</span></span><br><span class=\"line\">  <span class=\"comment\">// 但它仍然是比setTimeout更好的选择。</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setTimeout实现timerFunc\"><a href=\"#setTimeout实现timerFunc\" class=\"headerlink\" title=\"setTimeout实现timerFunc\"></a>setTimeout实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"46. 全排列","date":"2020-04-16T23:33:59.000Z","_content":"\n给定一个 没有重复 数字的序列，返回其所有可能的全排列。\n\n<!-- more -->\n\n示例:\n\n输入: [1,2,3]\n输出:\n```\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/permutations\n\n## 1.深度优先（比较隐含的回溯）\n\n由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute1 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, []);\n\n  function dfs(nums, visited) {\n    if (nums.length === 1) {\n      visited.push(nums[0]);\n      res.push(visited);\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      dfs([...nums.slice(0, i), ...nums.slice(i + 1)], [nums[i], ...visited]);\n    }\n  }\n  return res;\n};\n```\n\n## 2.显式的回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute2 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, [], {}, res);\n\n  function dfs(nums, path, visited, res) {\n    if (path.length === nums.length) {\n      res.push(path.slice());\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      if (!visited[i]) {\n        visited[i] = true;\n        path.push(nums[i]);\n        dfs(nums, path, visited, res);\n        visited[i] = false;\n        path.pop();\n      }\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/46. 全排列.md","raw":"---\ntitle: 46. 全排列\ndate: 2020-04-17 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n给定一个 没有重复 数字的序列，返回其所有可能的全排列。\n\n<!-- more -->\n\n示例:\n\n输入: [1,2,3]\n输出:\n```\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/permutations\n\n## 1.深度优先（比较隐含的回溯）\n\n由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute1 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, []);\n\n  function dfs(nums, visited) {\n    if (nums.length === 1) {\n      visited.push(nums[0]);\n      res.push(visited);\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      dfs([...nums.slice(0, i), ...nums.slice(i + 1)], [nums[i], ...visited]);\n    }\n  }\n  return res;\n};\n```\n\n## 2.显式的回溯\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar permute2 = function(nums) {\n  // [left, right]\n  const res = [];\n  dfs(nums, [], {}, res);\n\n  function dfs(nums, path, visited, res) {\n    if (path.length === nums.length) {\n      res.push(path.slice());\n      return;\n    }\n    for (let i = 0; i < nums.length; i++) {\n      if (!visited[i]) {\n        visited[i] = true;\n        path.push(nums[i]);\n        dfs(nums, path, visited, res);\n        visited[i] = false;\n        path.pop();\n      }\n    }\n  }\n  return res;\n};\n```\n","slug":"46. 全排列","published":1,"updated":"2023-02-18T00:06:19.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcca00035onr5d149l4a","content":"<p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/permutations\">https://leetcode-cn.com/problems/permutations</a></p>\n<h2 id=\"1-深度优先（比较隐含的回溯）\"><a href=\"#1-深度优先（比较隐含的回溯）\" class=\"headerlink\" title=\"1.深度优先（比较隐含的回溯）\"></a>1.深度优先（比较隐含的回溯）</h2><p>由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, visited</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(visited);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>([...nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i), ...nums.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)], [nums[i], ...visited]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-显式的回溯\"><a href=\"#2-显式的回溯\" class=\"headerlink\" title=\"2.显式的回溯\"></a>2.显式的回溯</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, [], &#123;&#125;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, path, visited, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">length</span> === nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(path.<span class=\"title function_\">slice</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">        <span class=\"title function_\">dfs</span>(nums, path, visited, res);</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</p>","more":"<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,2,3],</span><br><span class=\"line\">  [1,3,2],</span><br><span class=\"line\">  [2,1,3],</span><br><span class=\"line\">  [2,3,1],</span><br><span class=\"line\">  [3,1,2],</span><br><span class=\"line\">  [3,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/permutations\">https://leetcode-cn.com/problems/permutations</a></p>\n<h2 id=\"1-深度优先（比较隐含的回溯）\"><a href=\"#1-深度优先（比较隐含的回溯）\" class=\"headerlink\" title=\"1.深度优先（比较隐含的回溯）\"></a>1.深度优先（比较隐含的回溯）</h2><p>由于传入下一层调用栈的参数都是新值，不会影响当前栈所以不用显式地回溯</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, visited</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      visited.<span class=\"title function_\">push</span>(nums[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(visited);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>([...nums.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i), ...nums.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)], [nums[i], ...visited]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-显式的回溯\"><a href=\"#2-显式的回溯\" class=\"headerlink\" title=\"2.显式的回溯\"></a>2.显式的回溯</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permute2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(nums, [], &#123;&#125;, res);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">nums, path, visited, res</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">length</span> === nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(path.<span class=\"title function_\">slice</span>());</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">        <span class=\"title function_\">dfs</span>(nums, path, visited, res);</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        path.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Rust学习","date":"2023-02-14T16:56:17.000Z","_content":"\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","source":"_posts/Rust学习.md","raw":"---\ntitle: Rust学习\ndate: 2023-02-15 00:56:17\ntags:\n- Rust\n- 旧文迁移\n\ncategories:\n- Rust\n---\n\n# 前言\n\nRust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。\n\n<!-- more -->\n\nRust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。\n\nRust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。\n\nRust是内存安全、没有GC(垃圾回收)的高效语言。\n\n-------------------\n\n\n# 安装\n\n```shell\n[root@f8ac270c7b6b workspace]# curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh\n```\n安装成功！\n```\ninfo: default toolchain set to 'stable-x86_64-unknown-linux-gnu'                 \n                                                                                 \n  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)\n                                                                                 \n                                                                                 \nRust is installed now. Great!                                                    \n                                                                                 \nTo get started you may need to restart your current shell.                       \nThis would reload your PATH environment variable to include                      \nCargo's bin directory ($HOME/.cargo/bin).                                        \n                                                                                 \nTo configure your current shell, run:                                            \nsource \"$HOME/.cargo/env\"                                                        \n```\n\n刷新当前shell配置\n\n```shell\n[root@f8ac270c7b6b workspace]# source ~/.bashrc\n\n[root@f8ac270c7b6b workspace]# rustc --version\nrustc 1.65.0 (897e37553 2022-11-02)\n```\n\n--------------------\n\n# Hello World\n\n- Code\n- 编译\n- 执行\n\n## Code\n\n文件名：hello_world.rs\n\n使用的是 `.rs` 后缀！\n\n```\nfn main() {\n  println!(\"Hello, world!\");\n}\n```\n\n安装 vs code的 rust 扩展！\n\nExtension ID：dustypomerleau.rust-syntax\n![image](https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png)\n\n## 编译\n\n`rustc xxx.rs` 编译rust程序！\n\n```shell\n[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs\n[root@f8ac270c7b6b rust-learn]# ls\nhello_world  hello_world.rs\n```\n\n## 执行\n\n直接执行编译后的文件！不需要启动程序！\n\n```\n[root@f8ac270c7b6b rust-learn]# ./hello_world\nHello, world!\n```\n\n----------\n\n# 构建系统和包管理器，Cargo \n\nCargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库\n\n使用官方方式安装，会自带 Cargo！\n\nCargo的详细命令可以使用 `--help`，也可查看 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --version\ncargo 1.65.0 (4bc8f24d3 2022-10-20)\n```\n\n- 创建项目\n- 编译项目\n  - 开发时编译\n  - 生产时编译\n- 执行项目\n- 快速检测\n- 小结\n- 参考\n\n## 创建项目\n\n使用 `cargo new <new dir name>`\n\n产物结构\n\n![image](https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png)\n\n生成一个配置文件，是toml文件。\n\n这个文件使用 [TOML](https://toml.io/) (Tom's Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。\n\n还生成一个src以及src下的z=主文件main。\n\n![image](https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png)\n\n## 编译项目\n\n- 开发时编译\n- 生产时编译\n\n### 开发时编译\n\n切换到 项目目录下（此处是 hello_cargo），执行build命令。\n\n```shell\ncargo build\n```\n\nbuild 结果如下：\n\n![image](https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png)\n\n增加了 `Cargo.lock` 和 `target/` 目录！\n\n\n### 生产时编译\n\n在开发时编译的基础上增加 `--release`。\n\n编译的产物会放在 `target/release` 中！详细参考 [附录](https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209)\n\n```shell\ncargo build --release\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png)\n\n\n\n\n## 运行项目\n\n使用 `run` 命令\n\n```shell\ncargo run\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png)\n\n\n## 快速检查\n\n在项目根目录下执行以下命令：\n\n```shell\ncargo check\n```\n\n![image](https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png)\n\n该命令快速检查代码确保其可以编译，但并不产生可执行文件！\n\n通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！\n\n\n## 小结\n\n- `cargo new`，创建项目。\n- `cargo build`，构建项目。\n- `cargo run`，一步构建并运行项目。\n- `cargo check`，在不生成二进制文件的情况下构建项目来检查错误。\n- 有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 `target/debug`，生产时在 `target/release`。\n\n## 参考\n\n- [Rust 程序设计语言 简体中文版 —— Hello, Cargo!](https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo)\n\n\n\n---\n\n# 语法概念\n\n- 结束符号\n- 注释\n- 变量/常量\n- 数据类型\n- [函数定义](https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749)\n- [控制流](https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240)\n\n## 结束符号\n\n使用分号（`;`）作为结束符号\n\n\n## 注释\n\n```rs\n// 这是一段注释\n```\n\n## 变量/常量\n\n### 变量\n\n变量默认是不可重复赋值！\n如果要重复赋值可以使用`mut`配合声明。\n变量是可以重复声明的！\n\n使用 `let` 声明标量！\n\n```rs\nlet foo = 1;\n```\n需要重复赋值时声明\n\n```rs\nlet mut foo = 1;\n\nfoo = 2\n```\n可以重复声明变量\n\n```rs\nlet foo = 1;\n// 在此之前foo=1\nlet foo: u8 = 2;\n// 解析来foo = 2\n```\n\n### 常量\n\n使用 `const`声明，与变量不同，它声明之后总是不可重复声明与赋值！\n\n```rs\nconst FOO = 1;\n```\n\n\n## 数据类型\n\n- 数据类型的分类\n\n### 数据类型的分类\n\n数据类型的分为*标量（scalar）*和*复合（compound）*，以及其他\n\n**标量（scalar）** 类型代表一个单独的值。Rust 有四种基本的标量类型：\n\n- [整型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385)\n- [浮点型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183)\n- [布尔类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689)\n- [字符类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816)\n\n**复合类型（Compound types）** 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：\n\n- [元组（tuple）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358)\n- [数组（array）](https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135)\n\n其他类型包含：\n\n- [引用类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936)\n- [Slice类型](https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984)\n\n\n-----------------\n\n#  所有权（ownership）\n\n- 前言\n- 所有权的规则\n- 变量作用域\n- 变量与数据交互的方式\n- 引用与借用\n\n## 前言\n\n[栈（Stack）与堆（Heap）内存。\n\n栈以放入值的顺序存储值。\n\n堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。\n\n入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。\n\n\n## 所有权的规则\n\n1. Rust 中的每一个值都有一个 所有者（owner）。\n2. 值在任一时刻有且只有一个所有者。\n3. 当所有者（变量）离开作用域，这个值将被丢弃。\n\n\n## 变量作用域\n\n`{}`，每个花括号包含的代码块都是一个作用域！\n\n注意，这不包含 struct 的花括号！\n\n```rs\nfn var_scope_main() {\n  {                     // s 在这里无效, 它尚未声明\n    let s = \"hello\";    // 从此处起，s 是有效的\n    \n    // 使用 s\n  }                     // Rust 在结尾的 } 处自动调用 drop, 释放内存\n                        // 此作用域已结束，s 不再有效\n}\n```\n\n## String 类型\n\nRust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。\n\nString类型有别于字面量字符串，它是可修改的！\n\n```rs\nlet mut s = String::from(\"hello\");\n\ns.push_str(\", world!\"); // push_str() 在字符串后追加字面值\n\nprintln!(\"{}\", s); // 将打印 `hello, world!`\n```\n\n对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：\n\n- 必须在运行时向内存分配器（memory allocator）请求内存。\n- 需要一个当我们处理完 String 时将内存返回给分配器的方法。\n\n### 变量与数据交互的方式\n\n使用堆内存的变量，他们之间的数据交互方式！\n\n![图片](https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png)\n\n- 转移\n- 拷贝\n\n#### 转移\n\n为了确保内存安全，在 let s2 = s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。\n\n相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！\n\n```rs\nfn heap_var_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1;\n  print!(\"s1 is {}\", s1);\n  print!(\"s2 is {}\", s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png)\n\n#### 拷贝\n\n使用一个叫做 [clone] 的通用函数。\n\n```rs\nfn clone_main() {\n  let s1 = String::from(\"hello\");\n  let s2 = s1.clone();\n\n  println!(\"\\ns1 = {}, s2 = {}\", s1, s2);\n}\n```\n\n![图片](https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png)\n\n\n## 引用与借用\n\n引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。\n\n`&` 符号就是 引用，它们允许你使用值但不获取其所有权。\n\n![图片](https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png)\n\n```rs\nfn ref_main() {\n  let s1 = String::from(\"hello world!\");\n\n  fn calculate_length(s: &String) -> usize {\n    return s.len();\n  }// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，\n  // 所以什么也不会发生\n\n  let len = calculate_length(&s1);\n\n  println!(\"\\ns1 len = {}\", len);\n}\n```\n\n`&s1` 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。\n\n我们将创建一个引用的行为称为 借用（borrowing）。\n\n\n### 可变引用\n\n正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。\n\n```rs\nfn mut_ref_main() {\n  let mut s = String::from(\"hello\");\n\n  change(&mut s);\n\n  print!(\"\\ns = {}\", s);\n\n  fn change(some_string: &mut String) {\n    some_string.push_str(\", world\");\n  }\n}\n```\n\n**注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。**\n\n这个限制的好处是 Rust 可以在编译时就避免数据竞争。\n\n[clone]: https://doc.rust-lang.org/std/clone/index.html\n\n\n---------------\n\n\n# 包、crate和模块\n\nuse 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。\n\n\n外部模块的寻址过程 \n\n1. 内联；\n2. 在文件 `src/<mod>.rs`；\n3. 在文件 `src/<mod>/mod.rs`。\n\n内联模块：\n\n```rs\nmod front_of_house {}\n```\n\n\n---------------\n\n\n# 附录\n\n- 参考\n- cargo --help\n- cargo编译后的产物\n- Rust内存布局\n\n## 参考\n- [The Rust Programming Language](https://doc.rust-lang.org/book/#the-rust-programming-language)\n- [Rust 程序设计语言 简体中文版](https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html)\n- [Rust入门秘籍](https://rust-book.junmajinlong.com/)\n- [Rust 中文教程等相关资源列表](https://www.rustwiki.org.cn/docs/)\n\n## cargo --help\n\n```shell\n[root@f8ac270c7b6b rust-learn]# cargo --help                                                    \nRust's package manager                                                                          \n                                                                                                \nUSAGE:                                                                                          \n    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   \n                                                                                                \nOPTIONS:                                                                                        \n    -V, --version               Print version info and exit                                     \n        --list                  List installed commands                                         \n        --explain <CODE>        Run `rustc --explain CODE`                                      \n    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           \n    -q, --quiet                 Do not print cargo log messages                                 \n        --color <WHEN>          Coloring: auto, always, never                                   \n        --frozen                Require Cargo.lock and cache are up to date                     \n        --locked                Require Cargo.lock is up to date                                \n        --offline               Run without accessing the network                               \n        --config <KEY=VALUE>    Override a configuration value                                  \n    -Z <FLAG>                   Unstable (nightly-only) flags to Cargo, see 'cargo -Z help' for \n                                details                                                         \n    -h, --help                  Print help information                                          \n                                                                                                \nSome common cargo commands are (see all commands with --list):                                  \n    build, b    Compile the current package                                                     \n    check, c    Analyze the current package and report errors, but don't build object files     \n    clean       Remove the target directory                                                     \n    doc, d      Build this package's and its dependencies' documentation                        \n    new         Create a new cargo package                                                      \n    init        Create a new cargo package in an existing directory                             \n    add         Add dependencies to a manifest file                                             \n    run, r      Run a binary or example of the local package                                    \n    test, t     Run the tests                                                                   \n    bench       Run the benchmarks                                                              \n    update      Update dependencies listed in Cargo.lock                                        \n    search      Search registry for crates                                                      \n    publish     Package and upload this package to the registry                                 \n    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     \n    uninstall   Uninstall a Rust binary                                                         \n                                                                                                \nSee 'cargo help <command>' for more information on a specific command.                          \n                                                                                                \n```\n\n## cargo编译后的产物\n\n- 开发时产物\n- 生产时产物\n\n### 开发时产物\n\n```shell\n[root@f8ac270c7b6b hello_cargo]# tree                      \n.                                                          \n|-- Cargo.lock                                             \n|-- Cargo.toml                                             \n|-- src                                                    \n|   `-- main.rs                                            \n`-- target                                                 \n    |-- CACHEDIR.TAG                                       \n    `-- debug                                              \n        |-- build                                          \n        |-- deps                                           \n        |   |-- hello_cargo-84cd33c7f338469a               \n        |   `-- hello_cargo-84cd33c7f338469a.d             \n        |-- examples                                       \n        |-- hello_cargo                                    \n        |-- hello_cargo.d                                  \n        `-- incremental                                    \n            `-- hello_cargo-aokenuaryvra                   \n                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     \n                |   |-- 1b24fot1ksjfohwq.o                 \n                |   |-- 2pcmwubz98u8588d.o                 \n                |   |-- 2skhc1xjwld6hx4y.o                 \n                |   |-- 387f08navk0xr9hq.o                 \n                |   |-- 41zl1lnzyfy87gmq.o                 \n                |   |-- 4gfj2nd48vmsnha0.o                 \n                |   |-- dep-graph.bin                      \n                |   |-- query-cache.bin                    \n                |   `-- work-products.bin                  \n                `-- s-gfry8e3ogd-1vtypym.lock              \n                                                           \n9 directories, 18 files                                    \n```\n\n### 生产时产物\n\n```shell\n[root@f8ac270c7b6b target]# tree                   \n.                                                  \n|-- CACHEDIR.TAG                                   \n|-- debug                                          \n|   |-- build                                      \n|   |-- deps                                       \n|   |   |-- hello_cargo-84cd33c7f338469a           \n|   |   `-- hello_cargo-84cd33c7f338469a.d         \n|   |-- examples                                   \n|   |-- hello_cargo                                \n|   |-- hello_cargo.d                              \n|   `-- incremental                                \n|       `-- hello_cargo-aokenuaryvra               \n|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn \n|           |   |-- 1b24fot1ksjfohwq.o             \n|           |   |-- 2pcmwubz98u8588d.o             \n|           |   |-- 2skhc1xjwld6hx4y.o             \n|           |   |-- 387f08navk0xr9hq.o             \n|           |   |-- 41zl1lnzyfy87gmq.o             \n|           |   |-- 4gfj2nd48vmsnha0.o             \n|           |   |-- dep-graph.bin                  \n|           |   |-- query-cache.bin                \n|           |   `-- work-products.bin              \n|           `-- s-gfryfk4nh1-10dc9z2.lock          \n`-- release                                        \n    |-- build                                      \n    |-- deps                                       \n    |   |-- hello_cargo-42d24d7ef33ef483           \n    |   `-- hello_cargo-42d24d7ef33ef483.d         \n    |-- examples                                   \n    |-- hello_cargo                                \n    |-- hello_cargo.d                              \n    `-- incremental                                \n                                                   \n12 directories, 19 files\n```\n\n## Rust 内存布局\n\n<img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","slug":"Rust学习","published":1,"updated":"2023-02-16T18:58:25.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccd00065onrhsnf6mmq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>\n<span id=\"more\"></span>\n\n<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />\n\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Rust 是一种 预编译静态类型（ahead-of-time compiled）语言，这意味着你可以编译程序，并将可执行文件送给其他人，他们甚至不需要安装 Rust 就可以运行。</p>","more":"<p>Rust 是 静态类型（statically typed）语言，也就是说在编译时就必须知道所有变量的类型。</p>\n<p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。如果违反了任何这些规则，程序都不能编译。</p>\n<p>Rust是内存安全、没有GC(垃圾回收)的高效语言。</p>\n<hr>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# curl --proto &#x27;=https&#x27; --tlsv1.3 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure>\n<p>安装成功！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: default toolchain set to &#x27;stable-x86_64-unknown-linux-gnu&#x27;                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">  stable-x86_64-unknown-linux-gnu installed - rustc 1.65.0 (897e37553 2022-11-02)</span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">Rust is installed now. Great!                                                    </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To get started you may need to restart your current shell.                       </span><br><span class=\"line\">This would reload your PATH environment variable to include                      </span><br><span class=\"line\">Cargo&#x27;s bin directory ($HOME/.cargo/bin).                                        </span><br><span class=\"line\">                                                                                 </span><br><span class=\"line\">To configure your current shell, run:                                            </span><br><span class=\"line\">source &quot;$HOME/.cargo/env&quot;                                                        </span><br></pre></td></tr></table></figure>\n\n<p>刷新当前shell配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b workspace]# source ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">[root@f8ac270c7b6b workspace]# rustc --version</span><br><span class=\"line\">rustc 1.65.0 (897e37553 2022-11-02)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1><ul>\n<li>Code</li>\n<li>编译</li>\n<li>执行</li>\n</ul>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><p>文件名：hello_world.rs</p>\n<p>使用的是 <code>.rs</code> 后缀！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">  println!(&quot;Hello, world!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安装 vs code的 rust 扩展！</p>\n<p>Extension ID：dustypomerleau.rust-syntax<br><img src=\"https://user-images.githubusercontent.com/25907273/204077420-7c3a88eb-57d2-4393-ae55-5ad625521997.png\" alt=\"image\"></p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p><code>rustc xxx.rs</code> 编译rust程序！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# rustc hello_world.rs</span><br><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ls</span><br><span class=\"line\">hello_world  hello_world.rs</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h2><p>直接执行编译后的文件！不需要启动程序！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# ./hello_world</span><br><span class=\"line\">Hello, world!</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"构建系统和包管理器，Cargo\"><a href=\"#构建系统和包管理器，Cargo\" class=\"headerlink\" title=\"构建系统和包管理器，Cargo\"></a>构建系统和包管理器，Cargo</h1><p>Cargo 是 Rust 的构建系统和包管理器。它可以为你处理很多任务，比如构建代码、下载依赖库并编译这些库</p>\n<p>使用官方方式安装，会自带 Cargo！</p>\n<p>Cargo的详细命令可以使用 <code>--help</code>，也可查看 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --version</span><br><span class=\"line\">cargo 1.65.0 (4bc8f24d3 2022-10-20)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建项目</li>\n<li>编译项目<ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n</li>\n<li>执行项目</li>\n<li>快速检测</li>\n<li>小结</li>\n<li>参考</li>\n</ul>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用 <code>cargo new &lt;new dir name&gt;</code></p>\n<p>产物结构</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089591-b2abeda6-5cdc-4bda-8498-3a06cf746f4a.png\" alt=\"image\"></p>\n<p>生成一个配置文件，是toml文件。</p>\n<p>这个文件使用 <a href=\"https://toml.io/\">TOML</a> (Tom’s Obvious, Minimal Language) 格式，这是 Cargo 配置文件的格式。</p>\n<p>还生成一个src以及src下的z&#x3D;主文件main。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089548-adadc8f1-ff1a-48e5-826b-68257e30cb6f.png\" alt=\"image\"></p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ul>\n<li>开发时编译</li>\n<li>生产时编译</li>\n</ul>\n<h3 id=\"开发时编译\"><a href=\"#开发时编译\" class=\"headerlink\" title=\"开发时编译\"></a>开发时编译</h3><p>切换到 项目目录下（此处是 hello_cargo），执行build命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build</span><br></pre></td></tr></table></figure>\n\n<p>build 结果如下：</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089646-b505984f-8cf6-4fae-b221-cbb47c59dcbb.png\" alt=\"image\"></p>\n<p>增加了 <code>Cargo.lock</code> 和 <code>target/</code> 目录！</p>\n<h3 id=\"生产时编译\"><a href=\"#生产时编译\" class=\"headerlink\" title=\"生产时编译\"></a>生产时编译</h3><p>在开发时编译的基础上增加 <code>--release</code>。</p>\n<p>编译的产物会放在 <code>target/release</code> 中！详细参考 <a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1327996209\">附录</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo build --release</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204099490-4309d4b8-7122-44d0-a7e7-2668d1940238.png\" alt=\"image\"></p>\n<h2 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h2><p>使用 <code>run</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204089972-fb695c14-1456-4863-8c09-fb8e5184a9bd.png\" alt=\"image\"></p>\n<h2 id=\"快速检查\"><a href=\"#快速检查\" class=\"headerlink\" title=\"快速检查\"></a>快速检查</h2><p>在项目根目录下执行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204100025-89f68fa1-26a0-4303-a32f-3a240ae04503.png\" alt=\"image\"></p>\n<p>该命令快速检查代码确保其可以编译，但并不产生可执行文件！</p>\n<p>通常 cargo check 要比 cargo build 快得多，因为它省略了生成可执行文件的步骤。如果你在编写代码时持续的进行检查，cargo check 可以让你快速了解现在的代码能不能正常通过编译！</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>cargo new</code>，创建项目。</li>\n<li><code>cargo build</code>，构建项目。</li>\n<li><code>cargo run</code>，一步构建并运行项目。</li>\n<li><code>cargo check</code>，在不生成二进制文件的情况下构建项目来检查错误。</li>\n<li>有别于将构建结果放在与源码相同的目录，Cargo 会将其放到 target目录，默认在 <code>target/debug</code>，生产时在 <code>target/release</code>。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-03-hello-cargo.html#hello-cargo\">Rust 程序设计语言 简体中文版 —— Hello, Cargo!</a></li>\n</ul>\n<hr>\n<h1 id=\"语法概念\"><a href=\"#语法概念\" class=\"headerlink\" title=\"语法概念\"></a>语法概念</h1><ul>\n<li>结束符号</li>\n<li>注释</li>\n<li>变量&#x2F;常量</li>\n<li>数据类型</li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328515749\">函数定义</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1330017240\">控制流</a></li>\n</ul>\n<h2 id=\"结束符号\"><a href=\"#结束符号\" class=\"headerlink\" title=\"结束符号\"></a>结束符号</h2><p>使用分号（<code>;</code>）作为结束符号</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是一段注释</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量-x2F-常量\"><a href=\"#变量-x2F-常量\" class=\"headerlink\" title=\"变量&#x2F;常量\"></a>变量&#x2F;常量</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>变量默认是不可重复赋值！<br>如果要重复赋值可以使用<code>mut</code>配合声明。<br>变量是可以重复声明的！</p>\n<p>使用 <code>let</code> 声明标量！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>需要重复赋值时声明</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">foo = <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以重复声明变量</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 在此之前foo=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable\">foo</span>: <span class=\"type\">u8</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 解析来foo = 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>使用 <code>const</code>声明，与变量不同，它声明之后总是不可重复声明与赋值！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> FOO = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>数据类型的分类</li>\n</ul>\n<h3 id=\"数据类型的分类\"><a href=\"#数据类型的分类\" class=\"headerlink\" title=\"数据类型的分类\"></a>数据类型的分类</h3><p>数据类型的分为<em>标量（scalar）</em>和<em>复合（compound）</em>，以及其他</p>\n<p><strong>标量（scalar）</strong> 类型代表一个单独的值。Rust 有四种基本的标量类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328102385\">整型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105183\">浮点型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328105689\">布尔类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328111816\">字符类型</a></li>\n</ul>\n<p><strong>复合类型（Compound types）</strong> 可以将多个值组合成一个类型。Rust 有两个原生的复合类型：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328122358\">元组（tuple）</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328195135\">数组（array）</a></li>\n</ul>\n<p>其他类型包含：</p>\n<ul>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328463936\">引用类型</a></li>\n<li><a href=\"https://github.com/isaaxite/blog/issues/296#issuecomment-1328510984\">Slice类型</a></li>\n</ul>\n<hr>\n<h1 id=\"所有权（ownership）\"><a href=\"#所有权（ownership）\" class=\"headerlink\" title=\"所有权（ownership）\"></a>所有权（ownership）</h1><ul>\n<li>前言</li>\n<li>所有权的规则</li>\n<li>变量作用域</li>\n<li>变量与数据交互的方式</li>\n<li>引用与借用</li>\n</ul>\n<h2 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>[栈（Stack）与堆（Heap）内存。</p>\n<p>栈以放入值的顺序存储值。</p>\n<p>堆是缺乏组织的：当向堆放入数据时，你要请求一定大小的空间。内存分配器（memory allocator）在堆的某处找到一块足够大的空位，把它标记为已使用，并返回一个表示该位置地址的 指针（pointer）。</p>\n<p>入栈比在堆上分配内存要快，因为（入栈时）分配器无需为存储新数据去搜索内存空间；其位置总是在栈顶。相比之下，在堆上分配内存则需要更多的工作，这是因为分配器必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</p>\n<h2 id=\"所有权的规则\"><a href=\"#所有权的规则\" class=\"headerlink\" title=\"所有权的规则\"></a>所有权的规则</h2><ol>\n<li>Rust 中的每一个值都有一个 所有者（owner）。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ol>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p><code>&#123;&#125;</code>，每个花括号包含的代码块都是一个作用域！</p>\n<p>注意，这不包含 struct 的花括号！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">var_scope_main</span>() &#123;</span><br><span class=\"line\">  &#123;                     <span class=\"comment\">// s 在这里无效, 它尚未声明</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">s</span> = <span class=\"string\">&quot;hello&quot;</span>;    <span class=\"comment\">// 从此处起，s 是有效的</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 使用 s</span></span><br><span class=\"line\">  &#125;                     <span class=\"comment\">// Rust 在结尾的 &#125; 处自动调用 drop, 释放内存</span></span><br><span class=\"line\">                        <span class=\"comment\">// 此作用域已结束，s 不再有效</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-类型\"><a href=\"#String-类型\" class=\"headerlink\" title=\"String 类型\"></a>String 类型</h2><p>Rust 有第二个字符串类型，String。这个类型管理被分配到堆上的数据，所以能够存储在编译时未知大小的文本。可以使用 from 函数基于字符串字面值来创建 String。</p>\n<p>String类型有别于字面量字符串，它是可修改的！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">s.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world!&quot;</span>); <span class=\"comment\">// push_str() 在字符串后追加字面值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, s); <span class=\"comment\">// 将打印 `hello, world!`</span></span><br></pre></td></tr></table></figure>\n\n<p>对于 String 类型，为了支持一个可变，可增长的文本片段，需要在堆上分配一块在编译时未知大小的内存来存放内容。这意味着：</p>\n<ul>\n<li>必须在运行时向内存分配器（memory allocator）请求内存。</li>\n<li>需要一个当我们处理完 String 时将内存返回给分配器的方法。</li>\n</ul>\n<h3 id=\"变量与数据交互的方式\"><a href=\"#变量与数据交互的方式\" class=\"headerlink\" title=\"变量与数据交互的方式\"></a>变量与数据交互的方式</h3><p>使用堆内存的变量，他们之间的数据交互方式！</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204480696-4188bc14-809f-49dd-be12-3ef7868d3b0e.png\" alt=\"图片\"></p>\n<ul>\n<li>转移</li>\n<li>拷贝</li>\n</ul>\n<h4 id=\"转移\"><a href=\"#转移\" class=\"headerlink\" title=\"转移\"></a>转移</h4><p>为了确保内存安全，在 let s2 &#x3D; s1 之后，Rust 认为 s1 不再有效，因此 Rust 不需要在 s1 离开作用域后清理任何东西。</p>\n<p>相当于 s1 赋值给 s2，就将数据转移到s2。不是浅拷贝（将引用复制给s2），也不是深拷贝！</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">heap_var_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1;</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s1 is &#123;&#125;&quot;</span>, s1);</span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;s2 is &#123;&#125;&quot;</span>, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204481489-09ebb4e5-5fb3-413c-83a6-36a528ed980a.png\" alt=\"图片\"></p>\n<h4 id=\"拷贝\"><a href=\"#拷贝\" class=\"headerlink\" title=\"拷贝\"></a>拷贝</h4><p>使用一个叫做 <a href=\"https://doc.rust-lang.org/std/clone/index.html\">clone</a> 的通用函数。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">clone_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s2</span> = s1.<span class=\"title function_ invoke__\">clone</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204489601-c2e6f02b-4aa7-46bc-97d5-e707e7643458.png\" alt=\"图片\"></p>\n<h2 id=\"引用与借用\"><a href=\"#引用与借用\" class=\"headerlink\" title=\"引用与借用\"></a>引用与借用</h2><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p>\n<p><code>&amp;</code> 符号就是 引用，它们允许你使用值但不获取其所有权。</p>\n<p><img src=\"https://user-images.githubusercontent.com/25907273/204947997-bd4878ea-b295-47fd-bd0d-895d2f703fc1.png\" alt=\"图片\"></p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">s1</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">calculate_length</span>(s: &amp;<span class=\"type\">String</span>) <span class=\"punctuation\">-&gt;</span> <span class=\"type\">usize</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.<span class=\"title function_ invoke__\">len</span>();</span><br><span class=\"line\">  &#125;<span class=\"comment\">// 这里，s 离开了作用域。但因为它并不拥有引用值的所有权，</span></span><br><span class=\"line\">  <span class=\"comment\">// 所以什么也不会发生</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable\">len</span> = <span class=\"title function_ invoke__\">calculate_length</span>(&amp;s1);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;\\ns1 len = &#123;&#125;&quot;</span>, len);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&amp;s1</code> 语法让我们创建一个 指向 值 s1 的引用，但是并不拥有它。因为并不拥有这个值。</p>\n<p>我们将创建一个引用的行为称为 借用（borrowing）。</p>\n<h3 id=\"可变引用\"><a href=\"#可变引用\" class=\"headerlink\" title=\"可变引用\"></a>可变引用</h3><p>正如变量默认是不可变的，引用也一样。（默认）不允许修改引用的值。</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">mut_ref_main</span>() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"keyword\">mut </span><span class=\"variable\">s</span> = <span class=\"type\">String</span>::<span class=\"title function_ invoke__\">from</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_ invoke__\">change</span>(&amp;<span class=\"keyword\">mut</span> s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print!</span>(<span class=\"string\">&quot;\\ns = &#123;&#125;&quot;</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">fn</span> <span class=\"title function_\">change</span>(some_string: &amp;<span class=\"keyword\">mut</span> <span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">    some_string.<span class=\"title function_ invoke__\">push_str</span>(<span class=\"string\">&quot;, world&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：可变引用有一个很大的限制：如果你有一个对该变量的可变引用，你就不能再创建对该变量的引用。</strong></p>\n<p>这个限制的好处是 Rust 可以在编译时就避免数据竞争。</p>\n<hr>\n<h1 id=\"包、crate和模块\"><a href=\"#包、crate和模块\" class=\"headerlink\" title=\"包、crate和模块\"></a>包、crate和模块</h1><p>use 关键字: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域, 你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</p>\n<p>外部模块的寻址过程 </p>\n<ol>\n<li>内联；</li>\n<li>在文件 <code>src/&lt;mod&gt;.rs</code>；</li>\n<li>在文件 <code>src/&lt;mod&gt;/mod.rs</code>。</li>\n</ol>\n<p>内联模块：</p>\n<figure class=\"highlight rs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mod</span> front_of_house &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><ul>\n<li>参考</li>\n<li>cargo –help</li>\n<li>cargo编译后的产物</li>\n<li>Rust内存布局</li>\n</ul>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://doc.rust-lang.org/book/#the-rust-programming-language\">The Rust Programming Language</a></li>\n<li><a href=\"https://kaisery.github.io/trpl-zh-cn/ch01-01-installation.html\">Rust 程序设计语言 简体中文版</a></li>\n<li><a href=\"https://rust-book.junmajinlong.com/\">Rust入门秘籍</a></li>\n<li><a href=\"https://www.rustwiki.org.cn/docs/\">Rust 中文教程等相关资源列表</a></li>\n</ul>\n<h2 id=\"cargo-–help\"><a href=\"#cargo-–help\" class=\"headerlink\" title=\"cargo –help\"></a>cargo –help</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b rust-learn]# cargo --help                                                    </span><br><span class=\"line\">Rust&#x27;s package manager                                                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">USAGE:                                                                                          </span><br><span class=\"line\">    cargo [+toolchain] [OPTIONS] [SUBCOMMAND]                                                   </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">OPTIONS:                                                                                        </span><br><span class=\"line\">    -V, --version               Print version info and exit                                     </span><br><span class=\"line\">        --list                  List installed commands                                         </span><br><span class=\"line\">        --explain &lt;CODE&gt;        Run `rustc --explain CODE`                                      </span><br><span class=\"line\">    -v, --verbose               Use verbose output (-vv very verbose/build.rs output)           </span><br><span class=\"line\">    -q, --quiet                 Do not print cargo log messages                                 </span><br><span class=\"line\">        --color &lt;WHEN&gt;          Coloring: auto, always, never                                   </span><br><span class=\"line\">        --frozen                Require Cargo.lock and cache are up to date                     </span><br><span class=\"line\">        --locked                Require Cargo.lock is up to date                                </span><br><span class=\"line\">        --offline               Run without accessing the network                               </span><br><span class=\"line\">        --config &lt;KEY=VALUE&gt;    Override a configuration value                                  </span><br><span class=\"line\">    -Z &lt;FLAG&gt;                   Unstable (nightly-only) flags to Cargo, see &#x27;cargo -Z help&#x27; for </span><br><span class=\"line\">                                details                                                         </span><br><span class=\"line\">    -h, --help                  Print help information                                          </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">Some common cargo commands are (see all commands with --list):                                  </span><br><span class=\"line\">    build, b    Compile the current package                                                     </span><br><span class=\"line\">    check, c    Analyze the current package and report errors, but don&#x27;t build object files     </span><br><span class=\"line\">    clean       Remove the target directory                                                     </span><br><span class=\"line\">    doc, d      Build this package&#x27;s and its dependencies&#x27; documentation                        </span><br><span class=\"line\">    new         Create a new cargo package                                                      </span><br><span class=\"line\">    init        Create a new cargo package in an existing directory                             </span><br><span class=\"line\">    add         Add dependencies to a manifest file                                             </span><br><span class=\"line\">    run, r      Run a binary or example of the local package                                    </span><br><span class=\"line\">    test, t     Run the tests                                                                   </span><br><span class=\"line\">    bench       Run the benchmarks                                                              </span><br><span class=\"line\">    update      Update dependencies listed in Cargo.lock                                        </span><br><span class=\"line\">    search      Search registry for crates                                                      </span><br><span class=\"line\">    publish     Package and upload this package to the registry                                 </span><br><span class=\"line\">    install     Install a Rust binary. Default location is $HOME/.cargo/bin                     </span><br><span class=\"line\">    uninstall   Uninstall a Rust binary                                                         </span><br><span class=\"line\">                                                                                                </span><br><span class=\"line\">See &#x27;cargo help &lt;command&gt;&#x27; for more information on a specific command.                          </span><br><span class=\"line\">                                                                                                </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cargo编译后的产物\"><a href=\"#cargo编译后的产物\" class=\"headerlink\" title=\"cargo编译后的产物\"></a>cargo编译后的产物</h2><ul>\n<li>开发时产物</li>\n<li>生产时产物</li>\n</ul>\n<h3 id=\"开发时产物\"><a href=\"#开发时产物\" class=\"headerlink\" title=\"开发时产物\"></a>开发时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b hello_cargo]# tree                      </span><br><span class=\"line\">.                                                          </span><br><span class=\"line\">|-- Cargo.lock                                             </span><br><span class=\"line\">|-- Cargo.toml                                             </span><br><span class=\"line\">|-- src                                                    </span><br><span class=\"line\">|   `-- main.rs                                            </span><br><span class=\"line\">`-- target                                                 </span><br><span class=\"line\">    |-- CACHEDIR.TAG                                       </span><br><span class=\"line\">    `-- debug                                              </span><br><span class=\"line\">        |-- build                                          </span><br><span class=\"line\">        |-- deps                                           </span><br><span class=\"line\">        |   |-- hello_cargo-84cd33c7f338469a               </span><br><span class=\"line\">        |   `-- hello_cargo-84cd33c7f338469a.d             </span><br><span class=\"line\">        |-- examples                                       </span><br><span class=\"line\">        |-- hello_cargo                                    </span><br><span class=\"line\">        |-- hello_cargo.d                                  </span><br><span class=\"line\">        `-- incremental                                    </span><br><span class=\"line\">            `-- hello_cargo-aokenuaryvra                   </span><br><span class=\"line\">                |-- s-gfry8e3ogd-1vtypym-2e5m3t5mj48xn     </span><br><span class=\"line\">                |   |-- 1b24fot1ksjfohwq.o                 </span><br><span class=\"line\">                |   |-- 2pcmwubz98u8588d.o                 </span><br><span class=\"line\">                |   |-- 2skhc1xjwld6hx4y.o                 </span><br><span class=\"line\">                |   |-- 387f08navk0xr9hq.o                 </span><br><span class=\"line\">                |   |-- 41zl1lnzyfy87gmq.o                 </span><br><span class=\"line\">                |   |-- 4gfj2nd48vmsnha0.o                 </span><br><span class=\"line\">                |   |-- dep-graph.bin                      </span><br><span class=\"line\">                |   |-- query-cache.bin                    </span><br><span class=\"line\">                |   `-- work-products.bin                  </span><br><span class=\"line\">                `-- s-gfry8e3ogd-1vtypym.lock              </span><br><span class=\"line\">                                                           </span><br><span class=\"line\">9 directories, 18 files                                    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生产时产物\"><a href=\"#生产时产物\" class=\"headerlink\" title=\"生产时产物\"></a>生产时产物</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@f8ac270c7b6b target]# tree                   </span><br><span class=\"line\">.                                                  </span><br><span class=\"line\">|-- CACHEDIR.TAG                                   </span><br><span class=\"line\">|-- debug                                          </span><br><span class=\"line\">|   |-- build                                      </span><br><span class=\"line\">|   |-- deps                                       </span><br><span class=\"line\">|   |   |-- hello_cargo-84cd33c7f338469a           </span><br><span class=\"line\">|   |   `-- hello_cargo-84cd33c7f338469a.d         </span><br><span class=\"line\">|   |-- examples                                   </span><br><span class=\"line\">|   |-- hello_cargo                                </span><br><span class=\"line\">|   |-- hello_cargo.d                              </span><br><span class=\"line\">|   `-- incremental                                </span><br><span class=\"line\">|       `-- hello_cargo-aokenuaryvra               </span><br><span class=\"line\">|           |-- s-gfryfk4nh1-10dc9z2-2e5m3t5mj48xn </span><br><span class=\"line\">|           |   |-- 1b24fot1ksjfohwq.o             </span><br><span class=\"line\">|           |   |-- 2pcmwubz98u8588d.o             </span><br><span class=\"line\">|           |   |-- 2skhc1xjwld6hx4y.o             </span><br><span class=\"line\">|           |   |-- 387f08navk0xr9hq.o             </span><br><span class=\"line\">|           |   |-- 41zl1lnzyfy87gmq.o             </span><br><span class=\"line\">|           |   |-- 4gfj2nd48vmsnha0.o             </span><br><span class=\"line\">|           |   |-- dep-graph.bin                  </span><br><span class=\"line\">|           |   |-- query-cache.bin                </span><br><span class=\"line\">|           |   `-- work-products.bin              </span><br><span class=\"line\">|           `-- s-gfryfk4nh1-10dc9z2.lock          </span><br><span class=\"line\">`-- release                                        </span><br><span class=\"line\">    |-- build                                      </span><br><span class=\"line\">    |-- deps                                       </span><br><span class=\"line\">    |   |-- hello_cargo-42d24d7ef33ef483           </span><br><span class=\"line\">    |   `-- hello_cargo-42d24d7ef33ef483.d         </span><br><span class=\"line\">    |-- examples                                   </span><br><span class=\"line\">    |-- hello_cargo                                </span><br><span class=\"line\">    |-- hello_cargo.d                              </span><br><span class=\"line\">    `-- incremental                                </span><br><span class=\"line\">                                                   </span><br><span class=\"line\">12 directories, 19 files</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rust-内存布局\"><a href=\"#Rust-内存布局\" class=\"headerlink\" title=\"Rust 内存布局\"></a>Rust 内存布局</h2><img width=\"100%\" src=\"https://user-images.githubusercontent.com/25907273/204198140-44b47b88-e8ed-43b0-a554-181ebdd3ef0c.png\" />"},{"title":"filter的实现原理","date":"2019-12-14T00:41:47.000Z","_content":"\n# 大纲\n\n- [前言]\n- [filter一般调用方式有三种]\n- [_f是什么？]\n- [总结]\n\n<!-- more -->\n\n# 前言\n\n使用如下例子，说明`filter`作为html属性一部分或元素文本一部分的解析，以及vue对`filter`解析过程的详细实现。\n\n```html\n<main id=\"app\">\n  <span :data-filter=\"price|decimal(3)|format-unit|test\">{{price|decimal(3)|format-unit|test}}</span>\n</main>\n<script>\n  const vm = new Vue({\n    created() {\n      this.methodA();\n    },\n    data: {\n      curcoder: {\n        name: 'isaac',\n        position: 'fe',\n        email: 'isaacgun@outlook.com'\n      },\n      price: 100\n    },\n    filters: {\n      decimal(val, count = 2) {\n        if (Number.isNaN(val)) {\n          return val;\n        }\n        if (Number.isNaN(count) || count < 0) {\n          count = 0;\n        }\n        return val.toFixed(count);\n      },\n      formatUnit(val) {\n        return ['￥', val].join('');\n      },\n      Test(val) {\n        console.log(334, this);\n        return val;\n      }\n    },\n    methods: {\n      methodA() {\n        const { decimal } = this.$options.filters;\n        const num = decimal(120, 4);\n        console.log(num);\n      }\n    }\n  }).$mount('#app');\n  console.log('vm:', vm);\n</script>\n```\n\n\n# filter一般调用方式有三种\n\n[回到顶部]\n\n1. 在双花括号中使用：`<span>{{price|unit}}</span>`，在解析模板阶段，使用`parseText`进行解析；\n2. 在 `v-bind` 中使用：`<span :data-format-price=\"price|unit\"></span>`，在解析模板阶段，使用`processAttrs`进行解析；\n3. 在钩子或回调函数中使用：`this.$options.filters.unit(this.price)`。\n\n在`parseText`中解析\n\npath: `vue/src/compiler/parser/text-parser.js:20`\n\n```typescript\n// parse `<span>{{price|unit}}</span>`\n\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\nexport function parseText (\n  text: string,\n  delimiters?: [string, string]\n): TextParseResult | void {\n  const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE\n  if (!tagRE.test(text)) {\n    return\n  }\n  while ((match = tagRE.exec(text))) {\n    // ...\n    log(match[1]);\n    const exp = parseFilters(match[1].trim())\n    // ...\n  }\n  // ...\n}\n\n// output: \"price|unit\"\n```\n\n在`processAttrs`中解析\n\npath: `vue/src/compiler/parser/index.js:765`\n\n```typescript\n// parse `<span :data-format-price=\"price|unit\"></span>`\n\nfunction processAttrs (el) {\n  // ...\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name\n    value = list[i].value\n    if (dirRE.test(name)) {\n      // ...\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '')\n        log('value:', value)\n        value = parseFilters(value)\n      }\n      // ...\n    }\n    // ...\n  }\n  // ...\n}\n\n// output: \"price|unit\"\n```\n可以看到，以上两种方式去解析filter文本，最后都是调用`parseFilters`对filter文本进行解析。\n```typescript\n// parse `price|decimal(3)|format-unit|test`\n\nexport function parseFilters (exp: string): string {\n  // ...\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i])\n    }\n  }\n  log(expression);\n  return expression\n}\nfunction wrapFilter (exp: string, filter: string): string {\n  const i = filter.indexOf('(')\n  if (i < 0) {\n    // _f: resolveFilter\n    return `_f(\"${filter}\")(${exp})`\n  } else {\n    const name = filter.slice(0, i)\n    const args = filter.slice(i + 1)\n    return `_f(\"${name}\")(${exp}${args !== ')' ? ',' + args : args}`\n  }\n}\n\n// output: `_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))`\n```\nfilter文本最后解析完还是文本！是一串有函数和参数组成的字符串，其中比较突出的就是`_f`！\n从`_f(\"decimal\")(price,3)`就可以大致推断`_f`是一个工厂函数，用来生产filter函数，`_f(\"decimal\")`应该就是获取`decimal`过滤器，\n那么大概`_f(\"decimal\")(price,3)`就是，调用`decimal`过滤器，传入参数`this.price,3`！\n\n为什么最后解析出的只是一段函数调用的文本？\n\n因为vue的视图渲染分成两步：a. 解析视图模板，生成用于渲染整个视图的函数文本；b. 将函数文本作为视图订阅器（render-watcher）的getter（用于获取watcher的值，watcher.value）。\n\n可以直接打印一下例子中render-watcher的文本：\n\n```typescript\n// path: \nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)\n  log(code.render);\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n```\n# output:\n\nwith(this){return _c('main',{attrs:{\"id\":\"app\"}},[_c('span',{attrs:{\"data-filter\":_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))}},[_v(_s(_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))))])])}\n```\n可以看见`_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))`就被包含在其中！\n\n\n\n# _f是什么？\n\n[回到顶部]\n\n上面推测`_f`是生产过滤器的工厂，具体看下这个`_f`是怎么来的！\n\n全局搜索`._f`，可以在`vue/src/core/instance/render-helpers/index.js`找到下面的代码！\n```typescript\nimport { resolveFilter } from './resolve-filter'\n\nexport function installRenderHelpers (target: any) {\n  // ...\n  target._f = resolveFilter\n  // ...\n}\n```\n\n向上回溯去找`installRenderHelpers`在哪里被调用！可以找到`renderMixin`！\n\n```typescript\nexport function renderMixin (Vue: Class<Component>) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype)\n}\n```\n在`vue/src/core/instance/render-helpers/index.js`中向下寻找`resolveFilter`的本质逻辑！\n```typescript\nimport { identity, resolveAsset } from 'core/util/index'\n\n/**\n * Runtime helper for resolving filters\n * @param {string} id filter的名字\n */\nexport function resolveFilter (id: string): Function {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nexport function resolveAsset (\n  options: Object,\n  type: string,\n  id: string,\n  warnMissing?: boolean\n): any {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  const assets = options[type]\n  // check local registration variations first\n  if (hasOwn(assets, id)) return assets[id]\n\n  // 中划线转驼峰\n  const camelizedId = camelize(id)\n  if (hasOwn(assets, camelizedId)) return assets[camelizedId]\n\n  // 开头大写化\n  const PascalCaseId = capitalize(camelizedId)\n  if (hasOwn(assets, PascalCaseId)) return assets[PascalCaseId]\n\n  // fallback to prototype chain\n  // 自然回溯原型链\n  const res = assets[id] || assets[camelizedId] || assets[PascalCaseId]\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    )\n  }\n  return res\n}\n```\n\n再看`_f(\"decimal\")`，即是`resolveFilter (\"decimal\")`,\n```typescript\n// resolveAsset(this.$options, 'filters', id, true)\nresolveAsset(this.$options, 'filters', 'decimal', true);\n```\n那么对于filter来说，xx的几个参数的意思：\n```typescript\nfunction resolveAsset (\n  options: Object,  // this.$options\n  type: string, // 'filters'\n  id: string, // 'decimal'(过滤器名)\n  warnMissing?: boolean\n)\n```\n那么`const assets = options[type]`中的assets就是filters，`return assets[id]`就是返回我们自己定义的filter-callback！\n\n`_f(\"decimal\")`就返回decimal过滤器回调函数！\n\n从上面`resolveAsset`的实现，可以看出，filter的使用方式可以兼容以下几种情况：\n\n1. 正常调用，`{{price|formatUnit}}`；\n2. 中划线调用，单用驼峰法定义filter，`{{price|format-unit}}`；\n3. 小写开头调用，但定义时用开头大写，`{{price|test}}`，test对使用Test定义的filter有效；\n4. 自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！\n\n整个流程下来，可以发现：a. filter-callback没有使用bind绑定上下文；b. 没有直接挂在在vue实例上。\n\n这也是有别于`methods`的不同，看`methods`的初始化就知道：\n```typescript\nfunction initMethods (vm: Component, methods: Object) {\n  const props = vm.$options.props\n  for (const key in methods) {\n    // ...\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm)\n  }\n}\n```\n\nfilter的特点\n1. filter不会被代理到vm实例上；      \n2. filter不会绑定vm作为上下文。\n\n\n\n\n# 总结\n\n[回到顶部]\n\n- filter兼容的调用方式\n 1. 正常调用，`{{price|formatUnit}}`；\n 2. 中划线调用，单用驼峰法定义filter，`{{price|format-unit}}`；\n 3. 小写开头调用，但定义时用开头大写，`{{price|test}}`，test对使用Test定义的filter有效；\n 4. 自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！\n\n\n\n- filter的特点\n 1. filter不会被代理到vm实例上；     \n 2. filter不会绑定vm作为上下文。\n\n\n\n[回到顶部]: #大纲\n[前言]: #前言\n[filter一般调用方式有三种]: #filter一般调用方式有三种\n[_f是什么？]: #_f是什么\n[总结]: #总结\n","source":"_posts/filter的实现原理.md","raw":"---\ntitle: filter的实现原理\ndate: 2019-12-14 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\n---\n\n# 大纲\n\n- [前言]\n- [filter一般调用方式有三种]\n- [_f是什么？]\n- [总结]\n\n<!-- more -->\n\n# 前言\n\n使用如下例子，说明`filter`作为html属性一部分或元素文本一部分的解析，以及vue对`filter`解析过程的详细实现。\n\n```html\n<main id=\"app\">\n  <span :data-filter=\"price|decimal(3)|format-unit|test\">{{price|decimal(3)|format-unit|test}}</span>\n</main>\n<script>\n  const vm = new Vue({\n    created() {\n      this.methodA();\n    },\n    data: {\n      curcoder: {\n        name: 'isaac',\n        position: 'fe',\n        email: 'isaacgun@outlook.com'\n      },\n      price: 100\n    },\n    filters: {\n      decimal(val, count = 2) {\n        if (Number.isNaN(val)) {\n          return val;\n        }\n        if (Number.isNaN(count) || count < 0) {\n          count = 0;\n        }\n        return val.toFixed(count);\n      },\n      formatUnit(val) {\n        return ['￥', val].join('');\n      },\n      Test(val) {\n        console.log(334, this);\n        return val;\n      }\n    },\n    methods: {\n      methodA() {\n        const { decimal } = this.$options.filters;\n        const num = decimal(120, 4);\n        console.log(num);\n      }\n    }\n  }).$mount('#app');\n  console.log('vm:', vm);\n</script>\n```\n\n\n# filter一般调用方式有三种\n\n[回到顶部]\n\n1. 在双花括号中使用：`<span>{{price|unit}}</span>`，在解析模板阶段，使用`parseText`进行解析；\n2. 在 `v-bind` 中使用：`<span :data-format-price=\"price|unit\"></span>`，在解析模板阶段，使用`processAttrs`进行解析；\n3. 在钩子或回调函数中使用：`this.$options.filters.unit(this.price)`。\n\n在`parseText`中解析\n\npath: `vue/src/compiler/parser/text-parser.js:20`\n\n```typescript\n// parse `<span>{{price|unit}}</span>`\n\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g\nexport function parseText (\n  text: string,\n  delimiters?: [string, string]\n): TextParseResult | void {\n  const tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE\n  if (!tagRE.test(text)) {\n    return\n  }\n  while ((match = tagRE.exec(text))) {\n    // ...\n    log(match[1]);\n    const exp = parseFilters(match[1].trim())\n    // ...\n  }\n  // ...\n}\n\n// output: \"price|unit\"\n```\n\n在`processAttrs`中解析\n\npath: `vue/src/compiler/parser/index.js:765`\n\n```typescript\n// parse `<span :data-format-price=\"price|unit\"></span>`\n\nfunction processAttrs (el) {\n  // ...\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name\n    value = list[i].value\n    if (dirRE.test(name)) {\n      // ...\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '')\n        log('value:', value)\n        value = parseFilters(value)\n      }\n      // ...\n    }\n    // ...\n  }\n  // ...\n}\n\n// output: \"price|unit\"\n```\n可以看到，以上两种方式去解析filter文本，最后都是调用`parseFilters`对filter文本进行解析。\n```typescript\n// parse `price|decimal(3)|format-unit|test`\n\nexport function parseFilters (exp: string): string {\n  // ...\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i])\n    }\n  }\n  log(expression);\n  return expression\n}\nfunction wrapFilter (exp: string, filter: string): string {\n  const i = filter.indexOf('(')\n  if (i < 0) {\n    // _f: resolveFilter\n    return `_f(\"${filter}\")(${exp})`\n  } else {\n    const name = filter.slice(0, i)\n    const args = filter.slice(i + 1)\n    return `_f(\"${name}\")(${exp}${args !== ')' ? ',' + args : args}`\n  }\n}\n\n// output: `_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))`\n```\nfilter文本最后解析完还是文本！是一串有函数和参数组成的字符串，其中比较突出的就是`_f`！\n从`_f(\"decimal\")(price,3)`就可以大致推断`_f`是一个工厂函数，用来生产filter函数，`_f(\"decimal\")`应该就是获取`decimal`过滤器，\n那么大概`_f(\"decimal\")(price,3)`就是，调用`decimal`过滤器，传入参数`this.price,3`！\n\n为什么最后解析出的只是一段函数调用的文本？\n\n因为vue的视图渲染分成两步：a. 解析视图模板，生成用于渲染整个视图的函数文本；b. 将函数文本作为视图订阅器（render-watcher）的getter（用于获取watcher的值，watcher.value）。\n\n可以直接打印一下例子中render-watcher的文本：\n\n```typescript\n// path: \nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)\n  log(code.render);\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n```\n# output:\n\nwith(this){return _c('main',{attrs:{\"id\":\"app\"}},[_c('span',{attrs:{\"data-filter\":_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))}},[_v(_s(_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))))])])}\n```\n可以看见`_f(\"test\")(_f(\"format-unit\")(_f(\"decimal\")(price,3)))`就被包含在其中！\n\n\n\n# _f是什么？\n\n[回到顶部]\n\n上面推测`_f`是生产过滤器的工厂，具体看下这个`_f`是怎么来的！\n\n全局搜索`._f`，可以在`vue/src/core/instance/render-helpers/index.js`找到下面的代码！\n```typescript\nimport { resolveFilter } from './resolve-filter'\n\nexport function installRenderHelpers (target: any) {\n  // ...\n  target._f = resolveFilter\n  // ...\n}\n```\n\n向上回溯去找`installRenderHelpers`在哪里被调用！可以找到`renderMixin`！\n\n```typescript\nexport function renderMixin (Vue: Class<Component>) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype)\n}\n```\n在`vue/src/core/instance/render-helpers/index.js`中向下寻找`resolveFilter`的本质逻辑！\n```typescript\nimport { identity, resolveAsset } from 'core/util/index'\n\n/**\n * Runtime helper for resolving filters\n * @param {string} id filter的名字\n */\nexport function resolveFilter (id: string): Function {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nexport function resolveAsset (\n  options: Object,\n  type: string,\n  id: string,\n  warnMissing?: boolean\n): any {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  const assets = options[type]\n  // check local registration variations first\n  if (hasOwn(assets, id)) return assets[id]\n\n  // 中划线转驼峰\n  const camelizedId = camelize(id)\n  if (hasOwn(assets, camelizedId)) return assets[camelizedId]\n\n  // 开头大写化\n  const PascalCaseId = capitalize(camelizedId)\n  if (hasOwn(assets, PascalCaseId)) return assets[PascalCaseId]\n\n  // fallback to prototype chain\n  // 自然回溯原型链\n  const res = assets[id] || assets[camelizedId] || assets[PascalCaseId]\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    )\n  }\n  return res\n}\n```\n\n再看`_f(\"decimal\")`，即是`resolveFilter (\"decimal\")`,\n```typescript\n// resolveAsset(this.$options, 'filters', id, true)\nresolveAsset(this.$options, 'filters', 'decimal', true);\n```\n那么对于filter来说，xx的几个参数的意思：\n```typescript\nfunction resolveAsset (\n  options: Object,  // this.$options\n  type: string, // 'filters'\n  id: string, // 'decimal'(过滤器名)\n  warnMissing?: boolean\n)\n```\n那么`const assets = options[type]`中的assets就是filters，`return assets[id]`就是返回我们自己定义的filter-callback！\n\n`_f(\"decimal\")`就返回decimal过滤器回调函数！\n\n从上面`resolveAsset`的实现，可以看出，filter的使用方式可以兼容以下几种情况：\n\n1. 正常调用，`{{price|formatUnit}}`；\n2. 中划线调用，单用驼峰法定义filter，`{{price|format-unit}}`；\n3. 小写开头调用，但定义时用开头大写，`{{price|test}}`，test对使用Test定义的filter有效；\n4. 自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！\n\n整个流程下来，可以发现：a. filter-callback没有使用bind绑定上下文；b. 没有直接挂在在vue实例上。\n\n这也是有别于`methods`的不同，看`methods`的初始化就知道：\n```typescript\nfunction initMethods (vm: Component, methods: Object) {\n  const props = vm.$options.props\n  for (const key in methods) {\n    // ...\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm)\n  }\n}\n```\n\nfilter的特点\n1. filter不会被代理到vm实例上；      \n2. filter不会绑定vm作为上下文。\n\n\n\n\n# 总结\n\n[回到顶部]\n\n- filter兼容的调用方式\n 1. 正常调用，`{{price|formatUnit}}`；\n 2. 中划线调用，单用驼峰法定义filter，`{{price|format-unit}}`；\n 3. 小写开头调用，但定义时用开头大写，`{{price|test}}`，test对使用Test定义的filter有效；\n 4. 自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！\n\n\n\n- filter的特点\n 1. filter不会被代理到vm实例上；     \n 2. filter不会绑定vm作为上下文。\n\n\n\n[回到顶部]: #大纲\n[前言]: #前言\n[filter一般调用方式有三种]: #filter一般调用方式有三种\n[_f是什么？]: #_f是什么\n[总结]: #总结\n","slug":"filter的实现原理","published":1,"updated":"2023-02-18T00:48:13.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcce00075onr0yeigjkr","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#filter%E4%B8%80%E8%88%AC%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E6%9C%89%E4%B8%89%E7%A7%8D\">filter一般调用方式有三种</a></li>\n<li><a href=\"#_f%E6%98%AF%E4%BB%80%E4%B9%88\">_f是什么？</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用如下例子，说明<code>filter</code>作为html属性一部分或元素文本一部分的解析，以及vue对<code>filter</code>解析过程的详细实现。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:data-filter</span>=<span class=\"string\">&quot;price|decimal(3)|format-unit|test&quot;</span>&gt;</span>&#123;&#123;price|decimal(3)|format-unit|test&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">methodA</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">curcoder</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;isaac&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">position</span>: <span class=\"string\">&#x27;fe&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">email</span>: <span class=\"string\">&#x27;isaacgun@outlook.com&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">filters</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">decimal</span>(<span class=\"params\">val, count = <span class=\"number\">2</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(val)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(count) || count &lt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          count = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> val.<span class=\"title function_\">toFixed</span>(count);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">formatUnit</span>(<span class=\"params\">val</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;￥&#x27;</span>, val].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Test</span>(val) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">334</span>, <span class=\"variable language_\">this</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">methodA</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> &#123; decimal &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">filters</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> num = <span class=\"title function_\">decimal</span>(<span class=\"number\">120</span>, <span class=\"number\">4</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;vm:&#x27;</span>, vm);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"filter一般调用方式有三种\"><a href=\"#filter一般调用方式有三种\" class=\"headerlink\" title=\"filter一般调用方式有三种\"></a>filter一般调用方式有三种</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ol>\n<li>在双花括号中使用：<code>&lt;span&gt;&#123;&#123;price|unit&#125;&#125;&lt;/span&gt;</code>，在解析模板阶段，使用<code>parseText</code>进行解析；</li>\n<li>在 <code>v-bind</code> 中使用：<code>&lt;span :data-format-price=&quot;price|unit&quot;&gt;&lt;/span&gt;</code>，在解析模板阶段，使用<code>processAttrs</code>进行解析；</li>\n<li>在钩子或回调函数中使用：<code>this.$options.filters.unit(this.price)</code>。</li>\n</ol>\n<p>在<code>parseText</code>中解析</p>\n<p>path: <code>vue/src/compiler/parser/text-parser.js:20</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `&lt;span&gt;&#123;&#123;price|unit&#125;&#125;&lt;/span&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultTagRE = <span class=\"regexp\">/\\&#123;\\&#123;((?:.|\\r?\\n)+?)\\&#125;\\&#125;/g</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseText</span> (</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  delimiters?: [<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">): <span class=\"title class_\">TextParseResult</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tagRE = delimiters ? <span class=\"title function_\">buildRegex</span>(delimiters) : defaultTagRE</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!tagRE.<span class=\"title function_\">test</span>(text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((match = tagRE.<span class=\"title function_\">exec</span>(text))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">log</span>(match[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exp = <span class=\"title function_\">parseFilters</span>(match[<span class=\"number\">1</span>].<span class=\"title function_\">trim</span>())</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: &quot;price|unit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>processAttrs</code>中解析</p>\n<p>path: <code>vue/src/compiler/parser/index.js:765</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `&lt;span :data-format-price=&quot;price|unit&quot;&gt;&lt;/span&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processAttrs</span> (el) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = list.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    name = rawName = list[i].<span class=\"property\">name</span></span><br><span class=\"line\">    value = list[i].<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dirRE.<span class=\"title function_\">test</span>(name)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bindRE.<span class=\"title function_\">test</span>(name)) &#123; <span class=\"comment\">// v-bind</span></span><br><span class=\"line\">        name = name.<span class=\"title function_\">replace</span>(bindRE, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value:&#x27;</span>, value)</span><br><span class=\"line\">        value = <span class=\"title function_\">parseFilters</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: &quot;price|unit&quot;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，以上两种方式去解析filter文本，最后都是调用<code>parseFilters</code>对filter文本进行解析。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `price|decimal(3)|format-unit|test`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseFilters</span> (<span class=\"attr\">exp</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (filters) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; filters.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      expression = <span class=\"title function_\">wrapFilter</span>(expression, filters[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(expression);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expression</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrapFilter</span> (<span class=\"attr\">exp</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">filter</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> i = filter.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// _f: resolveFilter</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_f(&quot;<span class=\"subst\">$&#123;filter&#125;</span>&quot;)(<span class=\"subst\">$&#123;exp&#125;</span>)`</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = filter.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = filter.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_f(&quot;<span class=\"subst\">$&#123;name&#125;</span>&quot;)(<span class=\"subst\">$&#123;exp&#125;</span><span class=\"subst\">$&#123;args !== <span class=\"string\">&#x27;)&#x27;</span> ? <span class=\"string\">&#x27;,&#x27;</span> + args : args&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: `_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))`</span></span><br></pre></td></tr></table></figure>\n<p>filter文本最后解析完还是文本！是一串有函数和参数组成的字符串，其中比较突出的就是<code>_f</code>！<br>从<code>_f(&quot;decimal&quot;)(price,3)</code>就可以大致推断<code>_f</code>是一个工厂函数，用来生产filter函数，<code>_f(&quot;decimal&quot;)</code>应该就是获取<code>decimal</code>过滤器，<br>那么大概<code>_f(&quot;decimal&quot;)(price,3)</code>就是，调用<code>decimal</code>过滤器，传入参数<code>this.price,3</code>！</p>\n<p>为什么最后解析出的只是一段函数调用的文本？</p>\n<p>因为vue的视图渲染分成两步：a. 解析视图模板，生成用于渲染整个视图的函数文本；b. 将函数文本作为视图订阅器（render-watcher）的getter（用于获取watcher的值，watcher.value）。</p>\n<p>可以直接打印一下例子中render-watcher的文本：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// path: </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompiler = <span class=\"title function_\">createCompilerCreator</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">baseCompile</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CompiledResult</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template.<span class=\"title function_\">trim</span>(), options)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">optimize</span> !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">optimize</span>(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast, options)</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(code.<span class=\"property\">render</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: code.<span class=\"property\">render</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: code.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># output:</span><br><span class=\"line\"></span><br><span class=\"line\">with(this)&#123;return _c(&#x27;main&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&#x27;span&#x27;,&#123;attrs:&#123;&quot;data-filter&quot;:_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))&#125;&#125;,[_v(_s(_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))))])])&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看见<code>_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))</code>就被包含在其中！</p>\n<h1 id=\"f是什么？\"><a href=\"#f是什么？\" class=\"headerlink\" title=\"_f是什么？\"></a>_f是什么？</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>上面推测<code>_f</code>是生产过滤器的工厂，具体看下这个<code>_f</code>是怎么来的！</p>\n<p>全局搜索<code>._f</code>，可以在<code>vue/src/core/instance/render-helpers/index.js</code>找到下面的代码！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolveFilter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./resolve-filter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">installRenderHelpers</span> (<span class=\"attr\">target</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  target.<span class=\"property\">_f</span> = resolveFilter</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>向上回溯去找<code>installRenderHelpers</code>在哪里被调用！可以找到<code>renderMixin</code>！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">renderMixin</span> (<span class=\"title class_\">Vue</span>: <span class=\"title class_\">Class</span>&lt;<span class=\"title class_\">Component</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// install runtime convenience helpers</span></span><br><span class=\"line\">  <span class=\"title function_\">installRenderHelpers</span>(<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>vue/src/core/instance/render-helpers/index.js</code>中向下寻找<code>resolveFilter</code>的本质逻辑！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; identity, resolveAsset &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;core/util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime helper for resolving filters</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; id filter的名字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveFilter</span> (<span class=\"attr\">id</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">resolveAsset</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>, <span class=\"string\">&#x27;filters&#x27;</span>, id, <span class=\"literal\">true</span>) || identity</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Resolve an asset.</span></span><br><span class=\"line\"><span class=\"comment\"> * This function is used because child instances need access</span></span><br><span class=\"line\"><span class=\"comment\"> * to assets defined in its ancestor chain.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveAsset</span> (</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  warnMissing?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> assets = options[<span class=\"keyword\">type</span>]</span><br><span class=\"line\">  <span class=\"comment\">// check local registration variations first</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, id)) <span class=\"keyword\">return</span> assets[id]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 中划线转驼峰</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> camelizedId = <span class=\"title function_\">camelize</span>(id)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, camelizedId)) <span class=\"keyword\">return</span> assets[camelizedId]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开头大写化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">PascalCaseId</span> = <span class=\"title function_\">capitalize</span>(camelizedId)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, <span class=\"title class_\">PascalCaseId</span>)) <span class=\"keyword\">return</span> assets[<span class=\"title class_\">PascalCaseId</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fallback to prototype chain</span></span><br><span class=\"line\">  <span class=\"comment\">// 自然回溯原型链</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = assets[id] || assets[camelizedId] || assets[<span class=\"title class_\">PascalCaseId</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warnMissing &amp;&amp; !res) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;Failed to resolve &#x27;</span> + <span class=\"keyword\">type</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">1</span>) + <span class=\"string\">&#x27;: &#x27;</span> + id,</span><br><span class=\"line\">      options</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看<code>_f(&quot;decimal&quot;)</code>，即是<code>resolveFilter (&quot;decimal&quot;)</code>,</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// resolveAsset(this.$options, &#x27;filters&#x27;, id, true)</span></span><br><span class=\"line\"><span class=\"title function_\">resolveAsset</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>, <span class=\"string\">&#x27;filters&#x27;</span>, <span class=\"string\">&#x27;decimal&#x27;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>那么对于filter来说，xx的几个参数的意思：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveAsset</span> (</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">Object</span>,  <span class=\"comment\">// this.$options</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"comment\">// &#x27;filters&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>, <span class=\"comment\">// &#x27;decimal&#x27;(过滤器名)</span></span><br><span class=\"line\">  warnMissing?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>那么<code>const assets = options[type]</code>中的assets就是filters，<code>return assets[id]</code>就是返回我们自己定义的filter-callback！</p>\n<p><code>_f(&quot;decimal&quot;)</code>就返回decimal过滤器回调函数！</p>\n<p>从上面<code>resolveAsset</code>的实现，可以看出，filter的使用方式可以兼容以下几种情况：</p>\n<ol>\n<li>正常调用，<code>&#123;&#123;price|formatUnit&#125;&#125;</code>；</li>\n<li>中划线调用，单用驼峰法定义filter，<code>&#123;&#123;price|format-unit&#125;&#125;</code>；</li>\n<li>小写开头调用，但定义时用开头大写，<code>&#123;&#123;price|test&#125;&#125;</code>，test对使用Test定义的filter有效；</li>\n<li>自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！</li>\n</ol>\n<p>整个流程下来，可以发现：a. filter-callback没有使用bind绑定上下文；b. 没有直接挂在在vue实例上。</p>\n<p>这也是有别于<code>methods</code>的不同，看<code>methods</code>的初始化就知道：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMethods</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">methods</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> methods) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    vm[key] = <span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span> ? noop : <span class=\"title function_\">bind</span>(methods[key], vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filter的特点</p>\n<ol>\n<li>filter不会被代理到vm实例上；      </li>\n<li>filter不会绑定vm作为上下文。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ul>\n<li>filter兼容的调用方式</li>\n</ul>\n<ol>\n<li>正常调用，<code>&#123;&#123;price|formatUnit&#125;&#125;</code>；</li>\n<li>中划线调用，单用驼峰法定义filter，<code>&#123;&#123;price|format-unit&#125;&#125;</code>；</li>\n<li>小写开头调用，但定义时用开头大写，<code>&#123;&#123;price|test&#125;&#125;</code>，test对使用Test定义的filter有效；</li>\n<li>自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！</li>\n</ol>\n<ul>\n<li>filter的特点</li>\n</ul>\n<ol>\n<li>filter不会被代理到vm实例上；     </li>\n<li>filter不会绑定vm作为上下文。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#filter%E4%B8%80%E8%88%AC%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%E6%9C%89%E4%B8%89%E7%A7%8D\">filter一般调用方式有三种</a></li>\n<li><a href=\"#_f%E6%98%AF%E4%BB%80%E4%B9%88\">_f是什么？</a></li>\n<li><a href=\"#%E6%80%BB%E7%BB%93\">总结</a></li>\n</ul>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>使用如下例子，说明<code>filter</code>作为html属性一部分或元素文本一部分的解析，以及vue对<code>filter</code>解析过程的详细实现。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">:data-filter</span>=<span class=\"string\">&quot;price|decimal(3)|format-unit|test&quot;</span>&gt;</span>&#123;&#123;price|decimal(3)|format-unit|test&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">methodA</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">curcoder</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;isaac&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">position</span>: <span class=\"string\">&#x27;fe&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">email</span>: <span class=\"string\">&#x27;isaacgun@outlook.com&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">filters</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">decimal</span>(<span class=\"params\">val, count = <span class=\"number\">2</span></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(val)) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">return</span> val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Number</span>.<span class=\"built_in\">isNaN</span>(count) || count &lt; <span class=\"number\">0</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          count = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> val.<span class=\"title function_\">toFixed</span>(count);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">formatUnit</span>(<span class=\"params\">val</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;￥&#x27;</span>, val].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Test</span>(val) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">334</span>, <span class=\"variable language_\">this</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> val;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">methodA</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> &#123; decimal &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">filters</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> num = <span class=\"title function_\">decimal</span>(<span class=\"number\">120</span>, <span class=\"number\">4</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num);</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;vm:&#x27;</span>, vm);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"filter一般调用方式有三种\"><a href=\"#filter一般调用方式有三种\" class=\"headerlink\" title=\"filter一般调用方式有三种\"></a>filter一般调用方式有三种</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ol>\n<li>在双花括号中使用：<code>&lt;span&gt;&#123;&#123;price|unit&#125;&#125;&lt;/span&gt;</code>，在解析模板阶段，使用<code>parseText</code>进行解析；</li>\n<li>在 <code>v-bind</code> 中使用：<code>&lt;span :data-format-price=&quot;price|unit&quot;&gt;&lt;/span&gt;</code>，在解析模板阶段，使用<code>processAttrs</code>进行解析；</li>\n<li>在钩子或回调函数中使用：<code>this.$options.filters.unit(this.price)</code>。</li>\n</ol>\n<p>在<code>parseText</code>中解析</p>\n<p>path: <code>vue/src/compiler/parser/text-parser.js:20</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `&lt;span&gt;&#123;&#123;price|unit&#125;&#125;&lt;/span&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> defaultTagRE = <span class=\"regexp\">/\\&#123;\\&#123;((?:.|\\r?\\n)+?)\\&#125;\\&#125;/g</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseText</span> (</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  delimiters?: [<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>]</span><br><span class=\"line\">): <span class=\"title class_\">TextParseResult</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tagRE = delimiters ? <span class=\"title function_\">buildRegex</span>(delimiters) : defaultTagRE</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!tagRE.<span class=\"title function_\">test</span>(text)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ((match = tagRE.<span class=\"title function_\">exec</span>(text))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">log</span>(match[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> exp = <span class=\"title function_\">parseFilters</span>(match[<span class=\"number\">1</span>].<span class=\"title function_\">trim</span>())</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: &quot;price|unit&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>processAttrs</code>中解析</p>\n<p>path: <code>vue/src/compiler/parser/index.js:765</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `&lt;span :data-format-price=&quot;price|unit&quot;&gt;&lt;/span&gt;`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processAttrs</span> (el) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = list.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    name = rawName = list[i].<span class=\"property\">name</span></span><br><span class=\"line\">    value = list[i].<span class=\"property\">value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dirRE.<span class=\"title function_\">test</span>(name)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bindRE.<span class=\"title function_\">test</span>(name)) &#123; <span class=\"comment\">// v-bind</span></span><br><span class=\"line\">        name = name.<span class=\"title function_\">replace</span>(bindRE, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;value:&#x27;</span>, value)</span><br><span class=\"line\">        value = <span class=\"title function_\">parseFilters</span>(value)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: &quot;price|unit&quot;</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，以上两种方式去解析filter文本，最后都是调用<code>parseFilters</code>对filter文本进行解析。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// parse `price|decimal(3)|format-unit|test`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseFilters</span> (<span class=\"attr\">exp</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (filters) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; filters.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      expression = <span class=\"title function_\">wrapFilter</span>(expression, filters[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(expression);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> expression</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrapFilter</span> (<span class=\"attr\">exp</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">filter</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> i = filter.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// _f: resolveFilter</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_f(&quot;<span class=\"subst\">$&#123;filter&#125;</span>&quot;)(<span class=\"subst\">$&#123;exp&#125;</span>)`</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = filter.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = filter.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`_f(&quot;<span class=\"subst\">$&#123;name&#125;</span>&quot;)(<span class=\"subst\">$&#123;exp&#125;</span><span class=\"subst\">$&#123;args !== <span class=\"string\">&#x27;)&#x27;</span> ? <span class=\"string\">&#x27;,&#x27;</span> + args : args&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// output: `_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))`</span></span><br></pre></td></tr></table></figure>\n<p>filter文本最后解析完还是文本！是一串有函数和参数组成的字符串，其中比较突出的就是<code>_f</code>！<br>从<code>_f(&quot;decimal&quot;)(price,3)</code>就可以大致推断<code>_f</code>是一个工厂函数，用来生产filter函数，<code>_f(&quot;decimal&quot;)</code>应该就是获取<code>decimal</code>过滤器，<br>那么大概<code>_f(&quot;decimal&quot;)(price,3)</code>就是，调用<code>decimal</code>过滤器，传入参数<code>this.price,3</code>！</p>\n<p>为什么最后解析出的只是一段函数调用的文本？</p>\n<p>因为vue的视图渲染分成两步：a. 解析视图模板，生成用于渲染整个视图的函数文本；b. 将函数文本作为视图订阅器（render-watcher）的getter（用于获取watcher的值，watcher.value）。</p>\n<p>可以直接打印一下例子中render-watcher的文本：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// path: </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompiler = <span class=\"title function_\">createCompilerCreator</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">baseCompile</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CompiledResult</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template.<span class=\"title function_\">trim</span>(), options)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">optimize</span> !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">optimize</span>(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast, options)</span><br><span class=\"line\">  <span class=\"title function_\">log</span>(code.<span class=\"property\">render</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: code.<span class=\"property\">render</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: code.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># output:</span><br><span class=\"line\"></span><br><span class=\"line\">with(this)&#123;return _c(&#x27;main&#x27;,&#123;attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125;&#125;,[_c(&#x27;span&#x27;,&#123;attrs:&#123;&quot;data-filter&quot;:_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))&#125;&#125;,[_v(_s(_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))))])])&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看见<code>_f(&quot;test&quot;)(_f(&quot;format-unit&quot;)(_f(&quot;decimal&quot;)(price,3)))</code>就被包含在其中！</p>\n<h1 id=\"f是什么？\"><a href=\"#f是什么？\" class=\"headerlink\" title=\"_f是什么？\"></a>_f是什么？</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>上面推测<code>_f</code>是生产过滤器的工厂，具体看下这个<code>_f</code>是怎么来的！</p>\n<p>全局搜索<code>._f</code>，可以在<code>vue/src/core/instance/render-helpers/index.js</code>找到下面的代码！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolveFilter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./resolve-filter&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">installRenderHelpers</span> (<span class=\"attr\">target</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  target.<span class=\"property\">_f</span> = resolveFilter</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>向上回溯去找<code>installRenderHelpers</code>在哪里被调用！可以找到<code>renderMixin</code>！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">renderMixin</span> (<span class=\"title class_\">Vue</span>: <span class=\"title class_\">Class</span>&lt;<span class=\"title class_\">Component</span>&gt;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// install runtime convenience helpers</span></span><br><span class=\"line\">  <span class=\"title function_\">installRenderHelpers</span>(<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>vue/src/core/instance/render-helpers/index.js</code>中向下寻找<code>resolveFilter</code>的本质逻辑！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; identity, resolveAsset &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;core/util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime helper for resolving filters</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; id filter的名字</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveFilter</span> (<span class=\"attr\">id</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">resolveAsset</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>, <span class=\"string\">&#x27;filters&#x27;</span>, id, <span class=\"literal\">true</span>) || identity</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Resolve an asset.</span></span><br><span class=\"line\"><span class=\"comment\"> * This function is used because child instances need access</span></span><br><span class=\"line\"><span class=\"comment\"> * to assets defined in its ancestor chain.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">resolveAsset</span> (</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">Object</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  warnMissing?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id !== <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> assets = options[<span class=\"keyword\">type</span>]</span><br><span class=\"line\">  <span class=\"comment\">// check local registration variations first</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, id)) <span class=\"keyword\">return</span> assets[id]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 中划线转驼峰</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> camelizedId = <span class=\"title function_\">camelize</span>(id)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, camelizedId)) <span class=\"keyword\">return</span> assets[camelizedId]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开头大写化</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">PascalCaseId</span> = <span class=\"title function_\">capitalize</span>(camelizedId)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">hasOwn</span>(assets, <span class=\"title class_\">PascalCaseId</span>)) <span class=\"keyword\">return</span> assets[<span class=\"title class_\">PascalCaseId</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fallback to prototype chain</span></span><br><span class=\"line\">  <span class=\"comment\">// 自然回溯原型链</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = assets[id] || assets[camelizedId] || assets[<span class=\"title class_\">PascalCaseId</span>]</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; warnMissing &amp;&amp; !res) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;Failed to resolve &#x27;</span> + <span class=\"keyword\">type</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">1</span>) + <span class=\"string\">&#x27;: &#x27;</span> + id,</span><br><span class=\"line\">      options</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再看<code>_f(&quot;decimal&quot;)</code>，即是<code>resolveFilter (&quot;decimal&quot;)</code>,</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// resolveAsset(this.$options, &#x27;filters&#x27;, id, true)</span></span><br><span class=\"line\"><span class=\"title function_\">resolveAsset</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>, <span class=\"string\">&#x27;filters&#x27;</span>, <span class=\"string\">&#x27;decimal&#x27;</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>那么对于filter来说，xx的几个参数的意思：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveAsset</span> (</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">Object</span>,  <span class=\"comment\">// this.$options</span></span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"built_in\">string</span>, <span class=\"comment\">// &#x27;filters&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>, <span class=\"comment\">// &#x27;decimal&#x27;(过滤器名)</span></span><br><span class=\"line\">  warnMissing?: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>那么<code>const assets = options[type]</code>中的assets就是filters，<code>return assets[id]</code>就是返回我们自己定义的filter-callback！</p>\n<p><code>_f(&quot;decimal&quot;)</code>就返回decimal过滤器回调函数！</p>\n<p>从上面<code>resolveAsset</code>的实现，可以看出，filter的使用方式可以兼容以下几种情况：</p>\n<ol>\n<li>正常调用，<code>&#123;&#123;price|formatUnit&#125;&#125;</code>；</li>\n<li>中划线调用，单用驼峰法定义filter，<code>&#123;&#123;price|format-unit&#125;&#125;</code>；</li>\n<li>小写开头调用，但定义时用开头大写，<code>&#123;&#123;price|test&#125;&#125;</code>，test对使用Test定义的filter有效；</li>\n<li>自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！</li>\n</ol>\n<p>整个流程下来，可以发现：a. filter-callback没有使用bind绑定上下文；b. 没有直接挂在在vue实例上。</p>\n<p>这也是有别于<code>methods</code>的不同，看<code>methods</code>的初始化就知道：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMethods</span> (<span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>, <span class=\"attr\">methods</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> methods) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    vm[key] = <span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span> ? noop : <span class=\"title function_\">bind</span>(methods[key], vm)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filter的特点</p>\n<ol>\n<li>filter不会被代理到vm实例上；      </li>\n<li>filter不会绑定vm作为上下文。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ul>\n<li>filter兼容的调用方式</li>\n</ul>\n<ol>\n<li>正常调用，<code>&#123;&#123;price|formatUnit&#125;&#125;</code>；</li>\n<li>中划线调用，单用驼峰法定义filter，<code>&#123;&#123;price|format-unit&#125;&#125;</code>；</li>\n<li>小写开头调用，但定义时用开头大写，<code>&#123;&#123;price|test&#125;&#125;</code>，test对使用Test定义的filter有效；</li>\n<li>自然回溯原型链，但对于filter作用不大，除非是与原型链上属性或函数同名！</li>\n</ol>\n<ul>\n<li>filter的特点</li>\n</ul>\n<ol>\n<li>filter不会被代理到vm实例上；     </li>\n<li>filter不会绑定vm作为上下文。</li>\n</ol>"},{"title":"hexo：从0开始与踩坑实录","date":"2021-03-16T06:46:49.000Z","description":" ","_content":"\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件(gittalk)\n\n仓库：https://github.com/gitalk/gitalk\n\nNexT已经内置，只需要修改NexT配置文件！\n\n```yml\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id:  # GitHub repo owner\n  repo:  # Repository name to store issues\n  client_id:  # GitHub Application Client ID\n  client_secret:  # GitHub Application Client Secret\n  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: false # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n```\n\n上面配置 client_id 和 client_secret 需要在github注册 OAuth App: \n\nhttps://github.com/settings/applications/new\n\n![](Snipaste_2023-02-16_13-28-44.png)\n\n```yml\nApplication name： # 应用名称，随意填写即可\nHomepage URL： # 你的网站地址，如https://yourname.github.io\nApplication description # 描述，随意填写即可\nAuthorization callback URL：# 你的网站地址，如https://yourname.github.io\n```\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","source":"_posts/hexo：从0开始与踩坑实录.md","raw":"---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: \" \"\n---\n\n# 下载插件\n\n## curl下载github zip链接\n\n```\ncurl -LJO https://github.com/theme-next/theme-next-fancybox3 \n```\n\n## unzip\n\n```\nunzip theme-next-fancybox3-master.zip\n```\n\n# page布局有什么用？\n\n官文档说的布局概念\n\n> ![](Snipaste_2023-02-14_21-58-08.png)\n\n**布局概念含糊不清！**\n\n# 为什么主页将所有文章以详情的形式全列出来了？\n\n文章没有添加 `description` 属性。形如\n\n```yml\n---\ntitle: hexo：从0开始与踩坑实录\ndate: 2021-03-16 14:46:49\ncategories: \n- hexo\ntags:\n- hexo\ndescription: 记录入坑hexo的过程中遇到的问题与最终解决\n---\n```\n\n只有添加 `description`并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！\n\n## 参考\n\n- [hexo小技巧-首页显示文章摘要及图片](https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/)\n\n\n\n# 文章中的图片的保存位置以及使用方式\n\n\n## post_asset_folder\n\n开启 `post_asset_folder`，将生成文章同名目录。可以使用路径访问此目录下的资源！\n\n```yml\n# _config.yml\npost_asset_folder: true\n```\n\n## 使用Markdown语法\n\n\n```yml\n# _config.yml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n启用后，资源图片将会被自动解析为其对应文章的路径。\n例如： image.jpg 位置为 `/2020/01/02/foo/image.jpg` ，这表示它是 `/2020/01/02/foo/` 文章的一张资源图片， `![](image.jpg)` 将会被解析为 `<img src=\"/2020/01/02/foo/image.jpg\"> `。\n\n## 参考\n\n- hexo博客中如何插入图片: https://cloud.tencent.com/developer/article/1736563\n- 资源文件夹: https://hexo.io/zh-cn/docs/asset-folders\n\n\n\n# Next如何添加分类页与标签页？\n\n## 将Next配置文件中的Menu开启\n\n路径：themes/next/_config.yml\n\n将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！\n\n```yml\n# ---------------------------------------------------------------\n# Menu Settings\n# ---------------------------------------------------------------\n\n# Usage: `Key: /link/ || icon`\n# Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.\n# Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.\n# External url should start with http:// or https://\nmenu:\n  home: / || fa fa-home\n  # about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  # schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n## 添加页面\n\n添加分类页面。执行下面命令将会生成 source/categories/index.md\n\n```shell\nhexo new page categories\n```\n\ncategories/index.md 的内容如下，还需做些必要修改：添加 `type: \"categories\"`\n\n```yml\n---\ntitle: categories\ndate: 2023-02-14 16:56:26\ntype: \"categories\"\n---\n```\n\n标签页的添加与以上大部分相似！需要注意的是：\n\n- 标签页创建：`hexo new page tags`；\n- 标签页属性修改：`type: \"tags\"`\n\n## 使用分类\n\n在 `source/_posts/` 目录的文章中的yml配置，添加 `categories` 属性。如下面例子。\n\n文章添加标签后，再编译就会生成对应的标签文件！\n\n\n```yml\n---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\ndescription: ' '\n---\n```\n\n## 编译\n\n编译后继承生成分类、标签目录，见下：\n\n```shell\ncategories\n├── hexo\n|  └── index.html\n├── index.html\n└── 算法题\n   └── index.html\n```\n\n\n-------------\n\n\n# 预览图片\n\n## 打开 fancybox 开关\n\n```yml\n# NexT _config.yml\nfancybox: true\n```\n\n## 加载资源\n\n### 方式1：CDN\n\n打开 NexT 配置文件FancyBox资源配置的注释即可！\n\n```yml\n# NexT _config.yml\n# FancyBox\n# jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js\n# fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js\n# fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css\n```\n\n\n### 方式2：下载 fancybox 插件资源\n\n将 fancybox 包下载到 cd next/source/lib，并将资源解压（假如需要）后命名为 fancybox 即可！\n\nfancybox包：https://github.com/theme-next/theme-next-fancybox3\n\n\n# 评论插件(gittalk)\n\n仓库：https://github.com/gitalk/gitalk\n\nNexT已经内置，只需要修改NexT配置文件！\n\n```yml\n# Gitalk\n# For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk\ngitalk:\n  enable: true\n  github_id:  # GitHub repo owner\n  repo:  # Repository name to store issues\n  client_id:  # GitHub Application Client ID\n  client_secret:  # GitHub Application Client Secret\n  admin_user:  # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: false # Facebook-like distraction free mode\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language: zh-CN\n```\n\n上面配置 client_id 和 client_secret 需要在github注册 OAuth App: \n\nhttps://github.com/settings/applications/new\n\n![](Snipaste_2023-02-16_13-28-44.png)\n\n```yml\nApplication name： # 应用名称，随意填写即可\nHomepage URL： # 你的网站地址，如https://yourname.github.io\nApplication description # 描述，随意填写即可\nAuthorization callback URL：# 你的网站地址，如https://yourname.github.io\n```\n\n## 参考\n\n- [hexo博客 NexT 7.7.0以后版本 gitalk配置](https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/)\n- [Hexo 博客增加Valine/Gitalk评论插件](https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/)\n- [github:gitalk/gitalk](https://github.com/gitalk/gitalk)\n\n# 参考\n\n- [NexT官方文档](https://theme-next.js.org/)\n- [初步了解Hexo站点的布局](https://www.jianshu.com/p/5a1e6d8c83af)\n- [hexo布局架构及功能分析](https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/)\n- [Hexo使用攻略-添加分类及标签](https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/)","slug":"hexo：从0开始与踩坑实录","published":1,"updated":"2023-02-16T18:58:25.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccg00085onrcnnnb1nr","content":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件-gittalk\"><a href=\"#评论插件-gittalk\" class=\"headerlink\" title=\"评论插件(gittalk)\"></a>评论插件(gittalk)</h1><p>仓库：<a href=\"https://github.com/gitalk/gitalk\">https://github.com/gitalk/gitalk</a></p>\n<p>NexT已经内置，只需要修改NexT配置文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">github_id:</span>  <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>  <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>  <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>  <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">admin_user:</span>  <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  <span class=\"attr\">distraction_free_mode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置 client_id 和 client_secret 需要在github注册 OAuth App: </p>\n<p><a href=\"https://github.com/settings/applications/new\">https://github.com/settings/applications/new</a></p>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-16_13-28-44.png\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">name：</span> <span class=\"comment\"># 应用名称，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Homepage</span> <span class=\"string\">URL：</span> <span class=\"comment\"># 你的网站地址，如https://yourname.github.io</span></span><br><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">description</span> <span class=\"comment\"># 描述，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Authorization</span> <span class=\"string\">callback</span> <span class=\"string\">URL：#</span> <span class=\"string\">你的网站地址，如https://yourname.github.io</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"下载插件\"><a href=\"#下载插件\" class=\"headerlink\" title=\"下载插件\"></a>下载插件</h1><h2 id=\"curl下载github-zip链接\"><a href=\"#curl下载github-zip链接\" class=\"headerlink\" title=\"curl下载github zip链接\"></a>curl下载github zip链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LJO https://github.com/theme-next/theme-next-fancybox3 </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unzip\"><a href=\"#unzip\" class=\"headerlink\" title=\"unzip\"></a>unzip</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip theme-next-fancybox3-master.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"page布局有什么用？\"><a href=\"#page布局有什么用？\" class=\"headerlink\" title=\"page布局有什么用？\"></a>page布局有什么用？</h1><p>官文档说的布局概念</p>\n<blockquote>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-14_21-58-08.png\"></p>\n</blockquote>\n<p><strong>布局概念含糊不清！</strong></p>\n<h1 id=\"为什么主页将所有文章以详情的形式全列出来了？\"><a href=\"#为什么主页将所有文章以详情的形式全列出来了？\" class=\"headerlink\" title=\"为什么主页将所有文章以详情的形式全列出来了？\"></a>为什么主页将所有文章以详情的形式全列出来了？</h1><p>文章没有添加 <code>description</code> 属性。形如</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">hexo：从0开始与踩坑实录</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-03-16 14:46:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">记录入坑hexo的过程中遇到的问题与最终解决</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>只有添加 <code>description</code>并且字段值不为空（可以使用空格占位），才会以概览模式在主页列出所有文章！</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://ryderchan.github.io/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/\">hexo小技巧-首页显示文章摘要及图片</a></li>\n</ul>\n<h1 id=\"文章中的图片的保存位置以及使用方式\"><a href=\"#文章中的图片的保存位置以及使用方式\" class=\"headerlink\" title=\"文章中的图片的保存位置以及使用方式\"></a>文章中的图片的保存位置以及使用方式</h1><h2 id=\"post-asset-folder\"><a href=\"#post-asset-folder\" class=\"headerlink\" title=\"post_asset_folder\"></a>post_asset_folder</h2><p>开启 <code>post_asset_folder</code>，将生成文章同名目录。可以使用路径访问此目录下的资源！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用Markdown语法\"><a href=\"#使用Markdown语法\" class=\"headerlink\" title=\"使用Markdown语法\"></a>使用Markdown语法</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： image.jpg 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; </code>。</p>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>hexo博客中如何插入图片: <a href=\"https://cloud.tencent.com/developer/article/1736563\">https://cloud.tencent.com/developer/article/1736563</a></li>\n<li>资源文件夹: <a href=\"https://hexo.io/zh-cn/docs/asset-folders\">https://hexo.io/zh-cn/docs/asset-folders</a></li>\n</ul>\n<h1 id=\"Next如何添加分类页与标签页？\"><a href=\"#Next如何添加分类页与标签页？\" class=\"headerlink\" title=\"Next如何添加分类页与标签页？\"></a>Next如何添加分类页与标签页？</h1><h2 id=\"将Next配置文件中的Menu开启\"><a href=\"#将Next配置文件中的Menu开启\" class=\"headerlink\" title=\"将Next配置文件中的Menu开启\"></a>将Next配置文件中的Menu开启</h2><p>路径：themes&#x2F;next&#x2F;_config.yml</p>\n<p>将配置开启后，就可以在页面上看到 分类页 和 标签页 的入口。但是仅仅只有入口没有内容！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Menu Settings</span></span><br><span class=\"line\"><span class=\"comment\"># ---------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-sensitive.</span></span><br><span class=\"line\"><span class=\"comment\"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class=\"line\"><span class=\"comment\"># External url should start with http:// or https://</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\"># about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\"># schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h2><p>添加分类页面。执行下面命令将会生成 source&#x2F;categories&#x2F;index.md</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n\n<p>categories&#x2F;index.md 的内容如下，还需做些必要修改：添加 <code>type: &quot;categories&quot;</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2023-02-14 16:56:26</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>标签页的添加与以上大部分相似！需要注意的是：</p>\n<ul>\n<li>标签页创建：<code>hexo new page tags</code>；</li>\n<li>标签页属性修改：<code>type: &quot;tags&quot;</code></li>\n</ul>\n<h2 id=\"使用分类\"><a href=\"#使用分类\" class=\"headerlink\" title=\"使用分类\"></a>使用分类</h2><p>在 <code>source/_posts/</code> 目录的文章中的yml配置，添加 <code>categories</code> 属性。如下面例子。</p>\n<p>文章添加标签后，再编译就会生成对应的标签文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">面试题62.</span> <span class=\"string\">圆圈中最后剩下的数字</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-04-17 02:13:49</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> </span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">算法题</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">LCOF</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>编译后继承生成分类、标签目录，见下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories</span><br><span class=\"line\">├── hexo</span><br><span class=\"line\">|  └── index.html</span><br><span class=\"line\">├── index.html</span><br><span class=\"line\">└── 算法题</span><br><span class=\"line\">   └── index.html</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"预览图片\"><a href=\"#预览图片\" class=\"headerlink\" title=\"预览图片\"></a>预览图片</h1><h2 id=\"打开-fancybox-开关\"><a href=\"#打开-fancybox-开关\" class=\"headerlink\" title=\"打开 fancybox 开关\"></a>打开 fancybox 开关</h2><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"attr\">fancybox:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载资源\"><a href=\"#加载资源\" class=\"headerlink\" title=\"加载资源\"></a>加载资源</h2><h3 id=\"方式1：CDN\"><a href=\"#方式1：CDN\" class=\"headerlink\" title=\"方式1：CDN\"></a>方式1：CDN</h3><p>打开 NexT 配置文件FancyBox资源配置的注释即可！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># NexT _config.yml</span></span><br><span class=\"line\"><span class=\"comment\"># FancyBox</span></span><br><span class=\"line\"><span class=\"comment\"># jquery: //cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class=\"line\"><span class=\"comment\"># fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"方式2：下载-fancybox-插件资源\"><a href=\"#方式2：下载-fancybox-插件资源\" class=\"headerlink\" title=\"方式2：下载 fancybox 插件资源\"></a>方式2：下载 fancybox 插件资源</h3><p>将 fancybox 包下载到 cd next&#x2F;source&#x2F;lib，并将资源解压（假如需要）后命名为 fancybox 即可！</p>\n<p>fancybox包：<a href=\"https://github.com/theme-next/theme-next-fancybox3\">https://github.com/theme-next/theme-next-fancybox3</a></p>\n<h1 id=\"评论插件-gittalk\"><a href=\"#评论插件-gittalk\" class=\"headerlink\" title=\"评论插件(gittalk)\"></a>评论插件(gittalk)</h1><p>仓库：<a href=\"https://github.com/gitalk/gitalk\">https://github.com/gitalk/gitalk</a></p>\n<p>NexT已经内置，只需要修改NexT配置文件！</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Gitalk</span></span><br><span class=\"line\"><span class=\"comment\"># For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">github_id:</span>  <span class=\"comment\"># GitHub repo owner</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span>  <span class=\"comment\"># Repository name to store issues</span></span><br><span class=\"line\">  <span class=\"attr\">client_id:</span>  <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">client_secret:</span>  <span class=\"comment\"># GitHub Application Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">admin_user:</span>  <span class=\"comment\"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class=\"line\">  <span class=\"attr\">distraction_free_mode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Facebook-like distraction free mode</span></span><br><span class=\"line\">  <span class=\"comment\"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class=\"line\">  <span class=\"comment\"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class=\"line\">  <span class=\"comment\"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class=\"line\">  <span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置 client_id 和 client_secret 需要在github注册 OAuth App: </p>\n<p><a href=\"https://github.com/settings/applications/new\">https://github.com/settings/applications/new</a></p>\n<p><img src=\"/blog/2021/03/16/hexo%EF%BC%9A%E4%BB%8E0%E5%BC%80%E5%A7%8B%E4%B8%8E%E8%B8%A9%E5%9D%91%E5%AE%9E%E5%BD%95/Snipaste_2023-02-16_13-28-44.png\"></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">name：</span> <span class=\"comment\"># 应用名称，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Homepage</span> <span class=\"string\">URL：</span> <span class=\"comment\"># 你的网站地址，如https://yourname.github.io</span></span><br><span class=\"line\"><span class=\"string\">Application</span> <span class=\"string\">description</span> <span class=\"comment\"># 描述，随意填写即可</span></span><br><span class=\"line\"><span class=\"string\">Authorization</span> <span class=\"string\">callback</span> <span class=\"string\">URL：#</span> <span class=\"string\">你的网站地址，如https://yourname.github.io</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考-2\"><a href=\"#参考-2\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://chenfeng2000.github.io/2020/01/30/NexT-7-7-0%E4%BB%A5%E5%90%8E%E7%89%88%E6%9C%AC-gitalk%E9%85%8D%E7%BD%AE/\">hexo博客 NexT 7.7.0以后版本 gitalk配置</a></li>\n<li><a href=\"https://blog.mmzi.online/2021/07/10/Hexo-%E5%8D%9A%E5%AE%A2%E5%A2%9E%E5%8A%A0Valine%E5%92%8CGitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/\">Hexo 博客增加Valine&#x2F;Gitalk评论插件</a></li>\n<li><a href=\"https://github.com/gitalk/gitalk\">github:gitalk&#x2F;gitalk</a></li>\n</ul>\n<h1 id=\"参考-3\"><a href=\"#参考-3\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://theme-next.js.org/\">NexT官方文档</a></li>\n<li><a href=\"https://www.jianshu.com/p/5a1e6d8c83af\">初步了解Hexo站点的布局</a></li>\n<li><a href=\"https://ben286.github.io/2018/08/21/%E5%85%B6%E4%BB%96/hexo%E5%B8%83%E5%B1%80%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/\">hexo布局架构及功能分析</a></li>\n<li><a href=\"https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/\">Hexo使用攻略-添加分类及标签</a></li>\n</ul>\n"},{"title":"nextTick实现原理","date":"2019-11-20T00:41:47.000Z","_content":"\n\n# 大纲\n\n- [前言](#前言)\n- [nextTick的实现逻辑](#nextTick的实现逻辑)\n- [timerFunc是什么？](#timerFunc是什么？)\n- [timerFunc的实现](#timerFunc的实现)\n\n<!-- more -->\n\n# 前言\n\n- vue版本：`2.6.9`；\n- path：`vue/src/core/util/next-tick.js`；\n\n&nbsp;\n\n# nextTick的实现逻辑\n\n```typescript\nconst callbacks = []\nlet pending = false\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n进入nextTick，首先会点cb进行封装，涉及三个控制流！\n\n1. 如果存在cb，则调用cb函数：`cb.call(ctx)`；\n2. 如果`_resolve`存在，则调用 `_resolve(ctx)`，`_resolve`是`Promise.resolve`的引用！这是在当前环境支持`Promise`；\n3. 不做任何处理。\n\n在将`cb`推入`callbacks`后，判断当前是不是正在执行上次`callbacks`的回调函数，根据pending（待定）来判断，当前是否要执行新的`callbacks`的cb！\n\n\n\n先假设当前`pending = fakse`，那么进入`if (!pending)`，执行`timerFunc()`！\n\n&nbsp;\n\n# timerFunc是什么？\n\n`timerFunc`，是一个可将当前`callbacks`作为一个回调函数（这个包裹的函数就是下面的`flushCallbacks`），入队微/宏任务队列中，等待主线程代码执行完毕之后执行！\n\n```typescript\nfunction flushCallbacks () {\n  // 立刻执行 “pending = false” 意味着，在主线程代码执行完，\n  // 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始\n  // 就可以进入 \"if (!pending)\" 控制流再次执行触发 “timerFunc()”，\n  // 将新的“flushCallbacks” 放进微/宏任务队列\n  // 而不是等到 上一次 “callbacks” 的所有cb执行完之后\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n\n\n`timerFunc`根据当前环境的支持情况可能用`Promise`、`MutationObserver`、`setImmediate`、`setTimeout`实现！优先级：`Promise` > `MutationObserver` > `setImmediate` > `setTimeout`。\n\n- 微任务（micro task）：Promise、MutationObserver；\n- 宏任务（macro task）：setImmediate、setTimeout。\n\n任务调用优先级：微任务 > 宏任务。\n\n\n\n关于为什么这样的优先级，vue做了说明：\n\n> Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).\n>\n> 这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。\n\n&nbsp;\n\n\n# timerFunc的实现\n\n```typescript\nlet timerFunc\n```\n\n\n\n### Promise实现timerFunc\n\n```typescript\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    // 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，\n    // 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，\n    // 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### MutationObserver实现timerFunc\n\n```typescript\nelse if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  // 在本地Promise不可用的地方使用MutationObserver，\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // （＃6466 MutationObserver在IE11中不可靠）\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### setImmediate实现timerFunc\n\n```typescript\nelse if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  // 退回到setImmediate。\n  // 从技术上讲，它利用（宏）任务队列，\n  // 但它仍然是比setTimeout更好的选择。\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n}\n```\n\n\n\n### setTimeout实现timerFunc\n\n```typescript\nelse {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n","source":"_posts/nextTick实现原理.md","raw":"---\ntitle: nextTick实现原理\ndate: 2019-11-20 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\n---\n\n\n# 大纲\n\n- [前言](#前言)\n- [nextTick的实现逻辑](#nextTick的实现逻辑)\n- [timerFunc是什么？](#timerFunc是什么？)\n- [timerFunc的实现](#timerFunc的实现)\n\n<!-- more -->\n\n# 前言\n\n- vue版本：`2.6.9`；\n- path：`vue/src/core/util/next-tick.js`；\n\n&nbsp;\n\n# nextTick的实现逻辑\n\n```typescript\nconst callbacks = []\nlet pending = false\n\nexport function nextTick (cb?: Function, ctx?: Object) {\n  let _resolve\n  callbacks.push(() => {\n    if (cb) {\n      try {\n        cb.call(ctx)\n      } catch (e) {\n        handleError(e, ctx, 'nextTick')\n      }\n    } else if (_resolve) {\n      _resolve(ctx)\n    }\n  })\n  if (!pending) {\n    pending = true\n    timerFunc()\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(resolve => {\n      _resolve = resolve\n    })\n  }\n}\n```\n\n进入nextTick，首先会点cb进行封装，涉及三个控制流！\n\n1. 如果存在cb，则调用cb函数：`cb.call(ctx)`；\n2. 如果`_resolve`存在，则调用 `_resolve(ctx)`，`_resolve`是`Promise.resolve`的引用！这是在当前环境支持`Promise`；\n3. 不做任何处理。\n\n在将`cb`推入`callbacks`后，判断当前是不是正在执行上次`callbacks`的回调函数，根据pending（待定）来判断，当前是否要执行新的`callbacks`的cb！\n\n\n\n先假设当前`pending = fakse`，那么进入`if (!pending)`，执行`timerFunc()`！\n\n&nbsp;\n\n# timerFunc是什么？\n\n`timerFunc`，是一个可将当前`callbacks`作为一个回调函数（这个包裹的函数就是下面的`flushCallbacks`），入队微/宏任务队列中，等待主线程代码执行完毕之后执行！\n\n```typescript\nfunction flushCallbacks () {\n  // 立刻执行 “pending = false” 意味着，在主线程代码执行完，\n  // 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始\n  // 就可以进入 \"if (!pending)\" 控制流再次执行触发 “timerFunc()”，\n  // 将新的“flushCallbacks” 放进微/宏任务队列\n  // 而不是等到 上一次 “callbacks” 的所有cb执行完之后\n  pending = false\n  const copies = callbacks.slice(0)\n  callbacks.length = 0\n  for (let i = 0; i < copies.length; i++) {\n    copies[i]()\n  }\n}\n```\n\n\n\n`timerFunc`根据当前环境的支持情况可能用`Promise`、`MutationObserver`、`setImmediate`、`setTimeout`实现！优先级：`Promise` > `MutationObserver` > `setImmediate` > `setTimeout`。\n\n- 微任务（micro task）：Promise、MutationObserver；\n- 宏任务（macro task）：setImmediate、setTimeout。\n\n任务调用优先级：微任务 > 宏任务。\n\n\n\n关于为什么这样的优先级，vue做了说明：\n\n> Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).\n>\n> 这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。\n\n&nbsp;\n\n\n# timerFunc的实现\n\n```typescript\nlet timerFunc\n```\n\n\n\n### Promise实现timerFunc\n\n```typescript\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  const p = Promise.resolve()\n  timerFunc = () => {\n    p.then(flushCallbacks)\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    // 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，\n    // 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，\n    // 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。\n    if (isIOS) setTimeout(noop)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### MutationObserver实现timerFunc\n\n```typescript\nelse if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  // 在本地Promise不可用的地方使用MutationObserver，\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // （＃6466 MutationObserver在IE11中不可靠）\n  let counter = 1\n  const observer = new MutationObserver(flushCallbacks)\n  const textNode = document.createTextNode(String(counter))\n  observer.observe(textNode, {\n    characterData: true\n  })\n  timerFunc = () => {\n    counter = (counter + 1) % 2\n    textNode.data = String(counter)\n  }\n  isUsingMicroTask = true\n}\n```\n\n\n\n### setImmediate实现timerFunc\n\n```typescript\nelse if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  // 退回到setImmediate。\n  // 从技术上讲，它利用（宏）任务队列，\n  // 但它仍然是比setTimeout更好的选择。\n  timerFunc = () => {\n    setImmediate(flushCallbacks)\n  }\n}\n```\n\n\n\n### setTimeout实现timerFunc\n\n```typescript\nelse {\n  // Fallback to setTimeout.\n  timerFunc = () => {\n    setTimeout(flushCallbacks, 0)\n  }\n}\n```\n","slug":"nextTick实现原理","published":1,"updated":"2023-02-18T00:51:03.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcci000b5onreuggb97q","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#nextTick%E7%9A%84%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">nextTick的实现逻辑</a></li>\n<li><a href=\"#timerFunc%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">timerFunc是什么？</a></li>\n<li><a href=\"#timerFunc%E7%9A%84%E5%AE%9E%E7%8E%B0\">timerFunc的实现</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>vue版本：<code>2.6.9</code>；</li>\n<li>path：<code>vue/src/core/util/next-tick.js</code>；</li>\n</ul>\n<p>&amp;nbsp;</p>\n<h1 id=\"nextTick的实现逻辑\"><a href=\"#nextTick的实现逻辑\" class=\"headerlink\" title=\"nextTick的实现逻辑\"></a>nextTick的实现逻辑</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入nextTick，首先会点cb进行封装，涉及三个控制流！</p>\n<ol>\n<li>如果存在cb，则调用cb函数：<code>cb.call(ctx)</code>；</li>\n<li>如果<code>_resolve</code>存在，则调用 <code>_resolve(ctx)</code>，<code>_resolve</code>是<code>Promise.resolve</code>的引用！这是在当前环境支持<code>Promise</code>；</li>\n<li>不做任何处理。</li>\n</ol>\n<p>在将<code>cb</code>推入<code>callbacks</code>后，判断当前是不是正在执行上次<code>callbacks</code>的回调函数，根据pending（待定）来判断，当前是否要执行新的<code>callbacks</code>的cb！</p>\n<p>先假设当前<code>pending = fakse</code>，那么进入<code>if (!pending)</code>，执行<code>timerFunc()</code>！</p>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc是什么？\"><a href=\"#timerFunc是什么？\" class=\"headerlink\" title=\"timerFunc是什么？\"></a>timerFunc是什么？</h1><p><code>timerFunc</code>，是一个可将当前<code>callbacks</code>作为一个回调函数（这个包裹的函数就是下面的<code>flushCallbacks</code>），入队微&#x2F;宏任务队列中，等待主线程代码执行完毕之后执行！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 立刻执行 “pending = false” 意味着，在主线程代码执行完，</span></span><br><span class=\"line\">  <span class=\"comment\">// 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 就可以进入 &quot;if (!pending)&quot; 控制流再次执行触发 “timerFunc()”，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将新的“flushCallbacks” 放进微/宏任务队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 而不是等到 上一次 “callbacks” 的所有cb执行完之后</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>timerFunc</code>根据当前环境的支持情况可能用<code>Promise</code>、<code>MutationObserver</code>、<code>setImmediate</code>、<code>setTimeout</code>实现！优先级：<code>Promise</code> &gt; <code>MutationObserver</code> &gt; <code>setImmediate</code> &gt; <code>setTimeout</code>。</p>\n<ul>\n<li>微任务（micro task）：Promise、MutationObserver；</li>\n<li>宏任务（macro task）：setImmediate、setTimeout。</li>\n</ul>\n<p>任务调用优先级：微任务 &gt; 宏任务。</p>\n<p>关于为什么这样的优先级，vue做了说明：</p>\n<blockquote>\n<p>Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).</p>\n<p>这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。</p>\n</blockquote>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc的实现\"><a href=\"#timerFunc的实现\" class=\"headerlink\" title=\"timerFunc的实现\"></a>timerFunc的实现</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise实现timerFunc\"><a href=\"#Promise实现timerFunc\" class=\"headerlink\" title=\"Promise实现timerFunc\"></a>Promise实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MutationObserver实现timerFunc\"><a href=\"#MutationObserver实现timerFunc\" class=\"headerlink\" title=\"MutationObserver实现timerFunc\"></a>MutationObserver实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本地Promise不可用的地方使用MutationObserver，</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// （＃6466 MutationObserver在IE11中不可靠）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter))</span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setImmediate实现timerFunc\"><a href=\"#setImmediate实现timerFunc\" class=\"headerlink\" title=\"setImmediate实现timerFunc\"></a>setImmediate实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  <span class=\"comment\">// 退回到setImmediate。</span></span><br><span class=\"line\">  <span class=\"comment\">// 从技术上讲，它利用（宏）任务队列，</span></span><br><span class=\"line\">  <span class=\"comment\">// 但它仍然是比setTimeout更好的选择。</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setTimeout实现timerFunc\"><a href=\"#setTimeout实现timerFunc\" class=\"headerlink\" title=\"setTimeout实现timerFunc\"></a>setTimeout实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#nextTick%E7%9A%84%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">nextTick的实现逻辑</a></li>\n<li><a href=\"#timerFunc%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\">timerFunc是什么？</a></li>\n<li><a href=\"#timerFunc%E7%9A%84%E5%AE%9E%E7%8E%B0\">timerFunc的实现</a></li>\n</ul>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>vue版本：<code>2.6.9</code>；</li>\n<li>path：<code>vue/src/core/util/next-tick.js</code>；</li>\n</ul>\n<p>&amp;nbsp;</p>\n<h1 id=\"nextTick的实现逻辑\"><a href=\"#nextTick的实现逻辑\" class=\"headerlink\" title=\"nextTick的实现逻辑\"></a>nextTick的实现逻辑</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> callbacks = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> pending = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">nextTick</span> (cb?: <span class=\"title class_\">Function</span>, ctx?: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _resolve</span><br><span class=\"line\">  callbacks.<span class=\"title function_\">push</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cb) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(ctx)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, ctx, <span class=\"string\">&#x27;nextTick&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_resolve) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">_resolve</span>(ctx)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!pending) &#123;</span><br><span class=\"line\">    pending = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"title function_\">timerFunc</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!cb &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      _resolve = resolve</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>进入nextTick，首先会点cb进行封装，涉及三个控制流！</p>\n<ol>\n<li>如果存在cb，则调用cb函数：<code>cb.call(ctx)</code>；</li>\n<li>如果<code>_resolve</code>存在，则调用 <code>_resolve(ctx)</code>，<code>_resolve</code>是<code>Promise.resolve</code>的引用！这是在当前环境支持<code>Promise</code>；</li>\n<li>不做任何处理。</li>\n</ol>\n<p>在将<code>cb</code>推入<code>callbacks</code>后，判断当前是不是正在执行上次<code>callbacks</code>的回调函数，根据pending（待定）来判断，当前是否要执行新的<code>callbacks</code>的cb！</p>\n<p>先假设当前<code>pending = fakse</code>，那么进入<code>if (!pending)</code>，执行<code>timerFunc()</code>！</p>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc是什么？\"><a href=\"#timerFunc是什么？\" class=\"headerlink\" title=\"timerFunc是什么？\"></a>timerFunc是什么？</h1><p><code>timerFunc</code>，是一个可将当前<code>callbacks</code>作为一个回调函数（这个包裹的函数就是下面的<code>flushCallbacks</code>），入队微&#x2F;宏任务队列中，等待主线程代码执行完毕之后执行！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flushCallbacks</span> () &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 立刻执行 “pending = false” 意味着，在主线程代码执行完，</span></span><br><span class=\"line\">  <span class=\"comment\">// 轮到当前这个 “flushCallbacks()” 被放入主线程执行开始</span></span><br><span class=\"line\">  <span class=\"comment\">// 就可以进入 &quot;if (!pending)&quot; 控制流再次执行触发 “timerFunc()”，</span></span><br><span class=\"line\">  <span class=\"comment\">// 将新的“flushCallbacks” 放进微/宏任务队列</span></span><br><span class=\"line\">  <span class=\"comment\">// 而不是等到 上一次 “callbacks” 的所有cb执行完之后</span></span><br><span class=\"line\">  pending = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> copies = callbacks.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">  callbacks.<span class=\"property\">length</span> = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copies.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    copies[i]()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>timerFunc</code>根据当前环境的支持情况可能用<code>Promise</code>、<code>MutationObserver</code>、<code>setImmediate</code>、<code>setTimeout</code>实现！优先级：<code>Promise</code> &gt; <code>MutationObserver</code> &gt; <code>setImmediate</code> &gt; <code>setTimeout</code>。</p>\n<ul>\n<li>微任务（micro task）：Promise、MutationObserver；</li>\n<li>宏任务（macro task）：setImmediate、setTimeout。</li>\n</ul>\n<p>任务调用优先级：微任务 &gt; 宏任务。</p>\n<p>关于为什么这样的优先级，vue做了说明：</p>\n<blockquote>\n<p>Here we have async deferring wrappers using microtasks. In 2.5 we used (macro) tasks (in combination with microtasks).However, it has subtle problems when state is changed right before repaint(e.g. #6813, out-in transitions).Also, using (macro) tasks in event handler would cause some weird behaviors that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). So we now use microtasks everywhere, again.A major drawback of this tradeoff is that there are some scenarios where microtasks have too high a priority and fire in between supposedly sequential events (e.g. #4521, #6690, which have workarounds) or even between bubbling of the same event (#6566).</p>\n<p>这里我们使用微任务异步延迟包装器。在2.5中，我们使用了（宏）任务（与微任务结合使用），但是当重新绘制之前状态发生改变时它存在一些细微的问题（例如＃6813，输出转换）。在事件处理程序中使用（宏）任务会导致一些无法避免的怪异行为（例如＃7109，＃7153，＃7546，＃7834，＃8109）。因此，我们现在再次在各处使用微任务。 是在某些情况下，微任务的优先级过高，并且在假定的顺序事件之间（例如＃4521，＃6690，它们具有变通方法）甚至在同一事件冒泡之间也会触发（＃6566）。</p>\n</blockquote>\n<p>&amp;nbsp;</p>\n<h1 id=\"timerFunc的实现\"><a href=\"#timerFunc的实现\" class=\"headerlink\" title=\"timerFunc的实现\"></a>timerFunc的实现</h1><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> timerFunc</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Promise实现timerFunc\"><a href=\"#Promise实现timerFunc\" class=\"headerlink\" title=\"Promise实现timerFunc\"></a>Promise实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Promise</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(<span class=\"title class_\">Promise</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> p = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    p.<span class=\"title function_\">then</span>(flushCallbacks)</span><br><span class=\"line\">    <span class=\"comment\">// In problematic UIWebViews, Promise.then doesn&#x27;t completely break, but</span></span><br><span class=\"line\">    <span class=\"comment\">// it can get stuck in a weird state where callbacks are pushed into the</span></span><br><span class=\"line\">    <span class=\"comment\">// microtask queue but the queue isn&#x27;t being flushed, until the browser</span></span><br><span class=\"line\">    <span class=\"comment\">// needs to do some other work, e.g. handle a timer. Therefore we can</span></span><br><span class=\"line\">    <span class=\"comment\">// &quot;force&quot; the microtask queue to be flushed by adding an empty timer.</span></span><br><span class=\"line\">    <span class=\"comment\">// 在有问题的UIWebViews中，Promise.then并不会完全中断，但是它可能会陷入一种怪异的状态，</span></span><br><span class=\"line\">    <span class=\"comment\">// 在这种状态中，回调被推送到微任务队列中，但是队列没有被刷新，直到浏览器需要执行其他一些工作，</span></span><br><span class=\"line\">    <span class=\"comment\">// 例如 处理一个计时器。 因此，我们可以通过添加空计时器来“强制”刷新微任务队列。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isIOS) <span class=\"built_in\">setTimeout</span>(noop)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MutationObserver实现timerFunc\"><a href=\"#MutationObserver实现timerFunc\" class=\"headerlink\" title=\"MutationObserver实现timerFunc\"></a>MutationObserver实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isIE &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">MutationObserver</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">  <span class=\"title function_\">isNative</span>(<span class=\"title class_\">MutationObserver</span>) ||</span><br><span class=\"line\">  <span class=\"comment\">// PhantomJS and iOS 7.x</span></span><br><span class=\"line\">  <span class=\"title class_\">MutationObserver</span>.<span class=\"title function_\">toString</span>() === <span class=\"string\">&#x27;[object MutationObserverConstructor]&#x27;</span></span><br><span class=\"line\">)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Use MutationObserver where native Promise is not available,</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// (#6466 MutationObserver is unreliable in IE11)</span></span><br><span class=\"line\">  <span class=\"comment\">// 在本地Promise不可用的地方使用MutationObserver，</span></span><br><span class=\"line\">  <span class=\"comment\">// e.g. PhantomJS, iOS7, Android 4.4</span></span><br><span class=\"line\">  <span class=\"comment\">// （＃6466 MutationObserver在IE11中不可靠）</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> <span class=\"title class_\">MutationObserver</span>(flushCallbacks)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> textNode = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(counter))</span><br><span class=\"line\">  observer.<span class=\"title function_\">observe</span>(textNode, &#123;</span><br><span class=\"line\">    <span class=\"attr\">characterData</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    counter = (counter + <span class=\"number\">1</span>) % <span class=\"number\">2</span></span><br><span class=\"line\">    textNode.<span class=\"property\">data</span> = <span class=\"title class_\">String</span>(counter)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  isUsingMicroTask = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setImmediate实现timerFunc\"><a href=\"#setImmediate实现timerFunc\" class=\"headerlink\" title=\"setImmediate实现timerFunc\"></a>setImmediate实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> setImmediate !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title function_\">isNative</span>(setImmediate)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setImmediate.</span></span><br><span class=\"line\">  <span class=\"comment\">// Techinically it leverages the (macro) task queue,</span></span><br><span class=\"line\">  <span class=\"comment\">// but it is still a better choice than setTimeout.</span></span><br><span class=\"line\">  <span class=\"comment\">// 退回到setImmediate。</span></span><br><span class=\"line\">  <span class=\"comment\">// 从技术上讲，它利用（宏）任务队列，</span></span><br><span class=\"line\">  <span class=\"comment\">// 但它仍然是比setTimeout更好的选择。</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setImmediate</span>(flushCallbacks)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"setTimeout实现timerFunc\"><a href=\"#setTimeout实现timerFunc\" class=\"headerlink\" title=\"setTimeout实现timerFunc\"></a>setTimeout实现timerFunc</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Fallback to setTimeout.</span></span><br><span class=\"line\">  timerFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(flushCallbacks, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"oauth2实践","date":"2022-10-17T23:03:02.000Z","_content":"\n\n![](2022-10-07-03-23-41.png)\n\n<!-- more -->\n\n# 管理OAuth客户端注册\n\noauth服务器需要为每个客户端分配唯一的客户端标识！\n\n## 由谁来生成客户端 ID？ \n\n在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 *授权服务器* 颁发给客户端\n\n通过客户端 ID查找信息，客户端 ID是从请求 \n\n## 对客户端授权 \n\nOAuth协议要求授权服务器提供两个端点：\n\n- 授权端点，运行在前端信道上；\n- 令牌端点，运行 在后端信道上\n\n### 授权端点\n\n授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象\n\n### 令牌端点\n\n令牌端点不面向用户\n\n客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储\n\n![](2022-10-07-12-10-49.png)\n\n\nOAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信\n\n![](2022-10-07-12-05-02.png)\n\n### 重定向到授权端点 \n\n授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。\n\n资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：\n\n1. 需要检查客户端是否存在；\n2. 需要渲染出一个页面来（/authorize），让用户交互并进行授权\n\n### 资源拥有者对客户端授权\n\n1. 在授权页面交互，发请求（/approve）给授权点，生成授权码。\n2. 生成授权码，将授权码存储。以便后续客户端用授权码换令牌\n\n通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致\n\n### 授权点需要保存客户端注册信息\n\n1. client_id\n2. redirect_uri，可以是array\n3. client_secret\n\n## 令牌颁发\n1. 对客户端进行身份认证\n2. 处理授权许可请求\n\n客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！\n\n授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！\n\n授权码的作用：保持一次性！\n\n![](2022-10-07-08-14-35.png)\n\n\n### 对客户端进行身份认证\n\n客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！\n\n### 处理授权许可请求\n\n根据 grant_type 参数，选择令牌颁发方式！\n\nOAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。\n\n\n\n看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！\n\n![](2022-10-07-11-32-59.png)\n\n客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！\n\n\n# 授权许可类型\n\n![](2022-10-24-00-46-21.png)\n\n1. **隐式许可类型**，直接从授权端点返回令牌，没有令牌端点；\n2. **客户端凭据许可类型**，没有明确的资源拥有者。只使用后端信道。\n3. **资源拥有者凭据许可类型**，资源拥有者通过客户端使用账号密码换令牌\n4. **断言许可类型**,\n\n隐式许可类型 的起点入口： \n\n授权点接口（`/authorize`）的url search参数\n\n| 参数名 | 类型 | 释义 |  |\n|:--|:--|:--|:--|\n| response_type | emAuthRespType | 响应类型 | required |\n| scope | string | 需要申请的权限域 | optional |\n| client_id | string | 客户端的唯一标识 | required |\n| redirect_uri | string | 客户端地址，需要授权完成后跳转的地址 | required |\n| state | string | csrf-token | optional |\n\n回包结构\n\n```js\n// 隐式许可类型\n?access_token=987tghjkiu6trfghjuytrghj&token_type=Bearer\n```\n\n```js\nenum emAuthRespType {\n  CODE: 'code',\n  TOKEN: 'token'  // 隐式许可类型 \n}\n```\n\n客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口\n\n`/token`，该接口是上面用code换access_token\n\n| body参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n| scope | string | csrf-token | optional |\n| username | string | 账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n| password | string | 密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n\n注意\n- 账号和密码是由用户交互输出的，交互的页面由客户端提供！\n\n\n| header参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| Authorization | 'Basic <clent_id>+<clent_secret>' | *客户端凭证许可类型*和*资源拥有者凭据许可类型 *的使用，传递账号密码 | optional |\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n  PASSWORD: 'password'\n}\n```\n回报接口\n```js\n{\n  \"access_token\": \"987tghjkiu6trfghjuytrghj\",\n  \"scope\": \"foo bar\",\n  \"token_type\": \"Bearer\"\n} \n```\n\n## 隐式许可类型\n\n```js\n} else if (query.response_type == 'token') { \n```\n\n完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.\n\n这种许可流程只使用授权端点而不使 用令牌端点\n\n隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。\n\nresponse_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 \n\n\n## 客户端凭据许可类型\n\n与前面不同，使用另外一个接口（`/token`）\n\n`/token`，该接口是上面用code换access_token\n\n| 参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n}\n```\n\n```js\n} else if (req.body.grant_type == emGrantType.CLIENT_CREDENTIALS) { \n```\n\n比如后端系统之间需要直接通信\n只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 \n\n客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌\n\n![](2022-10-07-14-51-53.png)\n\n在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 \n\n客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。\n\n![](2022-10-07-14-34-57.png)\n\n\n## 资源拥有者凭据许可类型 \n\n![](2022-10-07-16-00-30.png)\n\n用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。\n\n\n这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 \n\n授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 \n\n```js\ngrant_type == 'password'\n```\n\n完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了\n\n![](2022-10-08-05-42-33.png)\n\n# 客户端部署的应用类型\n\n1. Web应用；\n2. 浏览器应用；\n3. 原生应用；\n\n## Web应用\n\nWeb应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。\n\nWeb 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 \n\n## 浏览器应用\n\n浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 \n\n因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 \n\n## 原生应用\n\n原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。\n\n# 密钥\n\n客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。\n\n运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 \n\n不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密\n\n\nWeb 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者\n\n\n# OAuth令牌\n\n**授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效**\n\n*授权服务器* 和 *受保护资源* 间共享数据库。存在两者不共享的场景！\n\n在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省\n\n![](2022-10-08-13-31-55.png)\n\n\n## JWT的结构\n\nJWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式\n\n> eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. \n\n句点符号将字符串分割成了两部分\n\n以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理\n\n\n>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\n>\n>. \n>\n>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n>\n>.\n\n对第一部分解码：\n\n```js\n{\n  \"typ\": \"JWT\", \n  \"alg\": \"none\"\n} \n```\n\n这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。\n\n第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象\n\n![](2022-10-08-14-54-58.png)\n\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'none' }; \nvar payload = {\n  iss: 'http://localhost:9001/',   \n  sub: code.user ? code.user.sub : undefined,   \n  aud: 'http://localhost:9002/',   \n  iat: Math.floor(Date.now() / 1000),   \n  exp: Math.floor(Date.now() / 1000) + (5 * 60),   \n  jti: randomstring.generate(8)\n};\nvar access_token = base64url.encode(JSON.stringify(header))\n  + '.'\n  + base64url.encode(JSON.stringify(payload))\n  + '.';\n```\n\n\n## 令牌的加密保护：JOSE \n\nJSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准\n\n\n### 使用HS256的对称签名\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'HS256'}; \nvar access_token = jose.jws.JWS.sign(\n  header.alg,   \n  JSON.stringify(header),   \n  JSON.stringify(payload),   \n  new Buffer(sharedTokenSecret).toString('hex')); \n\n// access_token\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   \n// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   \n// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  \n// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg\n```\n\n### 使用RS256的非对称签名\n\n使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。\n\n使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、\n\n*使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！*\n\n\n![](2022-10-09-06-17-02.png)\n\n\n# 内省协议 \n\nOAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。\n该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状\n\n![](2022-10-09-07-08-23.png)\n\n内省请求\n\n![](2022-10-09-07-15-45.png)\n\n内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 \n\n![](2022-10-09-07-16-11.png)\n\n内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。\n\n## 构建内省端点\n\n```js\nvar protectedResources = [{\n  \"resource_id\": \"protected-resource-1\",        \n  \"resource_secret\": \"protected-resource-secret-1\"\n}];\n\nvar getProtectedResource = function(resourceId) {\n  return __.find(protectedResources, function(protectedResource) {\n    return   protectedResource.resource_id == resourceId;\n  });\n};\n\napp.post('/introspect', function(req, res) { \n  var auth = req.headers['authorization']; \n  var resourceCredentials = decodeClientCredentials(auth); \n  var resourceId = resourceCredentials.id; \n  var resourceSecret = resourceCredentials.secret;\n\n  var resource = getProtectedResource(resourceId);\n  if (!resource) {   \n    res.status(401).end();   \n    return; \n  } \n\n  if (resource.resource_secret != resourceSecret) {   \n    res.status(401).end();   \n    return; \n  }\n\n  var inToken = req.body.token; \n  \n  nosql.one(function(token) {   \n    if (token.access_token == inToken) {        \n      return token;   \n    } \n  }, function(err, token) {   \n    if (token) { \n      var introspectionResponse = {              \n        active: true,              \n        iss: 'http://localhost:9001/',              \n        aud: 'http://localhost:9002/',              \n        sub: token.user ? token.user.sub : undefined,              \n        username: token.user ? token.user.preferred_username : undefined,\n        scope: token.scope ? token.scope.join(' ') : undefined,              \n        client_id: token.client_id       \n      }; \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } else {       \n      var introspectionResponse = {              \n        active: false       \n      };       \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } \n  });\n});\n```\n\n\n## 发起令牌内省请求 \n\n```js\nvar protectedResource = {   \n  \"resource_id\": \"protected-resource-1\",   \n  \"resource_secret\": \"protected-resource-secret-1\"\n};\nvar form_data = qs.stringify({   \n  token: inToken\n}); \nvar headers = {   \n  'Content-Type': 'application/x-www-form-urlencoded',   \n  'Authorization': 'Basic ' + encodeClientCredentials(\n    protectedResource.resource_id, protectedResource.resource_secret)\n}; \n \nvar tokRes = await request('POST', authServer.introspectionEndpoint, {   \n  body: form_data,   \n  headers: headers \n});\n\nif (tokRes.statusCode >= 200 && tokRes.statusCode < 300) {   \n  var body = JSON.parse(tokRes.getBody()); \n \n  console.log('Got introspection response', body);   \n  var active = body.active;   \n  if (active) {        \n    req.access_token = body;   \n  } \n}\n```\n\n呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果\n\n# 动态客户端注册\n\n![](2022-10-09-12-16-09.png)\n\nOAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。\n\n# 生成授权码\n\n```js\n\nconst randomString = require('random-string');\n\nconst code = randomString();\n\nmysql.insert({\n  table: 'code',\n  field: { code }\n})\n\n```\n\n# 附录\n\n## 生成密钥\n\n```js\nconst { KEYUTIL } = require('jsrsasign');\nconst rsaKeypair = KEYUTIL.generateKeypair(\"RSA\", 1024);\nconst PRIVATE = KEYUTIL.getPEM(rsaKeypair.prvKeyObj, \"PKCS8PRV\");\nconst PUBLIC = KEYUTIL.getPEM(rsaKeypair.pubKeyObj);\n```\n![](2022-10-24-03-52-06.png)\n参考：http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\n\n## 参考\n\n- [oauth2 nodejs实战](http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html)\n- [使用 Nodejs 搭建一个 OAuth2.0 服务](https://www.jianshu.com/p/7febbe553c83)\n- [rfc6749](http://www.rfcreader.com/#rfc6749)\n","source":"_posts/oauth2实践.md","raw":"---\ntitle: oauth2实践\ndate: 2022-10-18 07:03:02\ntags:\n- 旧文迁移\n- oauth2\ncategories:\n- 安全\n---\n\n\n![](2022-10-07-03-23-41.png)\n\n<!-- more -->\n\n# 管理OAuth客户端注册\n\noauth服务器需要为每个客户端分配唯一的客户端标识！\n\n## 由谁来生成客户端 ID？ \n\n在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 *授权服务器* 颁发给客户端\n\n通过客户端 ID查找信息，客户端 ID是从请求 \n\n## 对客户端授权 \n\nOAuth协议要求授权服务器提供两个端点：\n\n- 授权端点，运行在前端信道上；\n- 令牌端点，运行 在后端信道上\n\n### 授权端点\n\n授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象\n\n### 令牌端点\n\n令牌端点不面向用户\n\n客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储\n\n![](2022-10-07-12-10-49.png)\n\n\nOAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信\n\n![](2022-10-07-12-05-02.png)\n\n### 重定向到授权端点 \n\n授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。\n\n资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：\n\n1. 需要检查客户端是否存在；\n2. 需要渲染出一个页面来（/authorize），让用户交互并进行授权\n\n### 资源拥有者对客户端授权\n\n1. 在授权页面交互，发请求（/approve）给授权点，生成授权码。\n2. 生成授权码，将授权码存储。以便后续客户端用授权码换令牌\n\n通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致\n\n### 授权点需要保存客户端注册信息\n\n1. client_id\n2. redirect_uri，可以是array\n3. client_secret\n\n## 令牌颁发\n1. 对客户端进行身份认证\n2. 处理授权许可请求\n\n客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！\n\n授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！\n\n授权码的作用：保持一次性！\n\n![](2022-10-07-08-14-35.png)\n\n\n### 对客户端进行身份认证\n\n客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！\n\n### 处理授权许可请求\n\n根据 grant_type 参数，选择令牌颁发方式！\n\nOAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。\n\n\n\n看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！\n\n![](2022-10-07-11-32-59.png)\n\n客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！\n\n\n# 授权许可类型\n\n![](2022-10-24-00-46-21.png)\n\n1. **隐式许可类型**，直接从授权端点返回令牌，没有令牌端点；\n2. **客户端凭据许可类型**，没有明确的资源拥有者。只使用后端信道。\n3. **资源拥有者凭据许可类型**，资源拥有者通过客户端使用账号密码换令牌\n4. **断言许可类型**,\n\n隐式许可类型 的起点入口： \n\n授权点接口（`/authorize`）的url search参数\n\n| 参数名 | 类型 | 释义 |  |\n|:--|:--|:--|:--|\n| response_type | emAuthRespType | 响应类型 | required |\n| scope | string | 需要申请的权限域 | optional |\n| client_id | string | 客户端的唯一标识 | required |\n| redirect_uri | string | 客户端地址，需要授权完成后跳转的地址 | required |\n| state | string | csrf-token | optional |\n\n回包结构\n\n```js\n// 隐式许可类型\n?access_token=987tghjkiu6trfghjuytrghj&token_type=Bearer\n```\n\n```js\nenum emAuthRespType {\n  CODE: 'code',\n  TOKEN: 'token'  // 隐式许可类型 \n}\n```\n\n客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口\n\n`/token`，该接口是上面用code换access_token\n\n| body参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n| scope | string | csrf-token | optional |\n| username | string | 账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n| password | string | 密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户 | optional |\n\n注意\n- 账号和密码是由用户交互输出的，交互的页面由客户端提供！\n\n\n| header参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| Authorization | 'Basic <clent_id>+<clent_secret>' | *客户端凭证许可类型*和*资源拥有者凭据许可类型 *的使用，传递账号密码 | optional |\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n  PASSWORD: 'password'\n}\n```\n回报接口\n```js\n{\n  \"access_token\": \"987tghjkiu6trfghjuytrghj\",\n  \"scope\": \"foo bar\",\n  \"token_type\": \"Bearer\"\n} \n```\n\n## 隐式许可类型\n\n```js\n} else if (query.response_type == 'token') { \n```\n\n完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.\n\n这种许可流程只使用授权端点而不使 用令牌端点\n\n隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。\n\nresponse_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 \n\n\n## 客户端凭据许可类型\n\n与前面不同，使用另外一个接口（`/token`）\n\n`/token`，该接口是上面用code换access_token\n\n| 参数 | 类型 | 释义 | - |\n|:--|:--|:--|:--|\n| grant_type | emGrantType | 获取token的方式 | required |\n\n\n```js\nenum emGrantType {\n  AUTHORIZATION_CODE: 'authorization_code',\n  CLIENT_CREDENTIALS: 'client_credentials',\n}\n```\n\n```js\n} else if (req.body.grant_type == emGrantType.CLIENT_CREDENTIALS) { \n```\n\n比如后端系统之间需要直接通信\n只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 \n\n客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌\n\n![](2022-10-07-14-51-53.png)\n\n在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 \n\n客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。\n\n![](2022-10-07-14-34-57.png)\n\n\n## 资源拥有者凭据许可类型 \n\n![](2022-10-07-16-00-30.png)\n\n用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。\n\n\n这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 \n\n授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 \n\n```js\ngrant_type == 'password'\n```\n\n完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了\n\n![](2022-10-08-05-42-33.png)\n\n# 客户端部署的应用类型\n\n1. Web应用；\n2. 浏览器应用；\n3. 原生应用；\n\n## Web应用\n\nWeb应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。\n\nWeb 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 \n\n## 浏览器应用\n\n浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 \n\n因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 \n\n## 原生应用\n\n原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。\n\n# 密钥\n\n客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。\n\n运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 \n\n不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密\n\n\nWeb 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者\n\n\n# OAuth令牌\n\n**授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效**\n\n*授权服务器* 和 *受保护资源* 间共享数据库。存在两者不共享的场景！\n\n在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省\n\n![](2022-10-08-13-31-55.png)\n\n\n## JWT的结构\n\nJWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式\n\n> eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. \n\n句点符号将字符串分割成了两部分\n\n以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理\n\n\n>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0\n>\n>. \n>\n>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n>\n>.\n\n对第一部分解码：\n\n```js\n{\n  \"typ\": \"JWT\", \n  \"alg\": \"none\"\n} \n```\n\n这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。\n\n第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象\n\n![](2022-10-08-14-54-58.png)\n\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'none' }; \nvar payload = {\n  iss: 'http://localhost:9001/',   \n  sub: code.user ? code.user.sub : undefined,   \n  aud: 'http://localhost:9002/',   \n  iat: Math.floor(Date.now() / 1000),   \n  exp: Math.floor(Date.now() / 1000) + (5 * 60),   \n  jti: randomstring.generate(8)\n};\nvar access_token = base64url.encode(JSON.stringify(header))\n  + '.'\n  + base64url.encode(JSON.stringify(payload))\n  + '.';\n```\n\n\n## 令牌的加密保护：JOSE \n\nJSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准\n\n\n### 使用HS256的对称签名\n\n```js\nvar header = { 'typ': 'JWT', 'alg': 'HS256'}; \nvar access_token = jose.jws.JWS.sign(\n  header.alg,   \n  JSON.stringify(header),   \n  JSON.stringify(payload),   \n  new Buffer(sharedTokenSecret).toString('hex')); \n\n// access_token\n// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   \n// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   \n// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  \n// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg\n```\n\n### 使用RS256的非对称签名\n\n使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。\n\n使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、\n\n*使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！*\n\n\n![](2022-10-09-06-17-02.png)\n\n\n# 内省协议 \n\nOAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。\n该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状\n\n![](2022-10-09-07-08-23.png)\n\n内省请求\n\n![](2022-10-09-07-15-45.png)\n\n内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 \n\n![](2022-10-09-07-16-11.png)\n\n内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。\n\n## 构建内省端点\n\n```js\nvar protectedResources = [{\n  \"resource_id\": \"protected-resource-1\",        \n  \"resource_secret\": \"protected-resource-secret-1\"\n}];\n\nvar getProtectedResource = function(resourceId) {\n  return __.find(protectedResources, function(protectedResource) {\n    return   protectedResource.resource_id == resourceId;\n  });\n};\n\napp.post('/introspect', function(req, res) { \n  var auth = req.headers['authorization']; \n  var resourceCredentials = decodeClientCredentials(auth); \n  var resourceId = resourceCredentials.id; \n  var resourceSecret = resourceCredentials.secret;\n\n  var resource = getProtectedResource(resourceId);\n  if (!resource) {   \n    res.status(401).end();   \n    return; \n  } \n\n  if (resource.resource_secret != resourceSecret) {   \n    res.status(401).end();   \n    return; \n  }\n\n  var inToken = req.body.token; \n  \n  nosql.one(function(token) {   \n    if (token.access_token == inToken) {        \n      return token;   \n    } \n  }, function(err, token) {   \n    if (token) { \n      var introspectionResponse = {              \n        active: true,              \n        iss: 'http://localhost:9001/',              \n        aud: 'http://localhost:9002/',              \n        sub: token.user ? token.user.sub : undefined,              \n        username: token.user ? token.user.preferred_username : undefined,\n        scope: token.scope ? token.scope.join(' ') : undefined,              \n        client_id: token.client_id       \n      }; \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } else {       \n      var introspectionResponse = {              \n        active: false       \n      };       \n      res.status(200).json(introspectionResponse);       \n      return;   \n    } \n  });\n});\n```\n\n\n## 发起令牌内省请求 \n\n```js\nvar protectedResource = {   \n  \"resource_id\": \"protected-resource-1\",   \n  \"resource_secret\": \"protected-resource-secret-1\"\n};\nvar form_data = qs.stringify({   \n  token: inToken\n}); \nvar headers = {   \n  'Content-Type': 'application/x-www-form-urlencoded',   \n  'Authorization': 'Basic ' + encodeClientCredentials(\n    protectedResource.resource_id, protectedResource.resource_secret)\n}; \n \nvar tokRes = await request('POST', authServer.introspectionEndpoint, {   \n  body: form_data,   \n  headers: headers \n});\n\nif (tokRes.statusCode >= 200 && tokRes.statusCode < 300) {   \n  var body = JSON.parse(tokRes.getBody()); \n \n  console.log('Got introspection response', body);   \n  var active = body.active;   \n  if (active) {        \n    req.access_token = body;   \n  } \n}\n```\n\n呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果\n\n# 动态客户端注册\n\n![](2022-10-09-12-16-09.png)\n\nOAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。\n\n# 生成授权码\n\n```js\n\nconst randomString = require('random-string');\n\nconst code = randomString();\n\nmysql.insert({\n  table: 'code',\n  field: { code }\n})\n\n```\n\n# 附录\n\n## 生成密钥\n\n```js\nconst { KEYUTIL } = require('jsrsasign');\nconst rsaKeypair = KEYUTIL.generateKeypair(\"RSA\", 1024);\nconst PRIVATE = KEYUTIL.getPEM(rsaKeypair.prvKeyObj, \"PKCS8PRV\");\nconst PUBLIC = KEYUTIL.getPEM(rsaKeypair.pubKeyObj);\n```\n![](2022-10-24-03-52-06.png)\n参考：http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\n\n## 参考\n\n- [oauth2 nodejs实战](http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html)\n- [使用 Nodejs 搭建一个 OAuth2.0 服务](https://www.jianshu.com/p/7febbe553c83)\n- [rfc6749](http://www.rfcreader.com/#rfc6749)\n","slug":"oauth2实践","published":1,"updated":"2023-02-17T23:10:34.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccj000c5onr885w0dk8","content":"<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-03-23-41.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"管理OAuth客户端注册\"><a href=\"#管理OAuth客户端注册\" class=\"headerlink\" title=\"管理OAuth客户端注册\"></a>管理OAuth客户端注册</h1><p>oauth服务器需要为每个客户端分配唯一的客户端标识！</p>\n<h2 id=\"由谁来生成客户端-ID？\"><a href=\"#由谁来生成客户端-ID？\" class=\"headerlink\" title=\"由谁来生成客户端 ID？\"></a>由谁来生成客户端 ID？</h2><p>在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 <em>授权服务器</em> 颁发给客户端</p>\n<p>通过客户端 ID查找信息，客户端 ID是从请求 </p>\n<h2 id=\"对客户端授权\"><a href=\"#对客户端授权\" class=\"headerlink\" title=\"对客户端授权\"></a>对客户端授权</h2><p>OAuth协议要求授权服务器提供两个端点：</p>\n<ul>\n<li>授权端点，运行在前端信道上；</li>\n<li>令牌端点，运行 在后端信道上</li>\n</ul>\n<h3 id=\"授权端点\"><a href=\"#授权端点\" class=\"headerlink\" title=\"授权端点\"></a>授权端点</h3><p>授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象</p>\n<h3 id=\"令牌端点\"><a href=\"#令牌端点\" class=\"headerlink\" title=\"令牌端点\"></a>令牌端点</h3><p>令牌端点不面向用户</p>\n<p>客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-10-49.png\"></p>\n<p>OAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-05-02.png\"></p>\n<h3 id=\"重定向到授权端点\"><a href=\"#重定向到授权端点\" class=\"headerlink\" title=\"重定向到授权端点\"></a>重定向到授权端点</h3><p>授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。</p>\n<p>资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：</p>\n<ol>\n<li>需要检查客户端是否存在；</li>\n<li>需要渲染出一个页面来（&#x2F;authorize），让用户交互并进行授权</li>\n</ol>\n<h3 id=\"资源拥有者对客户端授权\"><a href=\"#资源拥有者对客户端授权\" class=\"headerlink\" title=\"资源拥有者对客户端授权\"></a>资源拥有者对客户端授权</h3><ol>\n<li>在授权页面交互，发请求（&#x2F;approve）给授权点，生成授权码。</li>\n<li>生成授权码，将授权码存储。以便后续客户端用授权码换令牌</li>\n</ol>\n<p>通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致</p>\n<h3 id=\"授权点需要保存客户端注册信息\"><a href=\"#授权点需要保存客户端注册信息\" class=\"headerlink\" title=\"授权点需要保存客户端注册信息\"></a>授权点需要保存客户端注册信息</h3><ol>\n<li>client_id</li>\n<li>redirect_uri，可以是array</li>\n<li>client_secret</li>\n</ol>\n<h2 id=\"令牌颁发\"><a href=\"#令牌颁发\" class=\"headerlink\" title=\"令牌颁发\"></a>令牌颁发</h2><ol>\n<li>对客户端进行身份认证</li>\n<li>处理授权许可请求</li>\n</ol>\n<p>客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！</p>\n<p>授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！</p>\n<p>授权码的作用：保持一次性！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-08-14-35.png\"></p>\n<h3 id=\"对客户端进行身份认证\"><a href=\"#对客户端进行身份认证\" class=\"headerlink\" title=\"对客户端进行身份认证\"></a>对客户端进行身份认证</h3><p>客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！</p>\n<h3 id=\"处理授权许可请求\"><a href=\"#处理授权许可请求\" class=\"headerlink\" title=\"处理授权许可请求\"></a>处理授权许可请求</h3><p>根据 grant_type 参数，选择令牌颁发方式！</p>\n<p>OAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。</p>\n<p>看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-11-32-59.png\"></p>\n<p>客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！</p>\n<h1 id=\"授权许可类型\"><a href=\"#授权许可类型\" class=\"headerlink\" title=\"授权许可类型\"></a>授权许可类型</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-00-46-21.png\"></p>\n<ol>\n<li><strong>隐式许可类型</strong>，直接从授权端点返回令牌，没有令牌端点；</li>\n<li><strong>客户端凭据许可类型</strong>，没有明确的资源拥有者。只使用后端信道。</li>\n<li><strong>资源拥有者凭据许可类型</strong>，资源拥有者通过客户端使用账号密码换令牌</li>\n<li><strong>断言许可类型</strong>,</li>\n</ol>\n<p>隐式许可类型 的起点入口： </p>\n<p>授权点接口（<code>/authorize</code>）的url search参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数名</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">response_type</td>\n<td align=\"left\">emAuthRespType</td>\n<td align=\"left\">响应类型</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">需要申请的权限域</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端的唯一标识</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">redirect_uri</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端地址，需要授权完成后跳转的地址</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">state</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>回包结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 隐式许可类型</span></span><br><span class=\"line\">?access_token=987tghjkiu6trfghjuytrghj&amp;token_type=<span class=\"title class_\">Bearer</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emAuthRespType &#123;</span><br><span class=\"line\">  <span class=\"attr\">CODE</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">TOKEN</span>: <span class=\"string\">&#x27;token&#x27;</span>  <span class=\"comment\">// 隐式许可类型 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">body参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">username</td>\n<td align=\"left\">string</td>\n<td align=\"left\">账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">string</td>\n<td align=\"left\">密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>注意</p>\n<ul>\n<li>账号和密码是由用户交互输出的，交互的页面由客户端提供！</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">header参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Authorization</td>\n<td align=\"left\">‘Basic <clent_id>+<clent_secret>‘</td>\n<td align=\"left\"><em>客户端凭证许可类型</em>和*资源拥有者凭据许可类型 *的使用，传递账号密码</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">PASSWORD</span>: <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回报接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;987tghjkiu6trfghjuytrghj&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scope&quot;</span>: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (query.<span class=\"property\">response_type</span> == <span class=\"string\">&#x27;token&#x27;</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.</p>\n<p>这种许可流程只使用授权端点而不使 用令牌端点</p>\n<p>隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。</p>\n<p>response_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 </p>\n<h2 id=\"客户端凭据许可类型\"><a href=\"#客户端凭据许可类型\" class=\"headerlink\" title=\"客户端凭据许可类型\"></a>客户端凭据许可类型</h2><p>与前面不同，使用另外一个接口（<code>/token</code>）</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.<span class=\"property\">body</span>.<span class=\"property\">grant_type</span> == emGrantType.<span class=\"property\">CLIENT_CREDENTIALS</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>比如后端系统之间需要直接通信<br>只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 </p>\n<p>客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-51-53.png\"></p>\n<p>在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 </p>\n<p>客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-34-57.png\"></p>\n<h2 id=\"资源拥有者凭据许可类型\"><a href=\"#资源拥有者凭据许可类型\" class=\"headerlink\" title=\"资源拥有者凭据许可类型\"></a>资源拥有者凭据许可类型</h2><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-16-00-30.png\"></p>\n<p>用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。</p>\n<p>这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 </p>\n<p>授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant_type == <span class=\"string\">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-05-42-33.png\"></p>\n<h1 id=\"客户端部署的应用类型\"><a href=\"#客户端部署的应用类型\" class=\"headerlink\" title=\"客户端部署的应用类型\"></a>客户端部署的应用类型</h1><ol>\n<li>Web应用；</li>\n<li>浏览器应用；</li>\n<li>原生应用；</li>\n</ol>\n<h2 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h2><p>Web应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。</p>\n<p>Web 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 </p>\n<h2 id=\"浏览器应用\"><a href=\"#浏览器应用\" class=\"headerlink\" title=\"浏览器应用\"></a>浏览器应用</h2><p>浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 </p>\n<p>因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 </p>\n<h2 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h2><p>原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。</p>\n<h1 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h1><p>客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。</p>\n<p>运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 </p>\n<p>不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密</p>\n<p>Web 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者</p>\n<h1 id=\"OAuth令牌\"><a href=\"#OAuth令牌\" class=\"headerlink\" title=\"OAuth令牌\"></a>OAuth令牌</h1><p><strong>授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效</strong></p>\n<p><em>授权服务器</em> 和 <em>受保护资源</em> 间共享数据库。存在两者不共享的场景！</p>\n<p>在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-13-31-55.png\"></p>\n<h2 id=\"JWT的结构\"><a href=\"#JWT的结构\" class=\"headerlink\" title=\"JWT的结构\"></a>JWT的结构</h2><p>JWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. </p>\n</blockquote>\n<p>句点符号将字符串分割成了两部分</p>\n<p>以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0</p>\n<p>. </p>\n<p>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</p>\n<p>.</p>\n</blockquote>\n<p>对第一部分解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。</p>\n<p>第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-14-54-58.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;none&#x27;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> payload = &#123;</span><br><span class=\"line\">  <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">sub</span>: code.<span class=\"property\">user</span> ? code.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,   </span><br><span class=\"line\">  <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">iat</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>),   </span><br><span class=\"line\">  <span class=\"attr\">exp</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>) + (<span class=\"number\">5</span> * <span class=\"number\">60</span>),   </span><br><span class=\"line\">  <span class=\"attr\">jti</span>: randomstring.<span class=\"title function_\">generate</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">  + base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"令牌的加密保护：JOSE\"><a href=\"#令牌的加密保护：JOSE\" class=\"headerlink\" title=\"令牌的加密保护：JOSE\"></a>令牌的加密保护：JOSE</h2><p>JSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准</p>\n<h3 id=\"使用HS256的对称签名\"><a href=\"#使用HS256的对称签名\" class=\"headerlink\" title=\"使用HS256的对称签名\"></a>使用HS256的对称签名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = jose.<span class=\"property\">jws</span>.<span class=\"property\">JWS</span>.<span class=\"title function_\">sign</span>(</span><br><span class=\"line\">  header.<span class=\"property\">alg</span>,   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header),   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload),   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(sharedTokenSecret).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// access_token</span></span><br><span class=\"line\"><span class=\"comment\">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   </span></span><br><span class=\"line\"><span class=\"comment\">// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   </span></span><br><span class=\"line\"><span class=\"comment\">// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  </span></span><br><span class=\"line\"><span class=\"comment\">// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RS256的非对称签名\"><a href=\"#使用RS256的非对称签名\" class=\"headerlink\" title=\"使用RS256的非对称签名\"></a>使用RS256的非对称签名</h3><p>使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。</p>\n<p>使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、</p>\n<p><em>使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！</em></p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-06-17-02.png\"></p>\n<h1 id=\"内省协议\"><a href=\"#内省协议\" class=\"headerlink\" title=\"内省协议\"></a>内省协议</h1><p>OAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。<br>该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-08-23.png\"></p>\n<p>内省请求</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-15-45.png\"></p>\n<p>内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 </p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-16-11.png\"></p>\n<p>内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。</p>\n<h2 id=\"构建内省端点\"><a href=\"#构建内省端点\" class=\"headerlink\" title=\"构建内省端点\"></a>构建内省端点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResources = [&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,        </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getProtectedResource = <span class=\"keyword\">function</span>(<span class=\"params\">resourceId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __.<span class=\"title function_\">find</span>(protectedResources, <span class=\"keyword\">function</span>(<span class=\"params\">protectedResource</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>   protectedResource.<span class=\"property\">resource_id</span> == resourceId;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/introspect&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> auth = req.<span class=\"property\">headers</span>[<span class=\"string\">&#x27;authorization&#x27;</span>]; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceCredentials = <span class=\"title function_\">decodeClientCredentials</span>(auth); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceId = resourceCredentials.<span class=\"property\">id</span>; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceSecret = resourceCredentials.<span class=\"property\">secret</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resource = <span class=\"title function_\">getProtectedResource</span>(resourceId);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!resource) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resource.<span class=\"property\">resource_secret</span> != resourceSecret) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inToken = req.<span class=\"property\">body</span>.<span class=\"property\">token</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  nosql.<span class=\"title function_\">one</span>(<span class=\"keyword\">function</span>(<span class=\"params\">token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.<span class=\"property\">access_token</span> == inToken) &#123;        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> token;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,              </span><br><span class=\"line\">        <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">sub</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">username</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">preferred_username</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">scope</span>: token.<span class=\"property\">scope</span> ? token.<span class=\"property\">scope</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>) : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">client_id</span>: token.<span class=\"property\">client_id</span>       </span><br><span class=\"line\">      &#125;; </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">false</span>       </span><br><span class=\"line\">      &#125;;       </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"发起令牌内省请求\"><a href=\"#发起令牌内省请求\" class=\"headerlink\" title=\"发起令牌内省请求\"></a>发起令牌内省请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResource = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> form_data = qs.<span class=\"title function_\">stringify</span>(&#123;   </span><br><span class=\"line\">  <span class=\"attr\">token</span>: inToken</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Basic &#x27;</span> + <span class=\"title function_\">encodeClientCredentials</span>(</span><br><span class=\"line\">    protectedResource.<span class=\"property\">resource_id</span>, protectedResource.<span class=\"property\">resource_secret</span>)</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tokRes = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;POST&#x27;</span>, authServer.<span class=\"property\">introspectionEndpoint</span>, &#123;   </span><br><span class=\"line\">  <span class=\"attr\">body</span>: form_data,   </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: headers </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tokRes.<span class=\"property\">statusCode</span> &gt;= <span class=\"number\">200</span> &amp;&amp; tokRes.<span class=\"property\">statusCode</span> &lt; <span class=\"number\">300</span>) &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(tokRes.<span class=\"title function_\">getBody</span>()); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Got introspection response&#x27;</span>, body);   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> active = body.<span class=\"property\">active</span>;   </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (active) &#123;        </span><br><span class=\"line\">    req.<span class=\"property\">access_token</span> = body;   </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果</p>\n<h1 id=\"动态客户端注册\"><a href=\"#动态客户端注册\" class=\"headerlink\" title=\"动态客户端注册\"></a>动态客户端注册</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-12-16-09.png\"></p>\n<p>OAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。</p>\n<h1 id=\"生成授权码\"><a href=\"#生成授权码\" class=\"headerlink\" title=\"生成授权码\"></a>生成授权码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;random-string&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"title function_\">randomString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">table</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">field</span>: &#123; code &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">KEYUTIL</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsrsasign&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rsaKeypair = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">generateKeypair</span>(<span class=\"string\">&quot;RSA&quot;</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PRIVATE</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">prvKeyObj</span>, <span class=\"string\">&quot;PKCS8PRV&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">pubKeyObj</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-03-52-06.png\"><br>参考：<a href=\"http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\">http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html\">oauth2 nodejs实战</a></li>\n<li><a href=\"https://www.jianshu.com/p/7febbe553c83\">使用 Nodejs 搭建一个 OAuth2.0 服务</a></li>\n<li><a href=\"http://www.rfcreader.com/#rfc6749\">rfc6749</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-03-23-41.png\"></p>","more":"<h1 id=\"管理OAuth客户端注册\"><a href=\"#管理OAuth客户端注册\" class=\"headerlink\" title=\"管理OAuth客户端注册\"></a>管理OAuth客户端注册</h1><p>oauth服务器需要为每个客户端分配唯一的客户端标识！</p>\n<h2 id=\"由谁来生成客户端-ID？\"><a href=\"#由谁来生成客户端-ID？\" class=\"headerlink\" title=\"由谁来生成客户端 ID？\"></a>由谁来生成客户端 ID？</h2><p>在常规 的 OAuth系统中，客户端 ID（client_id）和密钥（client_secret）由 <em>授权服务器</em> 颁发给客户端</p>\n<p>通过客户端 ID查找信息，客户端 ID是从请求 </p>\n<h2 id=\"对客户端授权\"><a href=\"#对客户端授权\" class=\"headerlink\" title=\"对客户端授权\"></a>对客户端授权</h2><p>OAuth协议要求授权服务器提供两个端点：</p>\n<ul>\n<li>授权端点，运行在前端信道上；</li>\n<li>令牌端点，运行 在后端信道上</li>\n</ul>\n<h3 id=\"授权端点\"><a href=\"#授权端点\" class=\"headerlink\" title=\"授权端点\"></a>授权端点</h3><p>授权服务器提供了一个授权端点，供客户端请求访问令牌和刷新令牌。客户端直接向该端点 发出请求，携带一组表单格式的参数，授权服务器解析并处理这些参数。然后授权服务器返回一 个代表令牌的 JSON对象</p>\n<h3 id=\"令牌端点\"><a href=\"#令牌端点\" class=\"headerlink\" title=\"令牌端点\"></a>令牌端点</h3><p>令牌端点不面向用户</p>\n<p>客户端得到授权码，它可以将其发送给授权服务器的令牌端点，换取 OAuth访问令牌， 再进行解析和存储</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-10-49.png\"></p>\n<p>OAuth流程中的很多部分都使用标准的 HTTP请求和响应格式来相互通信。由于这些请求通 常都发生在资源拥有者和用户代理的可见范围之外，因此它们统称为后端信道通信</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-12-05-02.png\"></p>\n<h3 id=\"重定向到授权端点\"><a href=\"#重定向到授权端点\" class=\"headerlink\" title=\"重定向到授权端点\"></a>重定向到授权端点</h3><p>授权端点是一个前端信道端点，客户端会 将用户浏览器重定向至该端点，以发出授权请求。</p>\n<p>资源拥有者从客户端重定向到授权端点，它会带上客户端id。授权端点根客户端 ID查找客户端的详细信息：</p>\n<ol>\n<li>需要检查客户端是否存在；</li>\n<li>需要渲染出一个页面来（&#x2F;authorize），让用户交互并进行授权</li>\n</ol>\n<h3 id=\"资源拥有者对客户端授权\"><a href=\"#资源拥有者对客户端授权\" class=\"headerlink\" title=\"资源拥有者对客户端授权\"></a>资源拥有者对客户端授权</h3><ol>\n<li>在授权页面交互，发请求（&#x2F;approve）给授权点，生成授权码。</li>\n<li>生成授权码，将授权码存储。以便后续客户端用授权码换令牌</li>\n</ol>\n<p>通过浏览器传过来的唯一信息就是 client_id，由于该信息是用浏览器通过前端信道传输的， 因此被视为公开信息。如此一来，任何人都可以冒充该客户端，但是我们还是可以借助一些信息 来判断请求的合法性，其中重要的就是检查传入的 redirect_uri 是否与客户端注册信息中 的一致</p>\n<h3 id=\"授权点需要保存客户端注册信息\"><a href=\"#授权点需要保存客户端注册信息\" class=\"headerlink\" title=\"授权点需要保存客户端注册信息\"></a>授权点需要保存客户端注册信息</h3><ol>\n<li>client_id</li>\n<li>redirect_uri，可以是array</li>\n<li>client_secret</li>\n</ol>\n<h2 id=\"令牌颁发\"><a href=\"#令牌颁发\" class=\"headerlink\" title=\"令牌颁发\"></a>令牌颁发</h2><ol>\n<li>对客户端进行身份认证</li>\n<li>处理授权许可请求</li>\n</ol>\n<p>客户端带过来的授权码其实没有很大用处。至少在书中它没和令牌有直接的关系！</p>\n<p>授权码是作为一个一次性凭证，请求的时候就必须消耗，二次请求就会失效！</p>\n<p>授权码的作用：保持一次性！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-08-14-35.png\"></p>\n<h3 id=\"对客户端进行身份认证\"><a href=\"#对客户端进行身份认证\" class=\"headerlink\" title=\"对客户端进行身份认证\"></a>对客户端进行身份认证</h3><p>客户端会带来 client_id 和 client_secret，用client_id去查client_id对应的的客户端已经注册的信息！比对 client_secret 是否正确有效！</p>\n<h3 id=\"处理授权许可请求\"><a href=\"#处理授权许可请求\" class=\"headerlink\" title=\"处理授权许可请求\"></a>处理授权许可请求</h3><p>根据 grant_type 参数，选择令牌颁发方式！</p>\n<p>OAuth 2.0完全没有规定访问令牌的内容应该是什么样的，它有一个很好的理由：支持多 样化的选择，每种选择都有各自的权衡，并适应于不同的场景。</p>\n<p>看下面代码，我思考后发现：access_token，它颗粒度是去到单个用户，而不是单个client的维度！</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-11-32-59.png\"></p>\n<p>客户端获取权限之后，用access_token访问受保护资源时，使用access_token去数据库查找详细信息，得到scope！</p>\n<h1 id=\"授权许可类型\"><a href=\"#授权许可类型\" class=\"headerlink\" title=\"授权许可类型\"></a>授权许可类型</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-00-46-21.png\"></p>\n<ol>\n<li><strong>隐式许可类型</strong>，直接从授权端点返回令牌，没有令牌端点；</li>\n<li><strong>客户端凭据许可类型</strong>，没有明确的资源拥有者。只使用后端信道。</li>\n<li><strong>资源拥有者凭据许可类型</strong>，资源拥有者通过客户端使用账号密码换令牌</li>\n<li><strong>断言许可类型</strong>,</li>\n</ol>\n<p>隐式许可类型 的起点入口： </p>\n<p>授权点接口（<code>/authorize</code>）的url search参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数名</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">response_type</td>\n<td align=\"left\">emAuthRespType</td>\n<td align=\"left\">响应类型</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">需要申请的权限域</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">client_id</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端的唯一标识</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">redirect_uri</td>\n<td align=\"left\">string</td>\n<td align=\"left\">客户端地址，需要授权完成后跳转的地址</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">state</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>回包结构</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 隐式许可类型</span></span><br><span class=\"line\">?access_token=987tghjkiu6trfghjuytrghj&amp;token_type=<span class=\"title class_\">Bearer</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emAuthRespType &#123;</span><br><span class=\"line\">  <span class=\"attr\">CODE</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">TOKEN</span>: <span class=\"string\">&#x27;token&#x27;</span>  <span class=\"comment\">// 隐式许可类型 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端凭据许可类型 与 资源拥有者凭据许可类型 的起点接口</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">body参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">string</td>\n<td align=\"left\">csrf-token</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">username</td>\n<td align=\"left\">string</td>\n<td align=\"left\">账户，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n<tr>\n<td align=\"left\">password</td>\n<td align=\"left\">string</td>\n<td align=\"left\">密码，资源拥有者凭据许可类型使用，账户是受保护资源的账户</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<p>注意</p>\n<ul>\n<li>账号和密码是由用户交互输出的，交互的页面由客户端提供！</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">header参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Authorization</td>\n<td align=\"left\">‘Basic <clent_id>+<clent_secret>‘</td>\n<td align=\"left\"><em>客户端凭证许可类型</em>和*资源拥有者凭据许可类型 *的使用，传递账号密码</td>\n<td align=\"left\">optional</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">PASSWORD</span>: <span class=\"string\">&#x27;password&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回报接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;access_token&quot;</span>: <span class=\"string\">&quot;987tghjkiu6trfghjuytrghj&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scope&quot;</span>: <span class=\"string\">&quot;foo bar&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;token_type&quot;</span>: <span class=\"string\">&quot;Bearer&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (query.<span class=\"property\">response_type</span> == <span class=\"string\">&#x27;token&#x27;</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>完全运行在浏览器中的 JavaScript应用就属于这种情况。在这种情况下，通过浏览器向客户端传递仅用于换 取令牌的授权码就没有任何实际意义了，因为这个额外的保密层没有起到任何作.</p>\n<p>这种许可流程只使用授权端点而不使 用令牌端点</p>\n<p>隐式许可流程不可用于获取刷新令牌。因为浏览器内的应用具有短暂运行的特点，只会在被加载到浏览器的期间保持会话，所以刷新令牌在这里的作用非常有限。</p>\n<p>response_type 参数的值为 token，而不是 code。这样会通知授权服务器直接生成令牌，而 不是生成一个用于换取令牌的授权码。 </p>\n<h2 id=\"客户端凭据许可类型\"><a href=\"#客户端凭据许可类型\" class=\"headerlink\" title=\"客户端凭据许可类型\"></a>客户端凭据许可类型</h2><p>与前面不同，使用另外一个接口（<code>/token</code>）</p>\n<p><code>/token</code>，该接口是上面用code换access_token</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">类型</th>\n<th align=\"left\">释义</th>\n<th align=\"left\">-</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">grant_type</td>\n<td align=\"left\">emGrantType</td>\n<td align=\"left\">获取token的方式</td>\n<td align=\"left\">required</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum emGrantType &#123;</span><br><span class=\"line\">  <span class=\"attr\">AUTHORIZATION_CODE</span>: <span class=\"string\">&#x27;authorization_code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">CLIENT_CREDENTIALS</span>: <span class=\"string\">&#x27;client_credentials&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (req.<span class=\"property\">body</span>.<span class=\"property\">grant_type</span> == emGrantType.<span class=\"property\">CLIENT_CREDENTIALS</span>) &#123; </span><br></pre></td></tr></table></figure>\n\n<p>比如后端系统之间需要直接通信<br>只使用后端信道，客户端代表自己（它自己就是资源拥有 者）从令牌端点获取令牌。 </p>\n<p>客户端向授权服务器的令牌端点发出令牌请求，这与授权码流程是一样的，只不过这一次使 用 client_credentials 作为 grant_type 参数的值，而且没有授权码或者其他用于换取令牌 的临时凭据。相反，客户端直接向授权服务器进行身份认证，而授权服务器给客户端颁发访问令牌</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-51-53.png\"></p>\n<p>在客户端凭据许可流程中不会颁发刷新令牌，因为我们认为客户端能够随时获取新令牌，无 须单独的资源拥有者参与，因此在这种情况下没有必要使用刷新令牌。 </p>\n<p>客户端凭据许可类型没有任何直接的用户交互!它确实是为可信的后端系统直接 访问服务而准备的。</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-14-34-57.png\"></p>\n<h2 id=\"资源拥有者凭据许可类型\"><a href=\"#资源拥有者凭据许可类型\" class=\"headerlink\" title=\"资源拥有者凭据许可类型\"></a>资源拥有者凭据许可类型</h2><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-07-16-00-30.png\"></p>\n<p>用户名和密码，那么客户端可以向用户索取用户 的凭据，然后用这个凭据换取令牌。支持客户端这样做的是资源拥有者凭据许可类型，也叫作密码流程。</p>\n<p>这种许可类型的工作方式很简单。客户端收集用户的用户名和密码（使用什么样的交互接口 由客户端决定），然后将它们发送至授权服务器。 </p>\n<p>授权服务器从收到的请求中取出用户名和密码，并与本地存储的用户信息对比。如果匹配， 则授权服务器向客户端颁发令牌。 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant_type == <span class=\"string\">&#x27;password&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>完成所有的检查之后，就可以生成并返回令牌了。请注意，还可以生成刷新令牌（我们的练 习中这样做了）。为客户端提供刷新令牌之后，它就不需要再保存用户的密码了</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-05-42-33.png\"></p>\n<h1 id=\"客户端部署的应用类型\"><a href=\"#客户端部署的应用类型\" class=\"headerlink\" title=\"客户端部署的应用类型\"></a>客户端部署的应用类型</h1><ol>\n<li>Web应用；</li>\n<li>浏览器应用；</li>\n<li>原生应用；</li>\n</ol>\n<h2 id=\"Web应用\"><a href=\"#Web应用\" class=\"headerlink\" title=\"Web应用\"></a>Web应用</h2><p>Web应用运行在远程服务器上，需要通过Web浏览器访问。应用的配置和运行时状态由 Web 服务器维护，通常使用会话 cookie 与浏览器保持 连接。</p>\n<p>Web 应用很容易有效地使用授权码、客 户端凭据或者断言许可流程。由于浏览器一般不会将请求 URI 中的片段部分发送给服务器，大 多数情况下隐式许可流程不适用于Web 应用。 </p>\n<h2 id=\"浏览器应用\"><a href=\"#浏览器应用\" class=\"headerlink\" title=\"浏览器应用\"></a>浏览器应用</h2><p>浏览器应用完全运行在浏览器内，一般使用 JavaScript。虽然应用的代码确实需要由Web 服 务器提供，但代码本身并不在服务器上运行，Web 服务器也不会维护应用的任何运行时状态。应 用的所有执行动作都发生在最终用户计算机的浏览器内。 </p>\n<p>因 为浏览器应用受限于同源策略以及其他安全限制条件，这些限制是为了防止跨站攻击。因此，最 适合这类应用的是隐式许可流程，该许可流程就是针对这种应用场景而做的优化。 </p>\n<h2 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h2><p>原生应用是直接在最终用户的设备（计算机或者移动设备）上运行的应用。应用软件通常是在外部经过编译或者打包之后再安装到设备上的。</p>\n<h1 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h1><p>客户端密钥属 于配置期间秘密，因为它代表客户端自身，是配置在客户端软件内部的。访问令牌、刷新令牌和 授权码都属于运行时秘密，因为它们都是在客户端软件被部署之后由客户端存储的。</p>\n<p>运行时秘密仍然需要安全存储并保护，但是它们被设计得容易撤销或更改。相反，配置期间秘密一般不会经 常改变。 </p>\n<p>不要求所有客户端都拥有客户端密钥，而是将客户 端分为两种类型：公开客户端和保密客户端，划分依据是能否持有配置期间秘密</p>\n<p>Web 应用是最常见的保密客户端类 型，它是运行在 Web 服务器上的单个实例，单个 OAuth客户端可以对应多个资源拥有者</p>\n<h1 id=\"OAuth令牌\"><a href=\"#OAuth令牌\" class=\"headerlink\" title=\"OAuth令牌\"></a>OAuth令牌</h1><p><strong>授权服务器生成令牌之后，会将令牌值存储在磁盘上的共享数据库中。当受保护资源从客户 端收到令牌之后，它会在同一个数据库中查找令牌值，以确定令牌有效</strong></p>\n<p><em>授权服务器</em> 和 <em>受保护资源</em> 间共享数据库。存在两者不共享的场景！</p>\n<p>在授权服务器和受保护资源间共享数据库并不总是实际可行，特别是在一个授权服务器需要 保护下游的多个资源服务器的情况下。该如何解决这个问题呢？本章将讨论另外两种常见的方 案：结构化令牌和令牌内省</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-13-31-55.png\"></p>\n<h2 id=\"JWT的结构\"><a href=\"#JWT的结构\" class=\"headerlink\" title=\"JWT的结构\"></a>JWT的结构</h2><p>JWT的核心是将一个 JSON对象封 装为一种用于网络传输的格式</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. </p>\n</blockquote>\n<p>句点符号将字符串分割成了两部分</p>\n<p>以句点符号将令牌字符串分解，让我们可以对令牌的 不同部分分别进行处理</p>\n<blockquote>\n<p>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0</p>\n<p>. </p>\n<p>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</p>\n<p>.</p>\n</blockquote>\n<p>对第一部分解码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;typ&quot;</span>: <span class=\"string\">&quot;JWT&quot;</span>, </span><br><span class=\"line\">  <span class=\"string\">&quot;alg&quot;</span>: <span class=\"string\">&quot;none&quot;</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这是 JWT的头部，它是一个 JSON对象，用于描述与令牌剩余部分有关的信息。其中的 typ 头告诉处理程序令牌的第二部分（载荷）是何种类型。</p>\n<p>第二部分是令牌的载荷，它的序列化方式与 JWT头部相同：对 JSON对象进行 Base64URL 编码。由于它是 JWT，因此其载荷可以是任意的 JSON对象</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-08-14-54-58.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;none&#x27;</span> &#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> payload = &#123;</span><br><span class=\"line\">  <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">sub</span>: code.<span class=\"property\">user</span> ? code.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,   </span><br><span class=\"line\">  <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"attr\">iat</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>),   </span><br><span class=\"line\">  <span class=\"attr\">exp</span>: <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>() / <span class=\"number\">1000</span>) + (<span class=\"number\">5</span> * <span class=\"number\">60</span>),   </span><br><span class=\"line\">  <span class=\"attr\">jti</span>: randomstring.<span class=\"title function_\">generate</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\">  + base64url.<span class=\"title function_\">encode</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload))</span><br><span class=\"line\">  + <span class=\"string\">&#x27;.&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"令牌的加密保护：JOSE\"><a href=\"#令牌的加密保护：JOSE\" class=\"headerlink\" title=\"令牌的加密保护：JOSE\"></a>令牌的加密保护：JOSE</h2><p>JSON对象的签名和加密标准（JOSE①）。这套规范以 JSON为基础数据模型，提供了 签名（JSON Web签名，或称 JWS）、加密（JSON Web加密，或称 JWE）以及密钥存储格式（JSON Web 密钥，或称 JWK）的标准</p>\n<h3 id=\"使用HS256的对称签名\"><a href=\"#使用HS256的对称签名\" class=\"headerlink\" title=\"使用HS256的对称签名\"></a>使用HS256的对称签名</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> header = &#123; <span class=\"string\">&#x27;typ&#x27;</span>: <span class=\"string\">&#x27;JWT&#x27;</span>, <span class=\"string\">&#x27;alg&#x27;</span>: <span class=\"string\">&#x27;HS256&#x27;</span>&#125;; </span><br><span class=\"line\"><span class=\"keyword\">var</span> access_token = jose.<span class=\"property\">jws</span>.<span class=\"property\">JWS</span>.<span class=\"title function_\">sign</span>(</span><br><span class=\"line\">  header.<span class=\"property\">alg</span>,   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(header),   </span><br><span class=\"line\">  <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(payload),   </span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(sharedTokenSecret).<span class=\"title function_\">toString</span>(<span class=\"string\">&#x27;hex&#x27;</span>)); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// access_token</span></span><br><span class=\"line\"><span class=\"comment\">// eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwMDEv   </span></span><br><span class=\"line\"><span class=\"comment\">// Iiwic3ViIjoiOVhFMy1KSTM0LTAwMTMyQSIsImF1ZCI6Imh0dHA6Ly9sb2NhbGhvc3Q6OTAwMi8   </span></span><br><span class=\"line\"><span class=\"comment\">// iLCJpYXQiOjE0NjcyNTEwNzMsImV4cCI6MTQ2NzI1MTM3MywianRpIjoiaEZLUUpSNmUifQ.Wq  </span></span><br><span class=\"line\"><span class=\"comment\">// RsY03pYwuJTx-9pDQXftkcj7YbRn95o-16NHrVugg</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用RS256的非对称签名\"><a href=\"#使用RS256的非对称签名\" class=\"headerlink\" title=\"使用RS256的非对称签名\"></a>使用RS256的非对称签名</h3><p>使用共享密钥时，创建签名和验证签名的系统使用的是同一个密钥。这实际上意味着授权服务器和资源服务器都能够生成令牌，因为它们都拥有创建令牌所需的密钥。</p>\n<p>使用公钥 加密的话，授权服务器拥有公钥和私钥，可用于生成令牌，而受保护资源则只能访问授权服务器 的公钥，用于验证令牌。与使用共享密钥不同的是，受保护资源虽然能够很容易地验证令牌，但它无法自己生成有效的令牌。、</p>\n<p><em>使用非对称加密签名的目的就为了将创建令牌的权限收归到授权服务器。受保护资源服务器只能使用公钥进行验证而不能创建令牌！</em></p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-06-17-02.png\"></p>\n<h1 id=\"内省协议\"><a href=\"#内省协议\" class=\"headerlink\" title=\"内省协议\"></a>内省协议</h1><p>OAuth令牌内省协议定义了一种机制，让受保护资源能够主动向授权服务器查询令牌状态。<br>该协议是对 OAuth 的一个简单增强。授权服务器向客户端颁发令牌，客户端向受保护资源 出示令牌，受保护资源则向授权服务器查询令牌状</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-08-23.png\"></p>\n<p>内省请求</p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-15-45.png\"></p>\n<p>内省请求的响应是一个 JSON 对象，用于描述令牌信息。它的内容与 JWT 的载荷相似，任 何有效的 JWT声明都可以包含在响应中。 </p>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-07-16-11.png\"></p>\n<p>内省协议规范还在 JWT的基础上增加了几个声明定义，其中重要的是 active 声明。此 声明告诉受保护资源当前令牌在授权服务器上是否有效，且是唯一必须返回的声明。</p>\n<h2 id=\"构建内省端点\"><a href=\"#构建内省端点\" class=\"headerlink\" title=\"构建内省端点\"></a>构建内省端点</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResources = [&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,        </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getProtectedResource = <span class=\"keyword\">function</span>(<span class=\"params\">resourceId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __.<span class=\"title function_\">find</span>(protectedResources, <span class=\"keyword\">function</span>(<span class=\"params\">protectedResource</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>   protectedResource.<span class=\"property\">resource_id</span> == resourceId;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/introspect&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) &#123; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> auth = req.<span class=\"property\">headers</span>[<span class=\"string\">&#x27;authorization&#x27;</span>]; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceCredentials = <span class=\"title function_\">decodeClientCredentials</span>(auth); </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceId = resourceCredentials.<span class=\"property\">id</span>; </span><br><span class=\"line\">  <span class=\"keyword\">var</span> resourceSecret = resourceCredentials.<span class=\"property\">secret</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> resource = <span class=\"title function_\">getProtectedResource</span>(resourceId);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!resource) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (resource.<span class=\"property\">resource_secret</span> != resourceSecret) &#123;   </span><br><span class=\"line\">    res.<span class=\"title function_\">status</span>(<span class=\"number\">401</span>).<span class=\"title function_\">end</span>();   </span><br><span class=\"line\">    <span class=\"keyword\">return</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> inToken = req.<span class=\"property\">body</span>.<span class=\"property\">token</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">  nosql.<span class=\"title function_\">one</span>(<span class=\"keyword\">function</span>(<span class=\"params\">token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token.<span class=\"property\">access_token</span> == inToken) &#123;        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> token;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">err, token</span>) &#123;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token) &#123; </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,              </span><br><span class=\"line\">        <span class=\"attr\">iss</span>: <span class=\"string\">&#x27;http://localhost:9001/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">aud</span>: <span class=\"string\">&#x27;http://localhost:9002/&#x27;</span>,              </span><br><span class=\"line\">        <span class=\"attr\">sub</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">sub</span> : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">username</span>: token.<span class=\"property\">user</span> ? token.<span class=\"property\">user</span>.<span class=\"property\">preferred_username</span> : <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">        <span class=\"attr\">scope</span>: token.<span class=\"property\">scope</span> ? token.<span class=\"property\">scope</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>) : <span class=\"literal\">undefined</span>,              </span><br><span class=\"line\">        <span class=\"attr\">client_id</span>: token.<span class=\"property\">client_id</span>       </span><br><span class=\"line\">      &#125;; </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;       </span><br><span class=\"line\">      <span class=\"keyword\">var</span> introspectionResponse = &#123;              </span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">false</span>       </span><br><span class=\"line\">      &#125;;       </span><br><span class=\"line\">      res.<span class=\"title function_\">status</span>(<span class=\"number\">200</span>).<span class=\"title function_\">json</span>(introspectionResponse);       </span><br><span class=\"line\">      <span class=\"keyword\">return</span>;   </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"发起令牌内省请求\"><a href=\"#发起令牌内省请求\" class=\"headerlink\" title=\"发起令牌内省请求\"></a>发起令牌内省请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> protectedResource = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_id&quot;</span>: <span class=\"string\">&quot;protected-resource-1&quot;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&quot;resource_secret&quot;</span>: <span class=\"string\">&quot;protected-resource-secret-1&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> form_data = qs.<span class=\"title function_\">stringify</span>(&#123;   </span><br><span class=\"line\">  <span class=\"attr\">token</span>: inToken</span><br><span class=\"line\">&#125;); </span><br><span class=\"line\"><span class=\"keyword\">var</span> headers = &#123;   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded&#x27;</span>,   </span><br><span class=\"line\">  <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Basic &#x27;</span> + <span class=\"title function_\">encodeClientCredentials</span>(</span><br><span class=\"line\">    protectedResource.<span class=\"property\">resource_id</span>, protectedResource.<span class=\"property\">resource_secret</span>)</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">var</span> tokRes = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(<span class=\"string\">&#x27;POST&#x27;</span>, authServer.<span class=\"property\">introspectionEndpoint</span>, &#123;   </span><br><span class=\"line\">  <span class=\"attr\">body</span>: form_data,   </span><br><span class=\"line\">  <span class=\"attr\">headers</span>: headers </span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tokRes.<span class=\"property\">statusCode</span> &gt;= <span class=\"number\">200</span> &amp;&amp; tokRes.<span class=\"property\">statusCode</span> &lt; <span class=\"number\">300</span>) &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> body = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(tokRes.<span class=\"title function_\">getBody</span>()); </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Got introspection response&#x27;</span>, body);   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> active = body.<span class=\"property\">active</span>;   </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (active) &#123;        </span><br><span class=\"line\">    req.<span class=\"property\">access_token</span> = body;   </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>呈现了两种用于授权服务器和受保护资源之间传递信息的方法：结构化令牌（具体来说 就是 JWT）和令牌内省。看起来这两种方法需要二选一，但实际上，将它们结合起来使用也可 以得到很好的效果</p>\n<h1 id=\"动态客户端注册\"><a href=\"#动态客户端注册\" class=\"headerlink\" title=\"动态客户端注册\"></a>动态客户端注册</h1><p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-09-12-16-09.png\"></p>\n<p>OAuth 动态客户端注册协议②提供了一种方法，让客户端可以自行加入授权服务器，并注册 自己的各类相关信息。</p>\n<h1 id=\"生成授权码\"><a href=\"#生成授权码\" class=\"headerlink\" title=\"生成授权码\"></a>生成授权码</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> randomString = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;random-string&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> code = <span class=\"title function_\">randomString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">mysql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">table</span>: <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">field</span>: &#123; code &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><h2 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"variable constant_\">KEYUTIL</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;jsrsasign&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rsaKeypair = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">generateKeypair</span>(<span class=\"string\">&quot;RSA&quot;</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PRIVATE</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">prvKeyObj</span>, <span class=\"string\">&quot;PKCS8PRV&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PUBLIC</span> = <span class=\"variable constant_\">KEYUTIL</span>.<span class=\"title function_\">getPEM</span>(rsaKeypair.<span class=\"property\">pubKeyObj</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"/blog/2022/10/18/oauth2%E5%AE%9E%E8%B7%B5/2022-10-24-03-52-06.png\"><br>参考：<a href=\"http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html\">http://kjur.github.io/jsrsasign/api/symbols/KEYUTIL.html</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://laibh.top/2020-07-17-oauth2%20nodejs%E5%AE%9E%E6%88%98.html\">oauth2 nodejs实战</a></li>\n<li><a href=\"https://www.jianshu.com/p/7febbe553c83\">使用 Nodejs 搭建一个 OAuth2.0 服务</a></li>\n<li><a href=\"http://www.rfcreader.com/#rfc6749\">rfc6749</a></li>\n</ul>"},{"title":"v-for的原理分析","date":"2019-11-19T00:41:47.000Z","_content":"\n# 大纲\n\n- [前言](#前言)\n- [v-for的函数文本](#v-for的函数文本)\n- [renderList的实现](#renderList的实现)\n\n<!-- more -->\n\n# 前言\n\n- 使用`parse`解析模板生成`ast`，`v-for`相关的属性；\n- 使用`generate`，结合`ast`生成函数文本（`code`），包含`v-for`的函数文本是`_l(/* ... */)`;\n- 结合`code`构造`render_watcher.update()`，从而渲染`v-for`元素。\n\n接下来使用一下例子结合源码进行学习：\n\n```html\n<main id=\"app\">\n  <dl v-for=\"(name, idx) in names\" :key=\"idx\">\n    <dt>name:</dt>\n    <dd>{{name}}</dd>\n  </dl>\n</main>\n<script>\n  const vm = new Vue({\n    data: {\n      names: ['isaac', 'frank', 'rick'],\n    }\n  }).$mount('#app');\n</script>\n```\n\n\n# v-for的函数文本\n\n[回到顶部](#大纲)\n\n**解析模板的入口**：`vue/src/compiler/index.js`\n\n`ast`由`parse`返回，所以先深入去parse是怎么生成`v-for`的`ast`!\n```typescript\nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  // parse 生产 ast\n  log('ast:', ast);\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  // generate 生产 渲染用的函数文本\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n## 解析出`ast`\n\n解析视图模板主要由`parseHTML`函数实现，而这个函数是比较长，`parseHTML`对`v-for`相关信息的解析，先说明用到的函数，以及对应的作用：\n\n1. `const startTagMatch = parseStartTag()`，parseStartTag是解析开始标签，主要是解析：a. 开始标签这段文本在整个html文本的开始和结束位置，b. 标签内的属性文本的位置，比如`v-for=\"(name, idx) in names\"`的开始和结束位置。\n2. `handleStartTag(startTagMatch)`，根据位置信息进一步接续出属性值，比如`{ name: 'v-for', value: '(name, idx) in names' }`。\n```typescript\n/**\n * Convert HTML string to AST.\n */\nexport function parse (\n  template: string,\n  options: CompilerOptions\n): ASTElement | void {\n  // ...\n  parseHTML(template, {\n    // ...\n    start (tag, attrs, unary, start, end) {\n      // ...\n      let element: ASTElement = createASTElement(tag, attrs, currentParent)\n      log('element:', element);\n      // ...\n    }\n    // ...\n  });\n\n  // ...\n  return root\n}\n\nexport function parseHTML (html, options) {\n  // ...\n  while (html) {\n    // ...\n    // Start tag: 记录属性文本在争端元素字符串开始和结束的位置\n    const startTagMatch = parseStartTag()\n    if (startTagMatch) {\n      // 根据 parseStartTag 解析出来的位置信息，进一步将文本解析成对象解构的属性\n      handleStartTag(startTagMatch)\n      // ...\n    }\n  }\n\n  // advance(推进)，更新html文本\n  function advance (n) {\n    index += n\n    html = html.substring(n)\n  }\n\n  // 1. 找出开始标签的start-index和end-index，\n  // 比如<span name=\"isaac\"></span>中的开始标签就是<span name=\"isaac\">\n  // 2. 找出每个属性文本的始和终index\n  function parseStartTag () {\n    const start = html.match(startTagOpen)\n    log('html.match(startTagOpen):', html);\n    if (start) {\n      const match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      }\n      advance(start[0].length)\n      let end, attr\n      while (\n        !(end = html.match(startTagClose))\n        && (\n          attr = html.match(dynamicArgAttribute)\n          || html.match(attribute)\n        )\n      ) {\n        attr.start = index\n        advance(attr[0].length)\n        attr.end = index\n        match.attrs.push(attr)\n      }\n      if (end) {\n        match.unarySlash = end[1]\n        advance(end[0].length)\n        match.end = index\n        return match\n      }\n    }\n  }\n\n  // 根据 parseStartTag, 得到的文职信息，以及属性的匹配信息\n  // 将属性信息从文本解析成对象\n  function handleStartTag (match) {\n    // ...\n    for (let i = 0; i < l; i++) {\n      const args = match.attrs[i]\n      // ...\n      const attrItem = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      }\n      log('attrItem:', attrItem)\n      /**\n       * output:\n       * it-1: \"attrItem:\" {name: \"v-for\", value: \"(name, idx) in names\"}\n       * it-2: \"attrItem:\" {name: \":key\", value: \"idx\"}\n      */\n      attrs[i] = attrItem;\n      // ...\n    }\n\n    // log('stack:', JSON.parse(JSON.stringify(stack)));\n    if (options.start) {\n      log('attrs:', JSON.parse(JSON.stringify(attrs)));\n      options.start(tagName, attrs, unary, match.start, match.end)\n    }\n  }\n}\n\nconst encodedAttr = /&(?:lt|gt|quot|amp|#39);/g\nconst encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  const re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr\n  return value.replace(re, match => decodingMap[match])\n}\n```\n- `log('attrs:', JSON.parse(JSON.stringify(attrs)));`\n![](./asset/attrs.png)\n\n- `log('element:', element)`\n![](./asset/element.jpg)\n\n- `log('ast:', ast)`\n![](./asset/ast.jpg)\n\n\n## 根据ast解析出函数文本\n\npath: vue/src/compiler/codegen/index.js\n```typescript\nexport function generate (\n  ast: ASTElement | void,\n  options: CompilerOptions\n): CodegenResult {\n  const state = new CodegenState(options)\n  const code = ast ? genElement(ast, state) : '_c(\"div\")'\n  return {\n    render: `with(this){return ${code}}`,\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nexport function genElement (el: ASTElement, state: CodegenState): string {\n  // ...\n\n  if (el.staticRoot && !el.staticProcessed) {\n    // ...\n  } else if (el.for && !el.forProcessed) {\n    const forCode = genFor(el, state);\n    log('forCode', forCode);\n    // output: \"forCode\" \"_l((names),function(name,idx){return _c('dl',{key:idx},[_c('dt',[_v(\"name:\")]),_v(\" \"),_c('dd',[_v(_s(name))])])})\"\n    return forCode;\n  } else {\n    // ...\n  }\n}\n```\n\npath: vue/src/compiler/codegen/index.js\n```typescript\nexport function genFor (\n  el: any,\n  state: CodegenState,\n  altGen?: Function,\n  altHelper?: string\n): string {\n  const log = (...rest) => console.log(Date.now(), `genFor-${rest.shift()}`, ...rest);\n  // exp这名变量名也提醒我们：被遍历的目标，可以直接是变量名，也可以是一段可执行的语句\n  const exp = el.for\n  // 成员临时别名\n  const alias = el.alias\n  // <div v-for=\"(value, name, index) in object\">，中的 name\n  const iterator1 = el.iterator1 ? `,${el.iterator1}` : ''\n  // <div v-for=\"(value, name, index) in object\">，中的 index\n  const iterator2 = el.iterator2 ? `,${el.iterator2}` : ''\n  // ..\n\n  el.forProcessed = true // avoid recursion\n  return  `${altHelper || '_l'}((${exp}),` +\n    `function(${alias}${iterator1}${iterator2}){` +\n      // genElement递归生成\n      `return ${(altGen || genElement)(el, state)}` +\n    '})'\n}\n```\n\n\n\n```typescript\nrenderList((names), function(name,idx) {\n  return _c('dl', {key:idx}, [\n    _c('dt', [createTextVNode(\"name:\")]),\n    createTextVNode(\" \"),\n    _c('dd', [createTextVNode(toString(name))])\n  ])\n})\n```\n\n\n# renderList的实现\n\n[回到顶部](#大纲)\n\n由上面知道最后`v-for`html段落最后被解析出来的函数文本：\n解析v-for模板的函数文本\n```typescript\n_l((names), function(name,idx) {\n  return _c('dl', {key:idx}, [\n    _c('dt', [_v(\"name:\")]),\n    _v(\" \"),\n    _c('dd', [_v(_s(name))])\n  ])\n})\n```\n\n全局搜索一下`_l`就可以找到：\n\n```typescript\nexport function installRenderHelpers (target: any) {\n  // ...\n  target._l = renderList\n  // ...\n}\n```\n\nrenderList函数是`vm._l`的实现，它的功能是遍历`v-for=\"item in list\"`中的list，list可以有多种不同的类型！注意遍历是这个函数功能，元素的渲染则是依赖renderList函数的第二个参数：`ender: (val: any, keyOrIndex: string | number, index?: number) => VNode`。\n\n```typescript\nimport { isObject, isDef, hasSymbol } from 'core/util/index'\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nexport function renderList (\n  // 遍历的目标\n  val: any,\n  // 渲染函数\n  render: (val: any, keyOrIndex: string | number, index?: number) => VNode\n): ?Array<VNode> {\n  let ret: ?Array<VNode>, i, l, keys, key\n  // 1. 遍历一个数组\n  // 2. 遍历一个字符串\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length)\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i)\n    }\n  } \n  // 3. 循环 val 次\n  else if (typeof val === 'number') {\n    ret = new Array(val)\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i)\n    }\n  }\n  // 4. 遍历一个对象\n  else if (isObject(val)) {\n    // 4.1 遍历迭代器\n    /**\n     * 以下内置类型拥有默认的@@iterator方法：\n     *  Array.prototype[@@iterator]()\n     *  TypedArray.prototype[@@iterator]()\n     *  String.prototype[@@iterator]()\n     *  Map.prototype[@@iterator]()\n     *  Set.prototype[@@iterator]()\n     */\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = []\n      const iterator: Iterator<any> = val[Symbol.iterator]()\n      let result = iterator.next()\n      while (!result.done) {\n        ret.push(render(result.value, ret.length))\n        result = iterator.next()\n      }\n    }\n    // 4.2 遍历常规对象\n    else {\n      keys = Object.keys(val)\n      ret = new Array(keys.length)\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i]\n        ret[i] = render(val[key], key, i)\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = []\n  }\n  (ret: any)._isVList = true\n  return ret\n}\n```\n由上面的代码可以知道，`v-for`可以遍历以下几种类型\n\n1. 遍历数组\n2. 遍历类数组的字符串\n3. 循环指定次数\n4. 遍历迭代器\n5. 遍历常规对象\n\n遍历迭代器可能用得比较少，下面有个不算很好的例子：\n\n```html\n<main id=\"app\">\n  <ul>\n    <h3>myIterable: </h3>\n    <li v-for=\"(item, key) in myIterable\">{{key}}: {{item}}</li>\n  </ul>\n</main>\n<script>\n  const vm = new Vue({\n    data: {\n      myIterable: (() => {\n        var myIterable = {}\n        myIterable[Symbol.iterator] = function* () {\n          yield 1;\n          yield 2;\n          yield 3;\n        };\n        return myIterable;\n      })()\n    }\n  }).$mount('#app');\n</script>\n```\n迭代器的详细分析参考：[什么是迭代器？](#)\n\n\n```typescript\nparseHTML(template, {\n  // ...\n  start (tag, attrs, unary, start, end) {\n    // ...\n    let element: ASTElement = createASTElement(tag, attrs, currentParent)\n    // ...\n    else if (!element.processed) {\n      // structural directives\n      processFor(element)\n      // ..\n    }\n  }\n  // ...\n});\n```\n\n\n# 总结\n\n[回到顶部](#大纲)\n\n- v-for视图解析到渲染成html文段的过程\n\n1. 使用`parse`方法解析视图模板，生成ast，其中主要的三个函数是: a. parseStartTag解析属性等主要信息的位置，b. handleStartTag解析属性，c. createASTElement根据解析出的属性等生成元素的ast；\n2. 使用`generate`将ast转化成函数文本，`_l`（`renderlist`）即是`v-for`视图的文本函数，其中主要函数是`genElement`，可递归生成后代元素的函数文本；\n3. 函数文本作为render-watcher.update方法主逻辑\n\n- 从`renderlist`中可以看出v-for可以遍历以下几种类型\n  \n1. 遍历数组\n2. 遍历类数组的字符串\n3. 循环指定次数\n4. 遍历迭代器\n5. 遍历常规对象\n\n","source":"_posts/v-for的原理分析.md","raw":"---\ntitle: v-for的原理分析\ndate: 2019-11-19 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\n---\n\n# 大纲\n\n- [前言](#前言)\n- [v-for的函数文本](#v-for的函数文本)\n- [renderList的实现](#renderList的实现)\n\n<!-- more -->\n\n# 前言\n\n- 使用`parse`解析模板生成`ast`，`v-for`相关的属性；\n- 使用`generate`，结合`ast`生成函数文本（`code`），包含`v-for`的函数文本是`_l(/* ... */)`;\n- 结合`code`构造`render_watcher.update()`，从而渲染`v-for`元素。\n\n接下来使用一下例子结合源码进行学习：\n\n```html\n<main id=\"app\">\n  <dl v-for=\"(name, idx) in names\" :key=\"idx\">\n    <dt>name:</dt>\n    <dd>{{name}}</dd>\n  </dl>\n</main>\n<script>\n  const vm = new Vue({\n    data: {\n      names: ['isaac', 'frank', 'rick'],\n    }\n  }).$mount('#app');\n</script>\n```\n\n\n# v-for的函数文本\n\n[回到顶部](#大纲)\n\n**解析模板的入口**：`vue/src/compiler/index.js`\n\n`ast`由`parse`返回，所以先深入去parse是怎么生成`v-for`的`ast`!\n```typescript\nexport const createCompiler = createCompilerCreator(function baseCompile (\n  template: string,\n  options: CompilerOptions\n): CompiledResult {\n  // parse 生产 ast\n  log('ast:', ast);\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  // generate 生产 渲染用的函数文本\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n```\n\n## 解析出`ast`\n\n解析视图模板主要由`parseHTML`函数实现，而这个函数是比较长，`parseHTML`对`v-for`相关信息的解析，先说明用到的函数，以及对应的作用：\n\n1. `const startTagMatch = parseStartTag()`，parseStartTag是解析开始标签，主要是解析：a. 开始标签这段文本在整个html文本的开始和结束位置，b. 标签内的属性文本的位置，比如`v-for=\"(name, idx) in names\"`的开始和结束位置。\n2. `handleStartTag(startTagMatch)`，根据位置信息进一步接续出属性值，比如`{ name: 'v-for', value: '(name, idx) in names' }`。\n```typescript\n/**\n * Convert HTML string to AST.\n */\nexport function parse (\n  template: string,\n  options: CompilerOptions\n): ASTElement | void {\n  // ...\n  parseHTML(template, {\n    // ...\n    start (tag, attrs, unary, start, end) {\n      // ...\n      let element: ASTElement = createASTElement(tag, attrs, currentParent)\n      log('element:', element);\n      // ...\n    }\n    // ...\n  });\n\n  // ...\n  return root\n}\n\nexport function parseHTML (html, options) {\n  // ...\n  while (html) {\n    // ...\n    // Start tag: 记录属性文本在争端元素字符串开始和结束的位置\n    const startTagMatch = parseStartTag()\n    if (startTagMatch) {\n      // 根据 parseStartTag 解析出来的位置信息，进一步将文本解析成对象解构的属性\n      handleStartTag(startTagMatch)\n      // ...\n    }\n  }\n\n  // advance(推进)，更新html文本\n  function advance (n) {\n    index += n\n    html = html.substring(n)\n  }\n\n  // 1. 找出开始标签的start-index和end-index，\n  // 比如<span name=\"isaac\"></span>中的开始标签就是<span name=\"isaac\">\n  // 2. 找出每个属性文本的始和终index\n  function parseStartTag () {\n    const start = html.match(startTagOpen)\n    log('html.match(startTagOpen):', html);\n    if (start) {\n      const match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      }\n      advance(start[0].length)\n      let end, attr\n      while (\n        !(end = html.match(startTagClose))\n        && (\n          attr = html.match(dynamicArgAttribute)\n          || html.match(attribute)\n        )\n      ) {\n        attr.start = index\n        advance(attr[0].length)\n        attr.end = index\n        match.attrs.push(attr)\n      }\n      if (end) {\n        match.unarySlash = end[1]\n        advance(end[0].length)\n        match.end = index\n        return match\n      }\n    }\n  }\n\n  // 根据 parseStartTag, 得到的文职信息，以及属性的匹配信息\n  // 将属性信息从文本解析成对象\n  function handleStartTag (match) {\n    // ...\n    for (let i = 0; i < l; i++) {\n      const args = match.attrs[i]\n      // ...\n      const attrItem = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      }\n      log('attrItem:', attrItem)\n      /**\n       * output:\n       * it-1: \"attrItem:\" {name: \"v-for\", value: \"(name, idx) in names\"}\n       * it-2: \"attrItem:\" {name: \":key\", value: \"idx\"}\n      */\n      attrs[i] = attrItem;\n      // ...\n    }\n\n    // log('stack:', JSON.parse(JSON.stringify(stack)));\n    if (options.start) {\n      log('attrs:', JSON.parse(JSON.stringify(attrs)));\n      options.start(tagName, attrs, unary, match.start, match.end)\n    }\n  }\n}\n\nconst encodedAttr = /&(?:lt|gt|quot|amp|#39);/g\nconst encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  const re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr\n  return value.replace(re, match => decodingMap[match])\n}\n```\n- `log('attrs:', JSON.parse(JSON.stringify(attrs)));`\n![](./asset/attrs.png)\n\n- `log('element:', element)`\n![](./asset/element.jpg)\n\n- `log('ast:', ast)`\n![](./asset/ast.jpg)\n\n\n## 根据ast解析出函数文本\n\npath: vue/src/compiler/codegen/index.js\n```typescript\nexport function generate (\n  ast: ASTElement | void,\n  options: CompilerOptions\n): CodegenResult {\n  const state = new CodegenState(options)\n  const code = ast ? genElement(ast, state) : '_c(\"div\")'\n  return {\n    render: `with(this){return ${code}}`,\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nexport function genElement (el: ASTElement, state: CodegenState): string {\n  // ...\n\n  if (el.staticRoot && !el.staticProcessed) {\n    // ...\n  } else if (el.for && !el.forProcessed) {\n    const forCode = genFor(el, state);\n    log('forCode', forCode);\n    // output: \"forCode\" \"_l((names),function(name,idx){return _c('dl',{key:idx},[_c('dt',[_v(\"name:\")]),_v(\" \"),_c('dd',[_v(_s(name))])])})\"\n    return forCode;\n  } else {\n    // ...\n  }\n}\n```\n\npath: vue/src/compiler/codegen/index.js\n```typescript\nexport function genFor (\n  el: any,\n  state: CodegenState,\n  altGen?: Function,\n  altHelper?: string\n): string {\n  const log = (...rest) => console.log(Date.now(), `genFor-${rest.shift()}`, ...rest);\n  // exp这名变量名也提醒我们：被遍历的目标，可以直接是变量名，也可以是一段可执行的语句\n  const exp = el.for\n  // 成员临时别名\n  const alias = el.alias\n  // <div v-for=\"(value, name, index) in object\">，中的 name\n  const iterator1 = el.iterator1 ? `,${el.iterator1}` : ''\n  // <div v-for=\"(value, name, index) in object\">，中的 index\n  const iterator2 = el.iterator2 ? `,${el.iterator2}` : ''\n  // ..\n\n  el.forProcessed = true // avoid recursion\n  return  `${altHelper || '_l'}((${exp}),` +\n    `function(${alias}${iterator1}${iterator2}){` +\n      // genElement递归生成\n      `return ${(altGen || genElement)(el, state)}` +\n    '})'\n}\n```\n\n\n\n```typescript\nrenderList((names), function(name,idx) {\n  return _c('dl', {key:idx}, [\n    _c('dt', [createTextVNode(\"name:\")]),\n    createTextVNode(\" \"),\n    _c('dd', [createTextVNode(toString(name))])\n  ])\n})\n```\n\n\n# renderList的实现\n\n[回到顶部](#大纲)\n\n由上面知道最后`v-for`html段落最后被解析出来的函数文本：\n解析v-for模板的函数文本\n```typescript\n_l((names), function(name,idx) {\n  return _c('dl', {key:idx}, [\n    _c('dt', [_v(\"name:\")]),\n    _v(\" \"),\n    _c('dd', [_v(_s(name))])\n  ])\n})\n```\n\n全局搜索一下`_l`就可以找到：\n\n```typescript\nexport function installRenderHelpers (target: any) {\n  // ...\n  target._l = renderList\n  // ...\n}\n```\n\nrenderList函数是`vm._l`的实现，它的功能是遍历`v-for=\"item in list\"`中的list，list可以有多种不同的类型！注意遍历是这个函数功能，元素的渲染则是依赖renderList函数的第二个参数：`ender: (val: any, keyOrIndex: string | number, index?: number) => VNode`。\n\n```typescript\nimport { isObject, isDef, hasSymbol } from 'core/util/index'\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nexport function renderList (\n  // 遍历的目标\n  val: any,\n  // 渲染函数\n  render: (val: any, keyOrIndex: string | number, index?: number) => VNode\n): ?Array<VNode> {\n  let ret: ?Array<VNode>, i, l, keys, key\n  // 1. 遍历一个数组\n  // 2. 遍历一个字符串\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length)\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i)\n    }\n  } \n  // 3. 循环 val 次\n  else if (typeof val === 'number') {\n    ret = new Array(val)\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i)\n    }\n  }\n  // 4. 遍历一个对象\n  else if (isObject(val)) {\n    // 4.1 遍历迭代器\n    /**\n     * 以下内置类型拥有默认的@@iterator方法：\n     *  Array.prototype[@@iterator]()\n     *  TypedArray.prototype[@@iterator]()\n     *  String.prototype[@@iterator]()\n     *  Map.prototype[@@iterator]()\n     *  Set.prototype[@@iterator]()\n     */\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = []\n      const iterator: Iterator<any> = val[Symbol.iterator]()\n      let result = iterator.next()\n      while (!result.done) {\n        ret.push(render(result.value, ret.length))\n        result = iterator.next()\n      }\n    }\n    // 4.2 遍历常规对象\n    else {\n      keys = Object.keys(val)\n      ret = new Array(keys.length)\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i]\n        ret[i] = render(val[key], key, i)\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = []\n  }\n  (ret: any)._isVList = true\n  return ret\n}\n```\n由上面的代码可以知道，`v-for`可以遍历以下几种类型\n\n1. 遍历数组\n2. 遍历类数组的字符串\n3. 循环指定次数\n4. 遍历迭代器\n5. 遍历常规对象\n\n遍历迭代器可能用得比较少，下面有个不算很好的例子：\n\n```html\n<main id=\"app\">\n  <ul>\n    <h3>myIterable: </h3>\n    <li v-for=\"(item, key) in myIterable\">{{key}}: {{item}}</li>\n  </ul>\n</main>\n<script>\n  const vm = new Vue({\n    data: {\n      myIterable: (() => {\n        var myIterable = {}\n        myIterable[Symbol.iterator] = function* () {\n          yield 1;\n          yield 2;\n          yield 3;\n        };\n        return myIterable;\n      })()\n    }\n  }).$mount('#app');\n</script>\n```\n迭代器的详细分析参考：[什么是迭代器？](#)\n\n\n```typescript\nparseHTML(template, {\n  // ...\n  start (tag, attrs, unary, start, end) {\n    // ...\n    let element: ASTElement = createASTElement(tag, attrs, currentParent)\n    // ...\n    else if (!element.processed) {\n      // structural directives\n      processFor(element)\n      // ..\n    }\n  }\n  // ...\n});\n```\n\n\n# 总结\n\n[回到顶部](#大纲)\n\n- v-for视图解析到渲染成html文段的过程\n\n1. 使用`parse`方法解析视图模板，生成ast，其中主要的三个函数是: a. parseStartTag解析属性等主要信息的位置，b. handleStartTag解析属性，c. createASTElement根据解析出的属性等生成元素的ast；\n2. 使用`generate`将ast转化成函数文本，`_l`（`renderlist`）即是`v-for`视图的文本函数，其中主要函数是`genElement`，可递归生成后代元素的函数文本；\n3. 函数文本作为render-watcher.update方法主逻辑\n\n- 从`renderlist`中可以看出v-for可以遍历以下几种类型\n  \n1. 遍历数组\n2. 遍历类数组的字符串\n3. 循环指定次数\n4. 遍历迭代器\n5. 遍历常规对象\n\n","slug":"v-for的原理分析","published":1,"updated":"2023-02-18T00:52:30.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccl000g5onr4miz385q","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#v-for%E7%9A%84%E5%87%BD%E6%95%B0%E6%96%87%E6%9C%AC\">v-for的函数文本</a></li>\n<li><a href=\"#renderList%E7%9A%84%E5%AE%9E%E7%8E%B0\">renderList的实现</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>使用<code>parse</code>解析模板生成<code>ast</code>，<code>v-for</code>相关的属性；</li>\n<li>使用<code>generate</code>，结合<code>ast</code>生成函数文本（<code>code</code>），包含<code>v-for</code>的函数文本是<code>_l(/* ... */)</code>;</li>\n<li>结合<code>code</code>构造<code>render_watcher.update()</code>，从而渲染<code>v-for</code>元素。</li>\n</ul>\n<p>接下来使用一下例子结合源码进行学习：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(name, idx) in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;idx&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>name:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">names</span>: [<span class=\"string\">&#x27;isaac&#x27;</span>, <span class=\"string\">&#x27;frank&#x27;</span>, <span class=\"string\">&#x27;rick&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"v-for的函数文本\"><a href=\"#v-for的函数文本\" class=\"headerlink\" title=\"v-for的函数文本\"></a>v-for的函数文本</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p><strong>解析模板的入口</strong>：<code>vue/src/compiler/index.js</code></p>\n<p><code>ast</code>由<code>parse</code>返回，所以先深入去parse是怎么生成<code>v-for</code>的<code>ast</code>!</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompiler = <span class=\"title function_\">createCompilerCreator</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">baseCompile</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CompiledResult</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// parse 生产 ast</span></span><br><span class=\"line\">  <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ast:&#x27;</span>, ast);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template.<span class=\"title function_\">trim</span>(), options)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">optimize</span> !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">optimize</span>(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// generate 生产 渲染用的函数文本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast, options)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: code.<span class=\"property\">render</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: code.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析出ast\"><a href=\"#解析出ast\" class=\"headerlink\" title=\"解析出ast\"></a>解析出<code>ast</code></h2><p>解析视图模板主要由<code>parseHTML</code>函数实现，而这个函数是比较长，<code>parseHTML</code>对<code>v-for</code>相关信息的解析，先说明用到的函数，以及对应的作用：</p>\n<ol>\n<li><code>const startTagMatch = parseStartTag()</code>，parseStartTag是解析开始标签，主要是解析：a. 开始标签这段文本在整个html文本的开始和结束位置，b. 标签内的属性文本的位置，比如<code>v-for=&quot;(name, idx) in names&quot;</code>的开始和结束位置。</li>\n<li><code>handleStartTag(startTagMatch)</code>，根据位置信息进一步接续出属性值，比如<code>&#123; name: &#39;v-for&#39;, value: &#39;(name, idx) in names&#39; &#125;</code>。<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convert HTML string to AST.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parse</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">ASTElement</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">parseHTML</span>(template, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    start (tag, attrs, unary, start, end) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"attr\">element</span>: <span class=\"title class_\">ASTElement</span> = <span class=\"title function_\">createASTElement</span>(tag, attrs, currentParent)</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;element:&#x27;</span>, element);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseHTML</span> (html, options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (html) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// Start tag: 记录属性文本在争端元素字符串开始和结束的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> startTagMatch = <span class=\"title function_\">parseStartTag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startTagMatch) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据 parseStartTag 解析出来的位置信息，进一步将文本解析成对象解构的属性</span></span><br><span class=\"line\">      <span class=\"title function_\">handleStartTag</span>(startTagMatch)</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// advance(推进)，更新html文本</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">advance</span> (n) &#123;</span><br><span class=\"line\">    index += n</span><br><span class=\"line\">    html = html.<span class=\"title function_\">substring</span>(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. 找出开始标签的start-index和end-index，</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如&lt;span name=&quot;isaac&quot;&gt;&lt;/span&gt;中的开始标签就是&lt;span name=&quot;isaac&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 找出每个属性文本的始和终index</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">parseStartTag</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> start = html.<span class=\"title function_\">match</span>(startTagOpen)</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;html.match(startTagOpen):&#x27;</span>, html);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">        <span class=\"attr\">tagName</span>: start[<span class=\"number\">1</span>],</span><br><span class=\"line\">        <span class=\"attr\">attrs</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">start</span>: index</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">advance</span>(start[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> end, attr</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (</span><br><span class=\"line\">        !(end = html.<span class=\"title function_\">match</span>(startTagClose))</span><br><span class=\"line\">        &amp;&amp; (</span><br><span class=\"line\">          attr = html.<span class=\"title function_\">match</span>(dynamicArgAttribute)</span><br><span class=\"line\">          || html.<span class=\"title function_\">match</span>(attribute)</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        attr.<span class=\"property\">start</span> = index</span><br><span class=\"line\">        <span class=\"title function_\">advance</span>(attr[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">        attr.<span class=\"property\">end</span> = index</span><br><span class=\"line\">        match.<span class=\"property\">attrs</span>.<span class=\"title function_\">push</span>(attr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (end) &#123;</span><br><span class=\"line\">        match.<span class=\"property\">unarySlash</span> = end[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"title function_\">advance</span>(end[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">        match.<span class=\"property\">end</span> = index</span><br><span class=\"line\">        <span class=\"keyword\">return</span> match</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 parseStartTag, 得到的文职信息，以及属性的匹配信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 将属性信息从文本解析成对象</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleStartTag</span> (match) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = match.<span class=\"property\">attrs</span>[i]</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> attrItem = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: args[<span class=\"number\">1</span>],</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"title function_\">decodeAttr</span>(value, shouldDecodeNewlines)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;attrItem:&#x27;</span>, attrItem)</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * output:</span></span><br><span class=\"line\"><span class=\"comment\">       * it-1: &quot;attrItem:&quot; &#123;name: &quot;v-for&quot;, value: &quot;(name, idx) in names&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">       * it-2: &quot;attrItem:&quot; &#123;name: &quot;:key&quot;, value: &quot;idx&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      attrs[i] = attrItem;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// log(&#x27;stack:&#x27;, JSON.parse(JSON.stringify(stack)));</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">start</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;attrs:&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(attrs)));</span><br><span class=\"line\">      options.<span class=\"title function_\">start</span>(tagName, attrs, unary, match.<span class=\"property\">start</span>, match.<span class=\"property\">end</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedAttr = <span class=\"regexp\">/&amp;(?:lt|gt|quot|amp|#39);/g</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedAttrWithNewLines = <span class=\"regexp\">/&amp;(?:lt|gt|quot|amp|#39|#10|#9);/g</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">decodeAttr</span> (value, shouldDecodeNewlines) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value.<span class=\"title function_\">replace</span>(re, <span class=\"function\"><span class=\"params\">match</span> =&gt;</span> decodingMap[match])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p><code>log(&#39;attrs:&#39;, JSON.parse(JSON.stringify(attrs)));</code><br><img src=\"/blog/./asset/attrs.png\"></p>\n</li>\n<li><p><code>log(&#39;element:&#39;, element)</code><br><img src=\"/blog/./asset/element.jpg\"></p>\n</li>\n<li><p><code>log(&#39;ast:&#39;, ast)</code><br><img src=\"/blog/./asset/ast.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"根据ast解析出函数文本\"><a href=\"#根据ast解析出函数文本\" class=\"headerlink\" title=\"根据ast解析出函数文本\"></a>根据ast解析出函数文本</h2><p>path: vue&#x2F;src&#x2F;compiler&#x2F;codegen&#x2F;index.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">generate</span> (</span><br><span class=\"line\">  <span class=\"attr\">ast</span>: <span class=\"title class_\">ASTElement</span> | <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CodegenResult</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"keyword\">new</span> <span class=\"title class_\">CodegenState</span>(options)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = ast ? <span class=\"title function_\">genElement</span>(ast, state) : <span class=\"string\">&#x27;_c(&quot;div&quot;)&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: state.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genElement</span> (<span class=\"attr\">el</span>: <span class=\"title class_\">ASTElement</span>, <span class=\"attr\">state</span>: <span class=\"title class_\">CodegenState</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.<span class=\"property\">staticRoot</span> &amp;&amp; !el.<span class=\"property\">staticProcessed</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.<span class=\"property\">for</span> &amp;&amp; !el.<span class=\"property\">forProcessed</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forCode = <span class=\"title function_\">genFor</span>(el, state);</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forCode&#x27;</span>, forCode);</span><br><span class=\"line\">    <span class=\"comment\">// output: &quot;forCode&quot; &quot;_l((names),function(name,idx)&#123;return _c(&#x27;dl&#x27;,&#123;key:idx&#125;,[_c(&#x27;dt&#x27;,[_v(&quot;name:&quot;)]),_v(&quot; &quot;),_c(&#x27;dd&#x27;,[_v(_s(name))])])&#125;)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forCode;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>path: vue&#x2F;src&#x2F;compiler&#x2F;codegen&#x2F;index.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genFor</span> (</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"title class_\">CodegenState</span>,</span><br><span class=\"line\">  altGen?: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  altHelper?: <span class=\"built_in\">string</span></span><br><span class=\"line\">): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">log</span> = (<span class=\"params\">...rest</span>) =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>(), <span class=\"string\">`genFor-<span class=\"subst\">$&#123;rest.shift()&#125;</span>`</span>, ...rest);</span><br><span class=\"line\">  <span class=\"comment\">// exp这名变量名也提醒我们：被遍历的目标，可以直接是变量名，也可以是一段可执行的语句</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> exp = el.<span class=\"property\">for</span></span><br><span class=\"line\">  <span class=\"comment\">// 成员临时别名</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> alias = el.<span class=\"property\">alias</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;div v-for=&quot;(value, name, index) in object&quot;&gt;，中的 name</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator1 = el.<span class=\"property\">iterator1</span> ? <span class=\"string\">`,<span class=\"subst\">$&#123;el.iterator1&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;div v-for=&quot;(value, name, index) in object&quot;&gt;，中的 index</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator2 = el.<span class=\"property\">iterator2</span> ? <span class=\"string\">`,<span class=\"subst\">$&#123;el.iterator2&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  el.<span class=\"property\">forProcessed</span> = <span class=\"literal\">true</span> <span class=\"comment\">// avoid recursion</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"string\">`<span class=\"subst\">$&#123;altHelper || <span class=\"string\">&#x27;_l&#x27;</span>&#125;</span>((<span class=\"subst\">$&#123;exp&#125;</span>),`</span> +</span><br><span class=\"line\">    <span class=\"string\">`function(<span class=\"subst\">$&#123;alias&#125;</span><span class=\"subst\">$&#123;iterator1&#125;</span><span class=\"subst\">$&#123;iterator2&#125;</span>)&#123;`</span> +</span><br><span class=\"line\">      <span class=\"comment\">// genElement递归生成</span></span><br><span class=\"line\">      <span class=\"string\">`return <span class=\"subst\">$&#123;(altGen || genElement)(el, state)&#125;</span>`</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#125;)&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">renderList</span>((names), <span class=\"keyword\">function</span>(<span class=\"params\">name,idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dl&#x27;</span>, &#123;<span class=\"attr\">key</span>:idx&#125;, [</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dt&#x27;</span>, [<span class=\"title function_\">createTextVNode</span>(<span class=\"string\">&quot;name:&quot;</span>)]),</span><br><span class=\"line\">    <span class=\"title function_\">createTextVNode</span>(<span class=\"string\">&quot; &quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dd&#x27;</span>, [<span class=\"title function_\">createTextVNode</span>(<span class=\"title function_\">toString</span>(name))])</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"renderList的实现\"><a href=\"#renderList的实现\" class=\"headerlink\" title=\"renderList的实现\"></a>renderList的实现</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>由上面知道最后<code>v-for</code>html段落最后被解析出来的函数文本：<br>解析v-for模板的函数文本</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">_l</span>((names), <span class=\"keyword\">function</span>(<span class=\"params\">name,idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dl&#x27;</span>, &#123;<span class=\"attr\">key</span>:idx&#125;, [</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dt&#x27;</span>, [<span class=\"title function_\">_v</span>(<span class=\"string\">&quot;name:&quot;</span>)]),</span><br><span class=\"line\">    <span class=\"title function_\">_v</span>(<span class=\"string\">&quot; &quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dd&#x27;</span>, [<span class=\"title function_\">_v</span>(<span class=\"title function_\">_s</span>(name))])</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>全局搜索一下<code>_l</code>就可以找到：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">installRenderHelpers</span> (<span class=\"attr\">target</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  target.<span class=\"property\">_l</span> = renderList</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>renderList函数是<code>vm._l</code>的实现，它的功能是遍历<code>v-for=&quot;item in list&quot;</code>中的list，list可以有多种不同的类型！注意遍历是这个函数功能，元素的渲染则是依赖renderList函数的第二个参数：<code>ender: (val: any, keyOrIndex: string | number, index?: number) =&gt; VNode</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isObject, isDef, hasSymbol &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;core/util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime helper for rendering v-for lists.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">renderList</span> (</span><br><span class=\"line\">  <span class=\"comment\">// 遍历的目标</span></span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 渲染函数</span></span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">val: <span class=\"built_in\">any</span>, keyOrIndex: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>, index?: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"title class_\">VNode</span></span><br><span class=\"line\">): ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ret</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;, i, l, keys, key</span><br><span class=\"line\">  <span class=\"comment\">// 1. 遍历一个数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 遍历一个字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(val) || <span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(val.<span class=\"property\">length</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = val.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      ret[i] = <span class=\"title function_\">render</span>(val[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 3. 循环 val 次</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(val)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val; i++) &#123;</span><br><span class=\"line\">      ret[i] = <span class=\"title function_\">render</span>(i + <span class=\"number\">1</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 4. 遍历一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isObject</span>(val)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 4.1 遍历迭代器</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以下内置类型拥有默认的@<span class=\"doctag\">@iterator</span>方法：</span></span><br><span class=\"line\"><span class=\"comment\">     *  Array.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  TypedArray.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  String.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  Map.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  Set.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasSymbol &amp;&amp; val[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]) &#123;</span><br><span class=\"line\">      ret = []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">iterator</span>: <span class=\"title class_\">Iterator</span>&lt;<span class=\"built_in\">any</span>&gt; = val[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(<span class=\"title function_\">render</span>(result.<span class=\"property\">value</span>, ret.<span class=\"property\">length</span>))</span><br><span class=\"line\">        result = iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.2 遍历常规对象</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(val)</span><br><span class=\"line\">      ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(keys.<span class=\"property\">length</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = keys.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        key = keys[i]</span><br><span class=\"line\">        ret[i] = <span class=\"title function_\">render</span>(val[key], key, i)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isDef</span>(ret)) &#123;</span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  (<span class=\"attr\">ret</span>: <span class=\"built_in\">any</span>).<span class=\"property\">_isVList</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上面的代码可以知道，<code>v-for</code>可以遍历以下几种类型</p>\n<ol>\n<li>遍历数组</li>\n<li>遍历类数组的字符串</li>\n<li>循环指定次数</li>\n<li>遍历迭代器</li>\n<li>遍历常规对象</li>\n</ol>\n<p>遍历迭代器可能用得比较少，下面有个不算很好的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>myIterable: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in myIterable&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myIterable</span>: (<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> myIterable = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        myIterable[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>* () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> myIterable;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>迭代器的详细分析参考：<a href=\"#\">什么是迭代器？</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">parseHTML</span>(template, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  start (tag, attrs, unary, start, end) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">element</span>: <span class=\"title class_\">ASTElement</span> = <span class=\"title function_\">createASTElement</span>(tag, attrs, currentParent)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!element.<span class=\"property\">processed</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// structural directives</span></span><br><span class=\"line\">      <span class=\"title function_\">processFor</span>(element)</span><br><span class=\"line\">      <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ul>\n<li>v-for视图解析到渲染成html文段的过程</li>\n</ul>\n<ol>\n<li>使用<code>parse</code>方法解析视图模板，生成ast，其中主要的三个函数是: a. parseStartTag解析属性等主要信息的位置，b. handleStartTag解析属性，c. createASTElement根据解析出的属性等生成元素的ast；</li>\n<li>使用<code>generate</code>将ast转化成函数文本，<code>_l</code>（<code>renderlist</code>）即是<code>v-for</code>视图的文本函数，其中主要函数是<code>genElement</code>，可递归生成后代元素的函数文本；</li>\n<li>函数文本作为render-watcher.update方法主逻辑</li>\n</ol>\n<ul>\n<li>从<code>renderlist</code>中可以看出v-for可以遍历以下几种类型</li>\n</ul>\n<ol>\n<li>遍历数组</li>\n<li>遍历类数组的字符串</li>\n<li>循环指定次数</li>\n<li>遍历迭代器</li>\n<li>遍历常规对象</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#v-for%E7%9A%84%E5%87%BD%E6%95%B0%E6%96%87%E6%9C%AC\">v-for的函数文本</a></li>\n<li><a href=\"#renderList%E7%9A%84%E5%AE%9E%E7%8E%B0\">renderList的实现</a></li>\n</ul>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><ul>\n<li>使用<code>parse</code>解析模板生成<code>ast</code>，<code>v-for</code>相关的属性；</li>\n<li>使用<code>generate</code>，结合<code>ast</code>生成函数文本（<code>code</code>），包含<code>v-for</code>的函数文本是<code>_l(/* ... */)</code>;</li>\n<li>结合<code>code</code>构造<code>render_watcher.update()</code>，从而渲染<code>v-for</code>元素。</li>\n</ul>\n<p>接下来使用一下例子结合源码进行学习：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(name, idx) in names&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;idx&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dt</span>&gt;</span>name:<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dd</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">dd</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">names</span>: [<span class=\"string\">&#x27;isaac&#x27;</span>, <span class=\"string\">&#x27;frank&#x27;</span>, <span class=\"string\">&#x27;rick&#x27;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"v-for的函数文本\"><a href=\"#v-for的函数文本\" class=\"headerlink\" title=\"v-for的函数文本\"></a>v-for的函数文本</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p><strong>解析模板的入口</strong>：<code>vue/src/compiler/index.js</code></p>\n<p><code>ast</code>由<code>parse</code>返回，所以先深入去parse是怎么生成<code>v-for</code>的<code>ast</code>!</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createCompiler = <span class=\"title function_\">createCompilerCreator</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">baseCompile</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CompiledResult</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// parse 生产 ast</span></span><br><span class=\"line\">  <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;ast:&#x27;</span>, ast);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = <span class=\"title function_\">parse</span>(template.<span class=\"title function_\">trim</span>(), options)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.<span class=\"property\">optimize</span> !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">optimize</span>(ast, options)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// generate 生产 渲染用的函数文本</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = <span class=\"title function_\">generate</span>(ast, options)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ast,</span><br><span class=\"line\">    <span class=\"attr\">render</span>: code.<span class=\"property\">render</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: code.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解析出ast\"><a href=\"#解析出ast\" class=\"headerlink\" title=\"解析出ast\"></a>解析出<code>ast</code></h2><p>解析视图模板主要由<code>parseHTML</code>函数实现，而这个函数是比较长，<code>parseHTML</code>对<code>v-for</code>相关信息的解析，先说明用到的函数，以及对应的作用：</p>\n<ol>\n<li><code>const startTagMatch = parseStartTag()</code>，parseStartTag是解析开始标签，主要是解析：a. 开始标签这段文本在整个html文本的开始和结束位置，b. 标签内的属性文本的位置，比如<code>v-for=&quot;(name, idx) in names&quot;</code>的开始和结束位置。</li>\n<li><code>handleStartTag(startTagMatch)</code>，根据位置信息进一步接续出属性值，比如<code>&#123; name: &#39;v-for&#39;, value: &#39;(name, idx) in names&#39; &#125;</code>。<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convert HTML string to AST.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parse</span> (</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">ASTElement</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"title function_\">parseHTML</span>(template, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    start (tag, attrs, unary, start, end) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> <span class=\"attr\">element</span>: <span class=\"title class_\">ASTElement</span> = <span class=\"title function_\">createASTElement</span>(tag, attrs, currentParent)</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;element:&#x27;</span>, element);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> root</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parseHTML</span> (html, options) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (html) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// Start tag: 记录属性文本在争端元素字符串开始和结束的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> startTagMatch = <span class=\"title function_\">parseStartTag</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startTagMatch) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 根据 parseStartTag 解析出来的位置信息，进一步将文本解析成对象解构的属性</span></span><br><span class=\"line\">      <span class=\"title function_\">handleStartTag</span>(startTagMatch)</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// advance(推进)，更新html文本</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">advance</span> (n) &#123;</span><br><span class=\"line\">    index += n</span><br><span class=\"line\">    html = html.<span class=\"title function_\">substring</span>(n)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1. 找出开始标签的start-index和end-index，</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如&lt;span name=&quot;isaac&quot;&gt;&lt;/span&gt;中的开始标签就是&lt;span name=&quot;isaac&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 找出每个属性文本的始和终index</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">parseStartTag</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> start = html.<span class=\"title function_\">match</span>(startTagOpen)</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;html.match(startTagOpen):&#x27;</span>, html);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> match = &#123;</span><br><span class=\"line\">        <span class=\"attr\">tagName</span>: start[<span class=\"number\">1</span>],</span><br><span class=\"line\">        <span class=\"attr\">attrs</span>: [],</span><br><span class=\"line\">        <span class=\"attr\">start</span>: index</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">advance</span>(start[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> end, attr</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (</span><br><span class=\"line\">        !(end = html.<span class=\"title function_\">match</span>(startTagClose))</span><br><span class=\"line\">        &amp;&amp; (</span><br><span class=\"line\">          attr = html.<span class=\"title function_\">match</span>(dynamicArgAttribute)</span><br><span class=\"line\">          || html.<span class=\"title function_\">match</span>(attribute)</span><br><span class=\"line\">        )</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        attr.<span class=\"property\">start</span> = index</span><br><span class=\"line\">        <span class=\"title function_\">advance</span>(attr[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">        attr.<span class=\"property\">end</span> = index</span><br><span class=\"line\">        match.<span class=\"property\">attrs</span>.<span class=\"title function_\">push</span>(attr)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (end) &#123;</span><br><span class=\"line\">        match.<span class=\"property\">unarySlash</span> = end[<span class=\"number\">1</span>]</span><br><span class=\"line\">        <span class=\"title function_\">advance</span>(end[<span class=\"number\">0</span>].<span class=\"property\">length</span>)</span><br><span class=\"line\">        match.<span class=\"property\">end</span> = index</span><br><span class=\"line\">        <span class=\"keyword\">return</span> match</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据 parseStartTag, 得到的文职信息，以及属性的匹配信息</span></span><br><span class=\"line\">  <span class=\"comment\">// 将属性信息从文本解析成对象</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">handleStartTag</span> (match) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> args = match.<span class=\"property\">attrs</span>[i]</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> attrItem = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: args[<span class=\"number\">1</span>],</span><br><span class=\"line\">        <span class=\"attr\">value</span>: <span class=\"title function_\">decodeAttr</span>(value, shouldDecodeNewlines)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;attrItem:&#x27;</span>, attrItem)</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * output:</span></span><br><span class=\"line\"><span class=\"comment\">       * it-1: &quot;attrItem:&quot; &#123;name: &quot;v-for&quot;, value: &quot;(name, idx) in names&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">       * it-2: &quot;attrItem:&quot; &#123;name: &quot;:key&quot;, value: &quot;idx&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      attrs[i] = attrItem;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// log(&#x27;stack:&#x27;, JSON.parse(JSON.stringify(stack)));</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">start</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;attrs:&#x27;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(attrs)));</span><br><span class=\"line\">      options.<span class=\"title function_\">start</span>(tagName, attrs, unary, match.<span class=\"property\">start</span>, match.<span class=\"property\">end</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedAttr = <span class=\"regexp\">/&amp;(?:lt|gt|quot|amp|#39);/g</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedAttrWithNewLines = <span class=\"regexp\">/&amp;(?:lt|gt|quot|amp|#39|#10|#9);/g</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">decodeAttr</span> (value, shouldDecodeNewlines) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value.<span class=\"title function_\">replace</span>(re, <span class=\"function\"><span class=\"params\">match</span> =&gt;</span> decodingMap[match])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li><p><code>log(&#39;attrs:&#39;, JSON.parse(JSON.stringify(attrs)));</code><br><img src=\"/blog/./asset/attrs.png\"></p>\n</li>\n<li><p><code>log(&#39;element:&#39;, element)</code><br><img src=\"/blog/./asset/element.jpg\"></p>\n</li>\n<li><p><code>log(&#39;ast:&#39;, ast)</code><br><img src=\"/blog/./asset/ast.jpg\"></p>\n</li>\n</ul>\n<h2 id=\"根据ast解析出函数文本\"><a href=\"#根据ast解析出函数文本\" class=\"headerlink\" title=\"根据ast解析出函数文本\"></a>根据ast解析出函数文本</h2><p>path: vue&#x2F;src&#x2F;compiler&#x2F;codegen&#x2F;index.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">generate</span> (</span><br><span class=\"line\">  <span class=\"attr\">ast</span>: <span class=\"title class_\">ASTElement</span> | <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span></span><br><span class=\"line\">): <span class=\"title class_\">CodegenResult</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = <span class=\"keyword\">new</span> <span class=\"title class_\">CodegenState</span>(options)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> code = ast ? <span class=\"title function_\">genElement</span>(ast, state) : <span class=\"string\">&#x27;_c(&quot;div&quot;)&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">render</span>: <span class=\"string\">`with(this)&#123;return <span class=\"subst\">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRenderFns</span>: state.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genElement</span> (<span class=\"attr\">el</span>: <span class=\"title class_\">ASTElement</span>, <span class=\"attr\">state</span>: <span class=\"title class_\">CodegenState</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.<span class=\"property\">staticRoot</span> &amp;&amp; !el.<span class=\"property\">staticProcessed</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.<span class=\"property\">for</span> &amp;&amp; !el.<span class=\"property\">forProcessed</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> forCode = <span class=\"title function_\">genFor</span>(el, state);</span><br><span class=\"line\">    <span class=\"title function_\">log</span>(<span class=\"string\">&#x27;forCode&#x27;</span>, forCode);</span><br><span class=\"line\">    <span class=\"comment\">// output: &quot;forCode&quot; &quot;_l((names),function(name,idx)&#123;return _c(&#x27;dl&#x27;,&#123;key:idx&#125;,[_c(&#x27;dt&#x27;,[_v(&quot;name:&quot;)]),_v(&quot; &quot;),_c(&#x27;dd&#x27;,[_v(_s(name))])])&#125;)&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> forCode;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>path: vue&#x2F;src&#x2F;compiler&#x2F;codegen&#x2F;index.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genFor</span> (</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"title class_\">CodegenState</span>,</span><br><span class=\"line\">  altGen?: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">  altHelper?: <span class=\"built_in\">string</span></span><br><span class=\"line\">): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">log</span> = (<span class=\"params\">...rest</span>) =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>(), <span class=\"string\">`genFor-<span class=\"subst\">$&#123;rest.shift()&#125;</span>`</span>, ...rest);</span><br><span class=\"line\">  <span class=\"comment\">// exp这名变量名也提醒我们：被遍历的目标，可以直接是变量名，也可以是一段可执行的语句</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> exp = el.<span class=\"property\">for</span></span><br><span class=\"line\">  <span class=\"comment\">// 成员临时别名</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> alias = el.<span class=\"property\">alias</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;div v-for=&quot;(value, name, index) in object&quot;&gt;，中的 name</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator1 = el.<span class=\"property\">iterator1</span> ? <span class=\"string\">`,<span class=\"subst\">$&#123;el.iterator1&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// &lt;div v-for=&quot;(value, name, index) in object&quot;&gt;，中的 index</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> iterator2 = el.<span class=\"property\">iterator2</span> ? <span class=\"string\">`,<span class=\"subst\">$&#123;el.iterator2&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">  el.<span class=\"property\">forProcessed</span> = <span class=\"literal\">true</span> <span class=\"comment\">// avoid recursion</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"string\">`<span class=\"subst\">$&#123;altHelper || <span class=\"string\">&#x27;_l&#x27;</span>&#125;</span>((<span class=\"subst\">$&#123;exp&#125;</span>),`</span> +</span><br><span class=\"line\">    <span class=\"string\">`function(<span class=\"subst\">$&#123;alias&#125;</span><span class=\"subst\">$&#123;iterator1&#125;</span><span class=\"subst\">$&#123;iterator2&#125;</span>)&#123;`</span> +</span><br><span class=\"line\">      <span class=\"comment\">// genElement递归生成</span></span><br><span class=\"line\">      <span class=\"string\">`return <span class=\"subst\">$&#123;(altGen || genElement)(el, state)&#125;</span>`</span> +</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#125;)&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">renderList</span>((names), <span class=\"keyword\">function</span>(<span class=\"params\">name,idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dl&#x27;</span>, &#123;<span class=\"attr\">key</span>:idx&#125;, [</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dt&#x27;</span>, [<span class=\"title function_\">createTextVNode</span>(<span class=\"string\">&quot;name:&quot;</span>)]),</span><br><span class=\"line\">    <span class=\"title function_\">createTextVNode</span>(<span class=\"string\">&quot; &quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dd&#x27;</span>, [<span class=\"title function_\">createTextVNode</span>(<span class=\"title function_\">toString</span>(name))])</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"renderList的实现\"><a href=\"#renderList的实现\" class=\"headerlink\" title=\"renderList的实现\"></a>renderList的实现</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>由上面知道最后<code>v-for</code>html段落最后被解析出来的函数文本：<br>解析v-for模板的函数文本</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">_l</span>((names), <span class=\"keyword\">function</span>(<span class=\"params\">name,idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dl&#x27;</span>, &#123;<span class=\"attr\">key</span>:idx&#125;, [</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dt&#x27;</span>, [<span class=\"title function_\">_v</span>(<span class=\"string\">&quot;name:&quot;</span>)]),</span><br><span class=\"line\">    <span class=\"title function_\">_v</span>(<span class=\"string\">&quot; &quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">_c</span>(<span class=\"string\">&#x27;dd&#x27;</span>, [<span class=\"title function_\">_v</span>(<span class=\"title function_\">_s</span>(name))])</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>全局搜索一下<code>_l</code>就可以找到：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">installRenderHelpers</span> (<span class=\"attr\">target</span>: <span class=\"built_in\">any</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  target.<span class=\"property\">_l</span> = renderList</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>renderList函数是<code>vm._l</code>的实现，它的功能是遍历<code>v-for=&quot;item in list&quot;</code>中的list，list可以有多种不同的类型！注意遍历是这个函数功能，元素的渲染则是依赖renderList函数的第二个参数：<code>ender: (val: any, keyOrIndex: string | number, index?: number) =&gt; VNode</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isObject, isDef, hasSymbol &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;core/util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Runtime helper for rendering v-for lists.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">renderList</span> (</span><br><span class=\"line\">  <span class=\"comment\">// 遍历的目标</span></span><br><span class=\"line\">  <span class=\"attr\">val</span>: <span class=\"built_in\">any</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 渲染函数</span></span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">val: <span class=\"built_in\">any</span>, keyOrIndex: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>, index?: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"title class_\">VNode</span></span><br><span class=\"line\">): ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">ret</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;, i, l, keys, key</span><br><span class=\"line\">  <span class=\"comment\">// 1. 遍历一个数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 遍历一个字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(val) || <span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(val.<span class=\"property\">length</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = val.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">      ret[i] = <span class=\"title function_\">render</span>(val[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"comment\">// 3. 循环 val 次</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">    ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(val)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; val; i++) &#123;</span><br><span class=\"line\">      ret[i] = <span class=\"title function_\">render</span>(i + <span class=\"number\">1</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 4. 遍历一个对象</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isObject</span>(val)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 4.1 遍历迭代器</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 以下内置类型拥有默认的@<span class=\"doctag\">@iterator</span>方法：</span></span><br><span class=\"line\"><span class=\"comment\">     *  Array.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  TypedArray.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  String.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  Map.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     *  Set.prototype[@<span class=\"doctag\">@iterator</span>]()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasSymbol &amp;&amp; val[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]) &#123;</span><br><span class=\"line\">      ret = []</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">iterator</span>: <span class=\"title class_\">Iterator</span>&lt;<span class=\"built_in\">any</span>&gt; = val[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (!result.<span class=\"property\">done</span>) &#123;</span><br><span class=\"line\">        ret.<span class=\"title function_\">push</span>(<span class=\"title function_\">render</span>(result.<span class=\"property\">value</span>, ret.<span class=\"property\">length</span>))</span><br><span class=\"line\">        result = iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.2 遍历常规对象</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(val)</span><br><span class=\"line\">      ret = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(keys.<span class=\"property\">length</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = keys.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        key = keys[i]</span><br><span class=\"line\">        ret[i] = <span class=\"title function_\">render</span>(val[key], key, i)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isDef</span>(ret)) &#123;</span><br><span class=\"line\">    ret = []</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  (<span class=\"attr\">ret</span>: <span class=\"built_in\">any</span>).<span class=\"property\">_isVList</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上面的代码可以知道，<code>v-for</code>可以遍历以下几种类型</p>\n<ol>\n<li>遍历数组</li>\n<li>遍历类数组的字符串</li>\n<li>循环指定次数</li>\n<li>遍历迭代器</li>\n<li>遍历常规对象</li>\n</ol>\n<p>遍历迭代器可能用得比较少，下面有个不算很好的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">main</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>myIterable: <span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, key) in myIterable&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;: &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">myIterable</span>: (<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> myIterable = &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        myIterable[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>] = <span class=\"keyword\">function</span>* () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> myIterable;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;)()</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>迭代器的详细分析参考：<a href=\"#\">什么是迭代器？</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">parseHTML</span>(template, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  start (tag, attrs, unary, start, end) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">element</span>: <span class=\"title class_\">ASTElement</span> = <span class=\"title function_\">createASTElement</span>(tag, attrs, currentParent)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!element.<span class=\"property\">processed</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// structural directives</span></span><br><span class=\"line\">      <span class=\"title function_\">processFor</span>(element)</span><br><span class=\"line\">      <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<ul>\n<li>v-for视图解析到渲染成html文段的过程</li>\n</ul>\n<ol>\n<li>使用<code>parse</code>方法解析视图模板，生成ast，其中主要的三个函数是: a. parseStartTag解析属性等主要信息的位置，b. handleStartTag解析属性，c. createASTElement根据解析出的属性等生成元素的ast；</li>\n<li>使用<code>generate</code>将ast转化成函数文本，<code>_l</code>（<code>renderlist</code>）即是<code>v-for</code>视图的文本函数，其中主要函数是<code>genElement</code>，可递归生成后代元素的函数文本；</li>\n<li>函数文本作为render-watcher.update方法主逻辑</li>\n</ol>\n<ul>\n<li>从<code>renderlist</code>中可以看出v-for可以遍历以下几种类型</li>\n</ul>\n<ol>\n<li>遍历数组</li>\n<li>遍历类数组的字符串</li>\n<li>循环指定次数</li>\n<li>遍历迭代器</li>\n<li>遍历常规对象</li>\n</ol>"},{"title":"vnode的内部实现","date":"2019-11-21T00:41:47.000Z","excerpt":" ","_content":"\n\npath: vue/src/core/vdom/vnode.js\n```typescript\n/* @flow */\n\nexport default class VNode {\n  tag: string | void;\n  data: VNodeData | void;\n  children: ?Array<VNode>;\n  text: string | void;\n  elm: Node | void;\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n\n  // strictly internal\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n  asyncFactory: Function | void; // async component factory function\n  asyncMeta: Object | void;\n  isAsyncPlaceholder: boolean;\n  ssrContext: Object | void;\n  fnContext: Component | void; // real context vm for functional nodes\n  fnOptions: ?ComponentOptions; // for SSR caching\n  devtoolsMeta: ?Object; // used to store functional render context for devtools\n  fnScopeId: ?string; // functional scope id support\n\n  constructor (\n    tag?: string,\n    data?: VNodeData,\n    children?: ?Array<VNode>,\n    text?: string,\n    elm?: Node,\n    context?: Component,\n    componentOptions?: VNodeComponentOptions,\n    asyncFactory?: Function\n  ) {\n    // 标签名，小写\n    this.tag = tag\n\n    // 标签上的属性数据\n    this.data = data\n\n    // 儿子虚拟节点（vnode）\n    this.children = children\n    this.text = text\n\n    // 真是元素的引用\n    this.elm = elm\n    this.ns = undefined\n    \n    // 节点所在vue实例\n    this.context = context\n    this.fnContext = undefined\n    this.fnOptions = undefined\n    this.fnScopeId = undefined\n    // v-for元素的key\n    this.key = data && data.key\n    this.componentOptions = componentOptions\n    this.componentInstance = undefined\n    this.parent = undefined\n    this.raw = false\n    this.isStatic = false\n    this.isRootInsert = true\n    this.isComment = false\n    this.isCloned = false\n    this.isOnce = false\n    this.asyncFactory = asyncFactory\n    this.asyncMeta = undefined\n    this.isAsyncPlaceholder = false\n  }\n\n  // DEPRECATED: alias for componentInstance for backwards compat.\n  /* istanbul ignore next */\n  get child (): Component | void {\n    return this.componentInstance\n  }\n}\n\nexport const createEmptyVNode = (text: string = '') => {\n  const node = new VNode()\n  node.text = text\n  node.isComment = true\n  return node\n}\n\nexport function createTextVNode (val: string | number) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nexport function cloneVNode (vnode: VNode): VNode {\n  const cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  )\n  cloned.ns = vnode.ns\n  cloned.isStatic = vnode.isStatic\n  cloned.key = vnode.key\n  cloned.isComment = vnode.isComment\n  cloned.fnContext = vnode.fnContext\n  cloned.fnOptions = vnode.fnOptions\n  cloned.fnScopeId = vnode.fnScopeId\n  cloned.asyncMeta = vnode.asyncMeta\n  cloned.isCloned = true\n  return cloned\n}\n\n```\n","source":"_posts/vnode的内部实现.md","raw":"---\ntitle: vnode的内部实现\ndate: 2019-11-21 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\nexcerpt: \" \"\n---\n\n\npath: vue/src/core/vdom/vnode.js\n```typescript\n/* @flow */\n\nexport default class VNode {\n  tag: string | void;\n  data: VNodeData | void;\n  children: ?Array<VNode>;\n  text: string | void;\n  elm: Node | void;\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n\n  // strictly internal\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n  asyncFactory: Function | void; // async component factory function\n  asyncMeta: Object | void;\n  isAsyncPlaceholder: boolean;\n  ssrContext: Object | void;\n  fnContext: Component | void; // real context vm for functional nodes\n  fnOptions: ?ComponentOptions; // for SSR caching\n  devtoolsMeta: ?Object; // used to store functional render context for devtools\n  fnScopeId: ?string; // functional scope id support\n\n  constructor (\n    tag?: string,\n    data?: VNodeData,\n    children?: ?Array<VNode>,\n    text?: string,\n    elm?: Node,\n    context?: Component,\n    componentOptions?: VNodeComponentOptions,\n    asyncFactory?: Function\n  ) {\n    // 标签名，小写\n    this.tag = tag\n\n    // 标签上的属性数据\n    this.data = data\n\n    // 儿子虚拟节点（vnode）\n    this.children = children\n    this.text = text\n\n    // 真是元素的引用\n    this.elm = elm\n    this.ns = undefined\n    \n    // 节点所在vue实例\n    this.context = context\n    this.fnContext = undefined\n    this.fnOptions = undefined\n    this.fnScopeId = undefined\n    // v-for元素的key\n    this.key = data && data.key\n    this.componentOptions = componentOptions\n    this.componentInstance = undefined\n    this.parent = undefined\n    this.raw = false\n    this.isStatic = false\n    this.isRootInsert = true\n    this.isComment = false\n    this.isCloned = false\n    this.isOnce = false\n    this.asyncFactory = asyncFactory\n    this.asyncMeta = undefined\n    this.isAsyncPlaceholder = false\n  }\n\n  // DEPRECATED: alias for componentInstance for backwards compat.\n  /* istanbul ignore next */\n  get child (): Component | void {\n    return this.componentInstance\n  }\n}\n\nexport const createEmptyVNode = (text: string = '') => {\n  const node = new VNode()\n  node.text = text\n  node.isComment = true\n  return node\n}\n\nexport function createTextVNode (val: string | number) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nexport function cloneVNode (vnode: VNode): VNode {\n  const cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  )\n  cloned.ns = vnode.ns\n  cloned.isStatic = vnode.isStatic\n  cloned.key = vnode.key\n  cloned.isComment = vnode.isComment\n  cloned.fnContext = vnode.fnContext\n  cloned.fnOptions = vnode.fnOptions\n  cloned.fnScopeId = vnode.fnScopeId\n  cloned.asyncMeta = vnode.asyncMeta\n  cloned.isCloned = true\n  return cloned\n}\n\n```\n","slug":"vnode的内部实现","published":1,"updated":"2023-02-18T00:58:59.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccm000i5onrc74cfgvv","content":"<p>path: vue&#x2F;src&#x2F;core&#x2F;vdom&#x2F;vnode.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">VNodeData</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">elm</span>: <span class=\"title class_\">Node</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">ns</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// rendered in this component&#x27;s scope</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentOptions</span>: <span class=\"title class_\">VNodeComponentOptions</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentInstance</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component instance</span></span><br><span class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"title class_\">VNode</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component placeholder node</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// strictly internal</span></span><br><span class=\"line\">  <span class=\"attr\">raw</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// contains raw HTML? (server only)</span></span><br><span class=\"line\">  <span class=\"attr\">isStatic</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// hoisted static node</span></span><br><span class=\"line\">  <span class=\"attr\">isRootInsert</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// necessary for enter transition check</span></span><br><span class=\"line\">  <span class=\"attr\">isComment</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// empty comment placeholder?</span></span><br><span class=\"line\">  <span class=\"attr\">isCloned</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a cloned node?</span></span><br><span class=\"line\">  <span class=\"attr\">isOnce</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a v-once node?</span></span><br><span class=\"line\">  <span class=\"attr\">asyncFactory</span>: <span class=\"title class_\">Function</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// async component factory function</span></span><br><span class=\"line\">  <span class=\"attr\">asyncMeta</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">isAsyncPlaceholder</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">ssrContext</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">fnContext</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// real context vm for functional nodes</span></span><br><span class=\"line\">  <span class=\"attr\">fnOptions</span>: ?<span class=\"title class_\">ComponentOptions</span>; <span class=\"comment\">// for SSR caching</span></span><br><span class=\"line\">  <span class=\"attr\">devtoolsMeta</span>: ?<span class=\"title class_\">Object</span>; <span class=\"comment\">// used to store functional render context for devtools</span></span><br><span class=\"line\">  <span class=\"attr\">fnScopeId</span>: ?<span class=\"built_in\">string</span>; <span class=\"comment\">// functional scope id support</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">    tag?: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    data?: <span class=\"title class_\">VNodeData</span>,</span><br><span class=\"line\">    children?: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;,</span><br><span class=\"line\">    text?: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    elm?: <span class=\"title class_\">Node</span>,</span><br><span class=\"line\">    context?: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">    componentOptions?: <span class=\"title class_\">VNodeComponentOptions</span>,</span><br><span class=\"line\">    asyncFactory?: <span class=\"title class_\">Function</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标签名，小写</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标签上的属性数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 儿子虚拟节点（vnode）</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = children</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">text</span> = text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 真是元素的引用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">elm</span> = elm</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ns</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 节点所在vue实例</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnContext</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnOptions</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnScopeId</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// v-for元素的key</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = data &amp;&amp; data.<span class=\"property\">key</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentOptions</span> = componentOptions</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">raw</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isStatic</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRootInsert</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isComment</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isCloned</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isOnce</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncFactory</span> = asyncFactory</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncMeta</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isAsyncPlaceholder</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">  get child (): <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">createEmptyVNode</span> = (<span class=\"params\">text: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>()</span><br><span class=\"line\">  node.<span class=\"property\">text</span> = text</span><br><span class=\"line\">  node.<span class=\"property\">isComment</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createTextVNode</span> (<span class=\"attr\">val</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"title class_\">String</span>(val))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// optimized shallow clone</span></span><br><span class=\"line\"><span class=\"comment\">// used for static nodes and slot nodes because they may be reused across</span></span><br><span class=\"line\"><span class=\"comment\">// multiple renders, cloning them avoids errors when DOM manipulations rely</span></span><br><span class=\"line\"><span class=\"comment\">// on their elm reference.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">cloneVNode</span> (<span class=\"attr\">vnode</span>: <span class=\"title class_\">VNode</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cloned = <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>(</span><br><span class=\"line\">    vnode.<span class=\"property\">tag</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">data</span>,</span><br><span class=\"line\">    <span class=\"comment\">// #7975</span></span><br><span class=\"line\">    <span class=\"comment\">// clone children array to avoid mutating original in case of cloning</span></span><br><span class=\"line\">    <span class=\"comment\">// a child.</span></span><br><span class=\"line\">    vnode.<span class=\"property\">children</span> &amp;&amp; vnode.<span class=\"property\">children</span>.<span class=\"title function_\">slice</span>(),</span><br><span class=\"line\">    vnode.<span class=\"property\">text</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">elm</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">context</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">componentOptions</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">asyncFactory</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  cloned.<span class=\"property\">ns</span> = vnode.<span class=\"property\">ns</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isStatic</span> = vnode.<span class=\"property\">isStatic</span></span><br><span class=\"line\">  cloned.<span class=\"property\">key</span> = vnode.<span class=\"property\">key</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isComment</span> = vnode.<span class=\"property\">isComment</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnContext</span> = vnode.<span class=\"property\">fnContext</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnOptions</span> = vnode.<span class=\"property\">fnOptions</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnScopeId</span> = vnode.<span class=\"property\">fnScopeId</span></span><br><span class=\"line\">  cloned.<span class=\"property\">asyncMeta</span> = vnode.<span class=\"property\">asyncMeta</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isCloned</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloned</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p>path: vue&#x2F;src&#x2F;core&#x2F;vdom&#x2F;vnode.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">VNodeData</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">children</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">elm</span>: <span class=\"title class_\">Node</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">ns</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// rendered in this component&#x27;s scope</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentOptions</span>: <span class=\"title class_\">VNodeComponentOptions</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentInstance</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component instance</span></span><br><span class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"title class_\">VNode</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component placeholder node</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// strictly internal</span></span><br><span class=\"line\">  <span class=\"attr\">raw</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// contains raw HTML? (server only)</span></span><br><span class=\"line\">  <span class=\"attr\">isStatic</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// hoisted static node</span></span><br><span class=\"line\">  <span class=\"attr\">isRootInsert</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// necessary for enter transition check</span></span><br><span class=\"line\">  <span class=\"attr\">isComment</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// empty comment placeholder?</span></span><br><span class=\"line\">  <span class=\"attr\">isCloned</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a cloned node?</span></span><br><span class=\"line\">  <span class=\"attr\">isOnce</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a v-once node?</span></span><br><span class=\"line\">  <span class=\"attr\">asyncFactory</span>: <span class=\"title class_\">Function</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// async component factory function</span></span><br><span class=\"line\">  <span class=\"attr\">asyncMeta</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">isAsyncPlaceholder</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">ssrContext</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">fnContext</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// real context vm for functional nodes</span></span><br><span class=\"line\">  <span class=\"attr\">fnOptions</span>: ?<span class=\"title class_\">ComponentOptions</span>; <span class=\"comment\">// for SSR caching</span></span><br><span class=\"line\">  <span class=\"attr\">devtoolsMeta</span>: ?<span class=\"title class_\">Object</span>; <span class=\"comment\">// used to store functional render context for devtools</span></span><br><span class=\"line\">  <span class=\"attr\">fnScopeId</span>: ?<span class=\"built_in\">string</span>; <span class=\"comment\">// functional scope id support</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">    tag?: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    data?: <span class=\"title class_\">VNodeData</span>,</span><br><span class=\"line\">    children?: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;,</span><br><span class=\"line\">    text?: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">    elm?: <span class=\"title class_\">Node</span>,</span><br><span class=\"line\">    context?: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">    componentOptions?: <span class=\"title class_\">VNodeComponentOptions</span>,</span><br><span class=\"line\">    asyncFactory?: <span class=\"title class_\">Function</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标签名，小写</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 标签上的属性数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 儿子虚拟节点（vnode）</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = children</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">text</span> = text</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 真是元素的引用</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">elm</span> = elm</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ns</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 节点所在vue实例</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnContext</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnOptions</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnScopeId</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"comment\">// v-for元素的key</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = data &amp;&amp; data.<span class=\"property\">key</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentOptions</span> = componentOptions</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">raw</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isStatic</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRootInsert</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isComment</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isCloned</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isOnce</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncFactory</span> = asyncFactory</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncMeta</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isAsyncPlaceholder</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// DEPRECATED: alias for componentInstance for backwards compat.</span></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">  get child (): <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">createEmptyVNode</span> = (<span class=\"params\">text: <span class=\"built_in\">string</span> = <span class=\"string\">&#x27;&#x27;</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>()</span><br><span class=\"line\">  node.<span class=\"property\">text</span> = text</span><br><span class=\"line\">  node.<span class=\"property\">isComment</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createTextVNode</span> (<span class=\"attr\">val</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>, <span class=\"title class_\">String</span>(val))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// optimized shallow clone</span></span><br><span class=\"line\"><span class=\"comment\">// used for static nodes and slot nodes because they may be reused across</span></span><br><span class=\"line\"><span class=\"comment\">// multiple renders, cloning them avoids errors when DOM manipulations rely</span></span><br><span class=\"line\"><span class=\"comment\">// on their elm reference.</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">cloneVNode</span> (<span class=\"attr\">vnode</span>: <span class=\"title class_\">VNode</span>): <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cloned = <span class=\"keyword\">new</span> <span class=\"title class_\">VNode</span>(</span><br><span class=\"line\">    vnode.<span class=\"property\">tag</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">data</span>,</span><br><span class=\"line\">    <span class=\"comment\">// #7975</span></span><br><span class=\"line\">    <span class=\"comment\">// clone children array to avoid mutating original in case of cloning</span></span><br><span class=\"line\">    <span class=\"comment\">// a child.</span></span><br><span class=\"line\">    vnode.<span class=\"property\">children</span> &amp;&amp; vnode.<span class=\"property\">children</span>.<span class=\"title function_\">slice</span>(),</span><br><span class=\"line\">    vnode.<span class=\"property\">text</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">elm</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">context</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">componentOptions</span>,</span><br><span class=\"line\">    vnode.<span class=\"property\">asyncFactory</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  cloned.<span class=\"property\">ns</span> = vnode.<span class=\"property\">ns</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isStatic</span> = vnode.<span class=\"property\">isStatic</span></span><br><span class=\"line\">  cloned.<span class=\"property\">key</span> = vnode.<span class=\"property\">key</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isComment</span> = vnode.<span class=\"property\">isComment</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnContext</span> = vnode.<span class=\"property\">fnContext</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnOptions</span> = vnode.<span class=\"property\">fnOptions</span></span><br><span class=\"line\">  cloned.<span class=\"property\">fnScopeId</span> = vnode.<span class=\"property\">fnScopeId</span></span><br><span class=\"line\">  cloned.<span class=\"property\">asyncMeta</span> = vnode.<span class=\"property\">asyncMeta</span></span><br><span class=\"line\">  cloned.<span class=\"property\">isCloned</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> cloned</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"vue中的diff算法实现","date":"2019-12-26T00:41:47.000Z","_content":"\n# 大纲\n \n - [前言]\n - [diff算法是什么]\n    - [1.新头与旧头垂直对比]\n    - [2.新尾与旧尾垂直对比]\n    - [3.新尾与旧头交叉对比]\n    - [4.新头与旧尾交叉对比]\n    - [5.当前新vnode与旧头尾之间的vnode对比]\n    - [-1.跳过左边已经复用的vnode]\n    - [0.跳过右边已经复用的vnode]\n    - [while中的控制流顺序]\n - [while之外]\n - [新旧vnode与真实元素elm的关系]\n - [附录]\n    - [sameVnode的功能与实现逻辑]\n    - [patchVnode函数的关键实现]\n\n<!-- more -->\n\n# 前言\n\n[回到顶部]\n\n**vue版本：2.6.10**\n\n每次更新视图前都会根据视图模板生成vnode（虚拟的节点树），vnode类似dom树，但更简陋，每个vnode都与页面的上的元素html元素一一对应！为了更好的性能，因此要复用元素。那么就要知道怎么复用！就要对比newVnode（当前生成的vnode）和oldVnode（上次生成的vnode），对比完之后才知道那些是要删除，那些是需要重新创建，那些需要移动、移动到哪里！？\n而diff算法则是对比的一种比较好的方式，更好的更快地对比，谁被谁复用！\n\nnewVnode和oldVnode的比对仅限于同层级之间对比，兄弟之间相互比较，如下图。不会出现跨层级的对比。\n\n<img src=\"diff-vnode.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n\n# diff算法是什么\n\n[回到顶部]\n\ndiff算法不是一种对比的方法，而是一种寻找与当前节点匹配可复用节点的方法；寻找oldVnode.children中那个成员与newVnode.children中那个成员相同。\n\n这种寻找的方法如图可见一斑，主要的方法有5种，辅助的有2种（未画在图上），一共7种。每种寻找方式相互独立！通过循环遍历children，逐一判断，直到循环结束。下面结合代码分别说明其中寻找方式。\n\n**ps：无需过于在意图中所表达的逻辑，图只是用于辅助说明下面的源码**\n\n<img src=\"diff-vnode-children.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n```typescript\nfunction updateChildren (\n  parentElm,  // {Element}，父节点的真实html元素\n  oldCh,  // {Vnode[]}，oldVnode.children\n  newCh,  // {Vnode[]}，newVnode.children\n  insertedVnodeQueue,   // {Vnode[]}，插入的节点队列（此时可忽略）\n  removeOnly  // {Boolean}，是否只可以删除\n) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // ...\n}\n```\n建立四个指针`oldStartVnode`、`oldEndVnode`、`newStartVnode`、`newEndVnode`，由`updateChildren`中的定义可以知道：开始时，他们分别指向`oldVnode.children`的头部、`oldVnode.children`的尾部、`newVnode.children`的头部、`newVnode.children`的尾部。然后，这四个指针的指向也不是固定的，在循环遍历的过程中，他们的指向也会变动，他们指向会因为以下索引的变动而变动，`oldStartIdx`、`oldEndIdx`、`newStartIdx`、`newEndIdx`。\n\n## 1.新头与旧头垂直对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-01.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新旧头部vnode进行对比，判断是否匹配，以复用。sameVnode的功能与实现逻辑参考[附录：sameVnode的功能与实现逻辑]，值得一提的是：a.是input元素，更新前后type不一致；b.变动的是key属性；c.元素更新前后将所有属性删除，或从无到有；只要不是以上三种情况之一，不论怎么增删、修改元素上的属性，都不会影响是否匹配的结果！\n\n1.判断新旧头部是匹配的，那么就调用`patchVnode`，给`newStartVnode`打补丁！\n\n`patchVnode`函数的主要功能：\n\na. 复用elm，将oldVnode.elm赋值到newVnode.elm；\nb. 更新elm上的属性变动；\nc. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！\n\npatchVnode函数的主要功能参考：[附录：patchVnode函数的关键实现]\n\n2.分别右移`oldStartVnode`和`newStartVnode`。\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 1 */\n    else if (sameVnode(oldStartVnode, newStartVnode)) {\n      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n      oldStartVnode = oldCh[++oldStartIdx]\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 2.新尾与旧尾垂直对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-02.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新旧尾部的对比情况和[1新头与旧头垂直对比]类似，再次再累累述，以下实现的逻辑：\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 2 */\n    else if (sameVnode(oldEndVnode, newEndVnode)) {\n      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newEndVnode = newCh[--newEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 3.新尾与旧头交叉对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-03.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n当前情况与[1新头与旧头垂直对比]略有不同！看源码中，多出了下面这句：\n\n```typescript\ncanMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n```\n\n这句代码实现就是图片中移动elm的功能！为什么要移动elm？因为newEndVnode复用了oldStartVnode.elm，复用这一步已经由`patchVnode`函数实现，然后还需要让elm列的顺序与newVnode的顺序保持一致，所以需要将`oldStartVnode.elm`移动到正确的位置！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 3 */\n    else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n      /**\n       * Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。\n       * 如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置\n       */\n      // canMove && 在parentElm的nodeOps.nextSibling(oldEndVnode.elm)前面插入oldStartVnode.elm\n      // 换言之，在 oldEndVnode.elm 前面插入 oldStartVnode.elm\n      // 旧children的 头部真实元素 移动到 尾部真实元素的后面\n      canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n      oldStartVnode = oldCh[++oldStartIdx]\n      newEndVnode = newCh[--newEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 4.新头与旧尾交叉对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-04.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n当前情况与[新尾与旧头交叉对比]类似，不做赘述！配合图片和源码食用口味更佳~\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 4 */\n    else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n      // 将旧children的尾部真实元素移动到头部真实元素的后面\n      canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 5.当前新vnode与旧头尾之间的vnode对比\n\n[回到顶部]\n\n在本次循环中，前4种控制流都没有进入，就说明一头一尾、两次交叉对比都没有找到可复用的节点！但这并非代表旧children中无可复用，因为头与尾之间的元素还没有比对过，第5种方式即是如此！这第5种方式在有定义`key`(`v-for`指令中的`key`)或没有的情况下又是不同的表现！\n\n**注意：在此情况下，是用新头去旧children的头尾之间寻找可复用元素**\n\n### 5-1.构建oldCildren映射表(key => idx)\n\n从oldChildren构建一个映射表(key => idx)，这样就可以通过key，结合这个映射表快速找到匹配的可复用的元素。时间复杂度就是`O(1)`！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      /* 5-1 */\n      // 只会执行一次，第一次定义映射表\n      if (isUndef(oldKeyToIdx)) {\n        // 创建对象映射表，children.key => children.i, i ∈ [oldStartIdx, oldEndIdx]\n        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\ncreateKeyToOldIdx的实现：\n```typescript\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  let i, key\n  const map = {}\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key\n    if (isDef(key)) map[key] = i\n  }\n  return map\n}\n```\n\n### 5-2.根据5-1的映射表找到可复用vnode的索引\n\n列表渲染中不一定会定义`key`，如果没有定义那么`5-1`的映射表就没有用了。那么就需要遍历旧children节点寻找与新头匹配的元素（详见下面代码的`findIdxInOld`方法）！那么时间复杂度就上来了，不再是使用映射表时的`O(1)`，而是`O(n)`。由此也可以知道使用`key`的性能优化优越之所在！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5.2 */\n      // 定义key，直接在名射表找，时间复杂度: O(1)\n      // 没有定义key，用新vnode与旧vnode数组比对，时间复杂度：O(n)\n      // const isDef = (v) => v !== undefined && v !== null\n      idxInOld = isDef(newStartVnode.key)\n        ? oldKeyToIdx[newStartVnode.key]\n        // 返回oldCh中与newStartVnode相同（ sameVnode(newStartVnode, oldCh[itIdx]) ）节点(即isDef(oldCh[itIdx].key) 同样是false)的index\n        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\nfindIdxInOld：时间复杂度`O(n)`\n```typescript\nfunction findIdxInOld (node, oldCh, start, end) {\n  for (let i = start; i < end; i++) {\n    const c = oldCh[i]\n    if (isDef(c) && sameVnode(node, c)) return i\n  }\n}\n```\n\n### 5-3.无可复用旧元素\n\n在旧children可能会找到也可能找不到可复用的元素，没有找到是什么情况？如图：\n\n<img src=\"diff-vnode-children-05.png\" width=\"100%\" alt=\"vue中的diff算法实现：在头尾见找可复用元素\"/>\n\n假如现在`newStartVnode`指向的是`key = 1.5`的vnode，那么很明显旧children中就没有可以复用的vnode，那么需要做的就是：a.创建一个与`newStartVnode`对应的newElm(新的真实html元素)；b.然后将newElm插入到旧children中`key=02`的vnode对应的真实元素的前面！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5.3 */\n      // 在旧虚拟节点中不存在新节点，无法复用旧元素\n      /**\n       * [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]\n       * [ 1 ] [ 2 ] [2.5] [ 3 ] [ 4 ] [ 5 ]\n       * [2.5]就是插入的，且就children中没有与之“相同”的vnode\n       * 目前 newStartIdx = oldStartIdx = 2\n       * 那么现在需要做的是：a.创建一个与[2.5]对应的真实元素；b.将元素插入到 [ 2 ] 后面 [ 3 ]前面\n       * nodeOps.insertBefore(parentElm, newElm, oldStartVnode.elm)\n       */\n      if (isUndef(idxInOld)) { // New element\n        // 创建 newStartVnode 对应的elm，将elm插入到parentElm的子元素oldStartVnode.elm的前面（如果oldStartVnode.elm不存在即插入到parentElm的最后）\n        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n### 5-4.复用旧元素\n\n5-3和5-4是互斥的，进入5-4控制流就表示5-2中返回的`idxInOld`不为空，旧children中存在这匹配的vnode。虽然存在可用的vnode，但如果`key`并不可信呢？比如`v-for=\"(item, index) in items\"`中的索引被用作`key`！！！因此有了下面的5-4-1和5-4-2。\n\n#### 5-4-1.确实可复用\n\n使用sameVnode方法二次确认vnodeToMove（在旧children中找到的vnode）时可用的！接下就是类似的操作。但比较明显的不同是：其他都是递增或递减新旧索引，但在5-4-1中则是递增newStartIdx，然后旧vnode置为null(`oldCh[idxInOld] = undefined`)，这是设计的巧妙之处，当前还没有感受到，再看下[-1.跳过左边已经复用的vnode](#-1跳过左边已经复用的vnode)和[0.跳过右边已经复用的vnode](#0跳过右边已经复用的vnode)中的内容就会豁然开朗！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5-4 */\n      // 在旧虚拟节点中存在新节点\n      else {\n        /* 5-4-1 */\n        vnodeToMove = oldCh[idxInOld]\n        // 保证节点的key和虚拟节点都相同（ oldKeyToIdx[newStartVnode.key] 获取的idxInOld，指向\n        // 的虚拟节点可能与newStartVnode节点不一样(!sameVnode) ）\n        if (sameVnode(vnodeToMove, newStartVnode)) {\n          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n          oldCh[idxInOld] = undefined\n          canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n        }\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n#### 5-4-2.虚假的可复用\n\n5-4-1与5-4-2是互斥的，既然没有元素可以复用到`newStartVnode`中，那么只能像5-3中那样创建与`newStartVnode`对应的html元素！！！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5-4 */\n      // 在旧虚拟节点中存在新节点\n      else {\n        /* 5-4-2 */\n        else {\n          // same key but different element. treat as new element\n          // key相同但虚拟节点不同，newStartVnode当做新元素创建\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n\n        }\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## -1.跳过左边已经复用的vnode\n\n[回到顶部]\n\n我们知道`oldStartVnode`这个指针是不断地右移，从下面的代码中的`isUndef(oldStartVnode)`知道，一旦碰到未定的vnode就会右移一个单位，继续循环比对后面的vnode。为什么会有未定义的vnode？正常来说应该存在，因为vnode都是与页面上的html元素一一对应的！在[5-4-1.确实可复用](#5-4-1确实可复用)中，vue确实地将旧children中存在可复用elm的vnode手动置为了undefined：`oldCh[idxInOld] = undefined`！为什么置空不直接用`delete`操作符删除？！删了就换了idx顺序！！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    /* -1 */\n    if (isUndef(oldStartVnode)) {\n      oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 0.跳过右边已经复用的vnode\n\n[回到顶部]\n\n参考[-1.跳过左边已经复用的vnode](#-1跳过左边已经复用的vnode)\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 0 */\n    else if (isUndef(oldEndVnode)) {\n      oldEndVnode = oldCh[--oldEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## while中的控制流顺序\n\n[回到顶部]\n\n上面为了突出重点去讲，没有按while中控制流的顺序书写，以下是while块总各控制流的顺序：\n\n```typescript\nwhile (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  /* -1：跳过左边已经复用的vnode */\n  if (isUndef(oldStartVnode)) { /* */ }\n  /* 0：跳过右边已经复用的vnode */\n  else if (isUndef(oldEndVnode)) { /* */ }\n  /* 1：新头与旧头垂直对比 */\n  else if (sameVnode(oldStartVnode, newStartVnode)) { /* */ }\n  /* 2：新尾与旧尾垂直对比 */\n  else if (sameVnode(oldEndVnode, newEndVnode)) { /* */ }\n  /* 3：新尾与旧头交叉对比 */\n  else if (sameVnode(oldStartVnode, newEndVnode)) { /* */ }\n  /* 4：新头与旧尾交叉对比 */\n  else if (sameVnode(oldEndVnode, newStartVnode)) { /* */ }\n  /* 5：当前新vnode与旧头尾之间的vnode对比 */\n  else { /* */ }\n}\n```\n\n# while之外\n\n[回到顶部]\n\n留意while的循环条件：`oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx`，只要`oldStartIdx`大于`oldEndIdx`或`newStartIdx`大于`newEndIdx`就会结束循环！换言之，只要遍历完新旧children任意一个就会结束循环！\n\na. 先遍历完旧children就说明**新children新增了vnode**，那么就要创建与这些vnodes对应的elm；\nb. 先遍历完新children就说明**新children删除了一些vnode**，那么就要删除多出的vnodes。\n\n```typescript\nif (oldStartIdx > oldEndIdx) {\n  // 会用调用node.insertBefore插入新元素，现在就是找引用元素，在refElm前面插入新元素\n  refElm = isUndef(newCh[newEndIdx + 1])\n    /**\n     * 新的children没有新增元素（newStartIdx > newEndIdx） \n     * 或 后面新增了vnode（newStartIdx <= newEndIdx）\n     * */\n    ? null\n    /**\n     * newStartIdx <= newEndIdx\n     * 新的children新增了元素，但不是在后面！\n     * 可能是中间！\n     * 也可能是在前面\n     * */\n    : newCh[newEndIdx + 1].elm\n\n  // 循环调用 createElm\n  addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n} else if (newStartIdx > newEndIdx) {\n  removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n}\n```\n\n因为在循环遍历children的时候，startIdx（newStartIdx或oldStartIdx）和endIdx分别会向左和右移动。下面是四个索引移动的情况：\n\n- newStartIdx右移：[1.新头与旧头垂直对比]、[4.新头与旧尾交叉对比]、[5.当前新vnode与旧头尾之间的vnode对比]；\n\n- newEndIdx左移：[2.新尾与旧尾垂直对比]、[3.新尾与旧头交叉对比]；\n\n- oldStartIdx右移：[-1.跳过左边已经复用的vnode]、[1.新头与旧头垂直对比]、[3.新尾与旧头交叉对比]；\n\n- ildEndIdx左移：[0.跳过右边已经复用的vnode]、[2.新尾与旧尾垂直对比]、[4.新头与旧尾交叉对比]；\n\n\n## 新children新增了vnode\n\n根据newStartIdx和newEndIdx的移动情况\n\n1.newStartIdx一直右移，由于新增的vnode都在后面，可以复用的vnode都在前面了，newEndIdx会保持不变，直到遍历完旧children：\n<img src=\"add-in-after.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n&nbsp;\n\n2.newStartIdx右移，newEndIdx左移，直到遍历完旧children：\n\n<img src=\"add-in-middle.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n3.新增的vnode都在前面了，由于是新的节点所以存在“newStartIdx右移”的情况，newStartIdx就保持不变了，而可复用的vnode在右边，随着一次次循环，newEndIdx则会左移：\n\n<img src=\"add-in-before.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新children删除了vnode的情况就不赘述，情况可以从上面的解析类推！\n\n\n# 新旧vnode与真实元素elm的关系\n\n[回到顶部]\n\nvnode是和elm一一对应的，vnode的顺序和elm保持这一致，vnode上的属性也是与对应的elm的属性对应。所以，在patch（给oldVnode打补丁）前，可以认为oldVnode树与页面上elm树是对应的！\n\n\n1.oldVnode.children中vnode的顺序和oldVnode.elm.children(oldVnode对应的elm的子元素列表)的顺序是保持一致的、elm上的属性也是保持一致；\n\n2.diff算法通过对比oldVnode.children与newVnode.children的vnode，找到可以复用的elm，并改变elm的位置，使之与newVnode.children的顺序保持一致！\n\n\n# diff的特点\n\n- **先垂直，再交叉，最后中间找**，diff在旧vnode.children找可复用vnode，所用比对方式的优先级！\n\n&nbsp;\n\n- **只与同级vnode中寻找复用的elm**，由上面的分析可以知道，只会在同级的children中寻找可以复用的vnode。但现实是可以复用的元素可以存在于dom树任意的地方，明显这样是可能回错过实际存在的复用元素，而重新创建元素！这里就是vue或diff的权衡的地方，是不计代价全局去找最优解，还是如当前这般在同级节点中寻找！？\n\n&nbsp;\n\n- **定义key属性可以大幅度减少操作数**，在[5.当前新vnode与旧头尾之间的vnode对比]中，在定义了key的情况下，会创建一个映射表`oldKeyToIdx`，通过映射表可以快速找到可复用vnode，而没有定义的话，就需要遍历oldVnode.children，逐一使用`sameVnode`比对！\n\n# 实用主义\n\n[1.新头与旧头垂直对比]、[2.新尾与旧尾垂直对比]、[3.新尾与旧头交叉对比]、[4.新头与旧尾交叉对比]，以上四种不论是否定义元素属性key\n1. 定义了，可以快速判断出不相同（但不完全可靠）\n\n使用遍历索引作为key，\n\n> 它也可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：\n> \n> 完整地触发组件的生命周期钩子\n> 触发过渡\n\n\n>diff算法默认使用“就地复用”的策略，是一个首尾交叉对比的过程。\n>用index作为key和不加key是一样的，都采用“就地复用”的策略\n>“就地复用”的策略，只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。\n>将与元素唯一对应的值作为key，可以最大化利用dom节点，提升性能\n\n# 附录\n\n[回到顶部]\n\n## sameVnode的功能与实现逻辑\n\n```typescript\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        // 标签相同\n        a.tag === b.tag &&\n\n        // 都是注释元素, 或都不是\n        a.isComment === b.isComment &&\n\n        // idDef = (v) => v !== undefined && v !== null\n        // 都定义了，或都没有定义\n        isDef(a.data) === isDef(b.data) &&\n\n        // a = { data: { atttrs: { type: 'xxx' } } }\n        // 1. 两节点的type相同，\n        //   i. type存在, 且相同；\n        //   ii. 两个type都没有定义，都是undefined；a、b都算是通过\n        // 2. a、b节点type都是'text,number,password,search,email,tel,url'中之一\n        // 换言之 a.type = text, b.type = password，也可以说两个input节点相同\n        // 3. a不是input标签\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\n/**\n * makeMap是个工厂函数，生成 isTextInputType = (key) => {\n *   const map = { text: true, ..., url: true };\n *   return map[key];\n * }\n * \n * 类似于 (val) => [text,number,password,search,email,tel,url].include(val);\n * */\nconst isTextInputType = makeMap('text,number,password,search,email,tel,url')\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') return true\n  let i\n  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type\n  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n```\n\n## patchVnode函数的关键实现\n\n```typescript\nfunction patchVnode (/* */) {\n  // ...\n\n  // a. 复用elm，将oldVnode.elm赋值到newVnode.elm；\n  const elm = vnode.elm = oldVnode.elm\n\n  const oldCh = oldVnode.children\n  const ch = vnode.children\n\n  // b. 更新elm上的属性变动；\n  if (isDef(data) && isPatchable(vnode)) {\n    for (i = 0; i < cbs.update.length; ++i) {\n      cbs.update[i](oldVnode, vnode);\n    }\n    if (isDef(i = data.hook) && isDef(i = i.update)) i(oldVnode, vnode)\n  }\n\n  // 没有文本，即是还有子节点等情况\n  if (isUndef(vnode.text)) {\n    // 新旧vnode都有children\n    if (isDef(oldCh) && isDef(ch)) {\n      // c. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！\n      if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    }\n    // 省略其他的更新children的操作：增、删等\n  }\n  // ...\n}\n```\n\n## nodeOps.insertBefore实现\n\npath: src/platforms/web/runtime/node-ops.js\n```typescript\nexport function insertBefore (parentNode: Node, newNode: Node, referenceNode: Node) {\n  parentNode.insertBefore(newNode, referenceNode)\n}\n```\n\n> Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置（在将节点附加到其他节点之前，不需要从其父节点删除该节点）。\n\n## vnode（虚拟节点）的成员属性\n\n```typescript\nclass VNode {\n  // 标签\n  tag: string | void;\n  // elm（Element）的属性\n  data: VNodeData | void;\n  // 子虚拟节点\n  children: ?Array<VNode>;\n  text: string | void;\n  // 真实dom元素\n  elm: Node | void;\n  // 元素命名空间\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n\n  // strictly internal\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n  asyncFactory: Function | void; // async component factory function\n  asyncMeta: Object | void;\n  isAsyncPlaceholder: boolean;\n  ssrContext: Object | void;\n  fnContext: Component | void; // real context vm for functional nodes\n  fnOptions: ?ComponentOptions; // for SSR caching\n  devtoolsMeta: ?Object; // used to store functional render context for devtools\n  fnScopeId: ?string; // functional scope id support\n}\n```\n\n\n[回到顶部]: #大纲\n[前言]: #前言\n[diff算法是什么]: #diff算法是什么\n[while之外]: #while之外\n[新旧vnode与真实元素elm的关系]: #新旧vnode与真实元素elm的关系\n[-1.跳过左边已经复用的vnode]: #-1跳过左边已经复用的vnode\n[0.跳过右边已经复用的vnode]: #0跳过右边已经复用的vnode\n[1.新头与旧头垂直对比]: #1新头与旧头垂直对比\n[2.新尾与旧尾垂直对比]: #2新尾与旧尾垂直对比   \n[3.新尾与旧头交叉对比]: #3新尾与旧头交叉对比\n[4.新头与旧尾交叉对比]: #4新头与旧尾交叉对比\n[5.当前新vnode与旧头尾之间的vnode对比]: #5当前新vnode与旧头尾之间的vnode对比\n[while中的控制流顺序]: #while中的控制流顺序\n[附录]: #附录\n[sameVnode的功能与实现逻辑]: #sameVnode的功能与实现逻辑\n[patchVnode函数的关键实现]: #patchVnode函数的关键实现\n[附录：sameVnode的功能与实现逻辑]: #sameVnode的功能与实现逻辑\n[附录：patchVnode函数的关键实现]: #patchVnode函数的关键实现\n","source":"_posts/vue中的diff算法实现.md","raw":"---\ntitle: vue中的diff算法实现\ndate: 2019-12-26 08:41:47\ntags:\n- vue\n- vue源码分析\ncategories:\n- 源码分析\n- vue\n\n---\n\n# 大纲\n \n - [前言]\n - [diff算法是什么]\n    - [1.新头与旧头垂直对比]\n    - [2.新尾与旧尾垂直对比]\n    - [3.新尾与旧头交叉对比]\n    - [4.新头与旧尾交叉对比]\n    - [5.当前新vnode与旧头尾之间的vnode对比]\n    - [-1.跳过左边已经复用的vnode]\n    - [0.跳过右边已经复用的vnode]\n    - [while中的控制流顺序]\n - [while之外]\n - [新旧vnode与真实元素elm的关系]\n - [附录]\n    - [sameVnode的功能与实现逻辑]\n    - [patchVnode函数的关键实现]\n\n<!-- more -->\n\n# 前言\n\n[回到顶部]\n\n**vue版本：2.6.10**\n\n每次更新视图前都会根据视图模板生成vnode（虚拟的节点树），vnode类似dom树，但更简陋，每个vnode都与页面的上的元素html元素一一对应！为了更好的性能，因此要复用元素。那么就要知道怎么复用！就要对比newVnode（当前生成的vnode）和oldVnode（上次生成的vnode），对比完之后才知道那些是要删除，那些是需要重新创建，那些需要移动、移动到哪里！？\n而diff算法则是对比的一种比较好的方式，更好的更快地对比，谁被谁复用！\n\nnewVnode和oldVnode的比对仅限于同层级之间对比，兄弟之间相互比较，如下图。不会出现跨层级的对比。\n\n<img src=\"diff-vnode.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n\n# diff算法是什么\n\n[回到顶部]\n\ndiff算法不是一种对比的方法，而是一种寻找与当前节点匹配可复用节点的方法；寻找oldVnode.children中那个成员与newVnode.children中那个成员相同。\n\n这种寻找的方法如图可见一斑，主要的方法有5种，辅助的有2种（未画在图上），一共7种。每种寻找方式相互独立！通过循环遍历children，逐一判断，直到循环结束。下面结合代码分别说明其中寻找方式。\n\n**ps：无需过于在意图中所表达的逻辑，图只是用于辅助说明下面的源码**\n\n<img src=\"diff-vnode-children.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n```typescript\nfunction updateChildren (\n  parentElm,  // {Element}，父节点的真实html元素\n  oldCh,  // {Vnode[]}，oldVnode.children\n  newCh,  // {Vnode[]}，newVnode.children\n  insertedVnodeQueue,   // {Vnode[]}，插入的节点队列（此时可忽略）\n  removeOnly  // {Boolean}，是否只可以删除\n) {\n    let oldStartIdx = 0\n    let newStartIdx = 0\n    let oldEndIdx = oldCh.length - 1\n    let oldStartVnode = oldCh[0]\n    let oldEndVnode = oldCh[oldEndIdx]\n    let newEndIdx = newCh.length - 1\n    let newStartVnode = newCh[0]\n    let newEndVnode = newCh[newEndIdx]\n    let oldKeyToIdx, idxInOld, vnodeToMove, refElm\n\n    // ...\n}\n```\n建立四个指针`oldStartVnode`、`oldEndVnode`、`newStartVnode`、`newEndVnode`，由`updateChildren`中的定义可以知道：开始时，他们分别指向`oldVnode.children`的头部、`oldVnode.children`的尾部、`newVnode.children`的头部、`newVnode.children`的尾部。然后，这四个指针的指向也不是固定的，在循环遍历的过程中，他们的指向也会变动，他们指向会因为以下索引的变动而变动，`oldStartIdx`、`oldEndIdx`、`newStartIdx`、`newEndIdx`。\n\n## 1.新头与旧头垂直对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-01.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新旧头部vnode进行对比，判断是否匹配，以复用。sameVnode的功能与实现逻辑参考[附录：sameVnode的功能与实现逻辑]，值得一提的是：a.是input元素，更新前后type不一致；b.变动的是key属性；c.元素更新前后将所有属性删除，或从无到有；只要不是以上三种情况之一，不论怎么增删、修改元素上的属性，都不会影响是否匹配的结果！\n\n1.判断新旧头部是匹配的，那么就调用`patchVnode`，给`newStartVnode`打补丁！\n\n`patchVnode`函数的主要功能：\n\na. 复用elm，将oldVnode.elm赋值到newVnode.elm；\nb. 更新elm上的属性变动；\nc. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！\n\npatchVnode函数的主要功能参考：[附录：patchVnode函数的关键实现]\n\n2.分别右移`oldStartVnode`和`newStartVnode`。\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 1 */\n    else if (sameVnode(oldStartVnode, newStartVnode)) {\n      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n      oldStartVnode = oldCh[++oldStartIdx]\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 2.新尾与旧尾垂直对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-02.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新旧尾部的对比情况和[1新头与旧头垂直对比]类似，再次再累累述，以下实现的逻辑：\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 2 */\n    else if (sameVnode(oldEndVnode, newEndVnode)) {\n      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newEndVnode = newCh[--newEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 3.新尾与旧头交叉对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-03.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n当前情况与[1新头与旧头垂直对比]略有不同！看源码中，多出了下面这句：\n\n```typescript\ncanMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n```\n\n这句代码实现就是图片中移动elm的功能！为什么要移动elm？因为newEndVnode复用了oldStartVnode.elm，复用这一步已经由`patchVnode`函数实现，然后还需要让elm列的顺序与newVnode的顺序保持一致，所以需要将`oldStartVnode.elm`移动到正确的位置！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 3 */\n    else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)\n      /**\n       * Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。\n       * 如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置\n       */\n      // canMove && 在parentElm的nodeOps.nextSibling(oldEndVnode.elm)前面插入oldStartVnode.elm\n      // 换言之，在 oldEndVnode.elm 前面插入 oldStartVnode.elm\n      // 旧children的 头部真实元素 移动到 尾部真实元素的后面\n      canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))\n      oldStartVnode = oldCh[++oldStartIdx]\n      newEndVnode = newCh[--newEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 4.新头与旧尾交叉对比\n\n[回到顶部]\n\n<img src=\"diff-vnode-children-04.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n当前情况与[新尾与旧头交叉对比]类似，不做赘述！配合图片和源码食用口味更佳~\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 4 */\n    else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n      // 将旧children的尾部真实元素移动到头部真实元素的后面\n      canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)\n      oldEndVnode = oldCh[--oldEndIdx]\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 5.当前新vnode与旧头尾之间的vnode对比\n\n[回到顶部]\n\n在本次循环中，前4种控制流都没有进入，就说明一头一尾、两次交叉对比都没有找到可复用的节点！但这并非代表旧children中无可复用，因为头与尾之间的元素还没有比对过，第5种方式即是如此！这第5种方式在有定义`key`(`v-for`指令中的`key`)或没有的情况下又是不同的表现！\n\n**注意：在此情况下，是用新头去旧children的头尾之间寻找可复用元素**\n\n### 5-1.构建oldCildren映射表(key => idx)\n\n从oldChildren构建一个映射表(key => idx)，这样就可以通过key，结合这个映射表快速找到匹配的可复用的元素。时间复杂度就是`O(1)`！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      /* 5-1 */\n      // 只会执行一次，第一次定义映射表\n      if (isUndef(oldKeyToIdx)) {\n        // 创建对象映射表，children.key => children.i, i ∈ [oldStartIdx, oldEndIdx]\n        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\ncreateKeyToOldIdx的实现：\n```typescript\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  let i, key\n  const map = {}\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key\n    if (isDef(key)) map[key] = i\n  }\n  return map\n}\n```\n\n### 5-2.根据5-1的映射表找到可复用vnode的索引\n\n列表渲染中不一定会定义`key`，如果没有定义那么`5-1`的映射表就没有用了。那么就需要遍历旧children节点寻找与新头匹配的元素（详见下面代码的`findIdxInOld`方法）！那么时间复杂度就上来了，不再是使用映射表时的`O(1)`，而是`O(n)`。由此也可以知道使用`key`的性能优化优越之所在！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5.2 */\n      // 定义key，直接在名射表找，时间复杂度: O(1)\n      // 没有定义key，用新vnode与旧vnode数组比对，时间复杂度：O(n)\n      // const isDef = (v) => v !== undefined && v !== null\n      idxInOld = isDef(newStartVnode.key)\n        ? oldKeyToIdx[newStartVnode.key]\n        // 返回oldCh中与newStartVnode相同（ sameVnode(newStartVnode, oldCh[itIdx]) ）节点(即isDef(oldCh[itIdx].key) 同样是false)的index\n        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\nfindIdxInOld：时间复杂度`O(n)`\n```typescript\nfunction findIdxInOld (node, oldCh, start, end) {\n  for (let i = start; i < end; i++) {\n    const c = oldCh[i]\n    if (isDef(c) && sameVnode(node, c)) return i\n  }\n}\n```\n\n### 5-3.无可复用旧元素\n\n在旧children可能会找到也可能找不到可复用的元素，没有找到是什么情况？如图：\n\n<img src=\"diff-vnode-children-05.png\" width=\"100%\" alt=\"vue中的diff算法实现：在头尾见找可复用元素\"/>\n\n假如现在`newStartVnode`指向的是`key = 1.5`的vnode，那么很明显旧children中就没有可以复用的vnode，那么需要做的就是：a.创建一个与`newStartVnode`对应的newElm(新的真实html元素)；b.然后将newElm插入到旧children中`key=02`的vnode对应的真实元素的前面！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5.3 */\n      // 在旧虚拟节点中不存在新节点，无法复用旧元素\n      /**\n       * [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]\n       * [ 1 ] [ 2 ] [2.5] [ 3 ] [ 4 ] [ 5 ]\n       * [2.5]就是插入的，且就children中没有与之“相同”的vnode\n       * 目前 newStartIdx = oldStartIdx = 2\n       * 那么现在需要做的是：a.创建一个与[2.5]对应的真实元素；b.将元素插入到 [ 2 ] 后面 [ 3 ]前面\n       * nodeOps.insertBefore(parentElm, newElm, oldStartVnode.elm)\n       */\n      if (isUndef(idxInOld)) { // New element\n        // 创建 newStartVnode 对应的elm，将elm插入到parentElm的子元素oldStartVnode.elm的前面（如果oldStartVnode.elm不存在即插入到parentElm的最后）\n        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n### 5-4.复用旧元素\n\n5-3和5-4是互斥的，进入5-4控制流就表示5-2中返回的`idxInOld`不为空，旧children中存在这匹配的vnode。虽然存在可用的vnode，但如果`key`并不可信呢？比如`v-for=\"(item, index) in items\"`中的索引被用作`key`！！！因此有了下面的5-4-1和5-4-2。\n\n#### 5-4-1.确实可复用\n\n使用sameVnode方法二次确认vnodeToMove（在旧children中找到的vnode）时可用的！接下就是类似的操作。但比较明显的不同是：其他都是递增或递减新旧索引，但在5-4-1中则是递增newStartIdx，然后旧vnode置为null(`oldCh[idxInOld] = undefined`)，这是设计的巧妙之处，当前还没有感受到，再看下[-1.跳过左边已经复用的vnode](#-1跳过左边已经复用的vnode)和[0.跳过右边已经复用的vnode](#0跳过右边已经复用的vnode)中的内容就会豁然开朗！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5-4 */\n      // 在旧虚拟节点中存在新节点\n      else {\n        /* 5-4-1 */\n        vnodeToMove = oldCh[idxInOld]\n        // 保证节点的key和虚拟节点都相同（ oldKeyToIdx[newStartVnode.key] 获取的idxInOld，指向\n        // 的虚拟节点可能与newStartVnode节点不一样(!sameVnode) ）\n        if (sameVnode(vnodeToMove, newStartVnode)) {\n          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)\n          oldCh[idxInOld] = undefined\n          canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)\n        }\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n#### 5-4-2.虚假的可复用\n\n5-4-1与5-4-2是互斥的，既然没有元素可以复用到`newStartVnode`中，那么只能像5-3中那样创建与`newStartVnode`对应的html元素！！！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 5：当前新vnode与旧头尾之间的vnode对比 */\n    else {\n      // ...\n\n      /* 5-4 */\n      // 在旧虚拟节点中存在新节点\n      else {\n        /* 5-4-2 */\n        else {\n          // same key but different element. treat as new element\n          // key相同但虚拟节点不同，newStartVnode当做新元素创建\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx)\n\n        }\n      }\n      // ...\n      newStartVnode = newCh[++newStartIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## -1.跳过左边已经复用的vnode\n\n[回到顶部]\n\n我们知道`oldStartVnode`这个指针是不断地右移，从下面的代码中的`isUndef(oldStartVnode)`知道，一旦碰到未定的vnode就会右移一个单位，继续循环比对后面的vnode。为什么会有未定义的vnode？正常来说应该存在，因为vnode都是与页面上的html元素一一对应的！在[5-4-1.确实可复用](#5-4-1确实可复用)中，vue确实地将旧children中存在可复用elm的vnode手动置为了undefined：`oldCh[idxInOld] = undefined`！为什么置空不直接用`delete`操作符删除？！删了就换了idx顺序！！\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    /* -1 */\n    if (isUndef(oldStartVnode)) {\n      oldStartVnode = oldCh[++oldStartIdx] // Vnode has been moved left\n\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## 0.跳过右边已经复用的vnode\n\n[回到顶部]\n\n参考[-1.跳过左边已经复用的vnode](#-1跳过左边已经复用的vnode)\n\n```typescript\nfunction updateChildren (/* */) {\n  // ...\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    // ...\n\n    /* 0 */\n    else if (isUndef(oldEndVnode)) {\n      oldEndVnode = oldCh[--oldEndIdx]\n    }\n    // ...\n  }\n  // ...\n}\n```\n\n## while中的控制流顺序\n\n[回到顶部]\n\n上面为了突出重点去讲，没有按while中控制流的顺序书写，以下是while块总各控制流的顺序：\n\n```typescript\nwhile (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n  /* -1：跳过左边已经复用的vnode */\n  if (isUndef(oldStartVnode)) { /* */ }\n  /* 0：跳过右边已经复用的vnode */\n  else if (isUndef(oldEndVnode)) { /* */ }\n  /* 1：新头与旧头垂直对比 */\n  else if (sameVnode(oldStartVnode, newStartVnode)) { /* */ }\n  /* 2：新尾与旧尾垂直对比 */\n  else if (sameVnode(oldEndVnode, newEndVnode)) { /* */ }\n  /* 3：新尾与旧头交叉对比 */\n  else if (sameVnode(oldStartVnode, newEndVnode)) { /* */ }\n  /* 4：新头与旧尾交叉对比 */\n  else if (sameVnode(oldEndVnode, newStartVnode)) { /* */ }\n  /* 5：当前新vnode与旧头尾之间的vnode对比 */\n  else { /* */ }\n}\n```\n\n# while之外\n\n[回到顶部]\n\n留意while的循环条件：`oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx`，只要`oldStartIdx`大于`oldEndIdx`或`newStartIdx`大于`newEndIdx`就会结束循环！换言之，只要遍历完新旧children任意一个就会结束循环！\n\na. 先遍历完旧children就说明**新children新增了vnode**，那么就要创建与这些vnodes对应的elm；\nb. 先遍历完新children就说明**新children删除了一些vnode**，那么就要删除多出的vnodes。\n\n```typescript\nif (oldStartIdx > oldEndIdx) {\n  // 会用调用node.insertBefore插入新元素，现在就是找引用元素，在refElm前面插入新元素\n  refElm = isUndef(newCh[newEndIdx + 1])\n    /**\n     * 新的children没有新增元素（newStartIdx > newEndIdx） \n     * 或 后面新增了vnode（newStartIdx <= newEndIdx）\n     * */\n    ? null\n    /**\n     * newStartIdx <= newEndIdx\n     * 新的children新增了元素，但不是在后面！\n     * 可能是中间！\n     * 也可能是在前面\n     * */\n    : newCh[newEndIdx + 1].elm\n\n  // 循环调用 createElm\n  addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)\n} else if (newStartIdx > newEndIdx) {\n  removeVnodes(oldCh, oldStartIdx, oldEndIdx)\n}\n```\n\n因为在循环遍历children的时候，startIdx（newStartIdx或oldStartIdx）和endIdx分别会向左和右移动。下面是四个索引移动的情况：\n\n- newStartIdx右移：[1.新头与旧头垂直对比]、[4.新头与旧尾交叉对比]、[5.当前新vnode与旧头尾之间的vnode对比]；\n\n- newEndIdx左移：[2.新尾与旧尾垂直对比]、[3.新尾与旧头交叉对比]；\n\n- oldStartIdx右移：[-1.跳过左边已经复用的vnode]、[1.新头与旧头垂直对比]、[3.新尾与旧头交叉对比]；\n\n- ildEndIdx左移：[0.跳过右边已经复用的vnode]、[2.新尾与旧尾垂直对比]、[4.新头与旧尾交叉对比]；\n\n\n## 新children新增了vnode\n\n根据newStartIdx和newEndIdx的移动情况\n\n1.newStartIdx一直右移，由于新增的vnode都在后面，可以复用的vnode都在前面了，newEndIdx会保持不变，直到遍历完旧children：\n<img src=\"add-in-after.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n&nbsp;\n\n2.newStartIdx右移，newEndIdx左移，直到遍历完旧children：\n\n<img src=\"add-in-middle.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n3.新增的vnode都在前面了，由于是新的节点所以存在“newStartIdx右移”的情况，newStartIdx就保持不变了，而可复用的vnode在右边，随着一次次循环，newEndIdx则会左移：\n\n<img src=\"add-in-before.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n新children删除了vnode的情况就不赘述，情况可以从上面的解析类推！\n\n\n# 新旧vnode与真实元素elm的关系\n\n[回到顶部]\n\nvnode是和elm一一对应的，vnode的顺序和elm保持这一致，vnode上的属性也是与对应的elm的属性对应。所以，在patch（给oldVnode打补丁）前，可以认为oldVnode树与页面上elm树是对应的！\n\n\n1.oldVnode.children中vnode的顺序和oldVnode.elm.children(oldVnode对应的elm的子元素列表)的顺序是保持一致的、elm上的属性也是保持一致；\n\n2.diff算法通过对比oldVnode.children与newVnode.children的vnode，找到可以复用的elm，并改变elm的位置，使之与newVnode.children的顺序保持一致！\n\n\n# diff的特点\n\n- **先垂直，再交叉，最后中间找**，diff在旧vnode.children找可复用vnode，所用比对方式的优先级！\n\n&nbsp;\n\n- **只与同级vnode中寻找复用的elm**，由上面的分析可以知道，只会在同级的children中寻找可以复用的vnode。但现实是可以复用的元素可以存在于dom树任意的地方，明显这样是可能回错过实际存在的复用元素，而重新创建元素！这里就是vue或diff的权衡的地方，是不计代价全局去找最优解，还是如当前这般在同级节点中寻找！？\n\n&nbsp;\n\n- **定义key属性可以大幅度减少操作数**，在[5.当前新vnode与旧头尾之间的vnode对比]中，在定义了key的情况下，会创建一个映射表`oldKeyToIdx`，通过映射表可以快速找到可复用vnode，而没有定义的话，就需要遍历oldVnode.children，逐一使用`sameVnode`比对！\n\n# 实用主义\n\n[1.新头与旧头垂直对比]、[2.新尾与旧尾垂直对比]、[3.新尾与旧头交叉对比]、[4.新头与旧尾交叉对比]，以上四种不论是否定义元素属性key\n1. 定义了，可以快速判断出不相同（但不完全可靠）\n\n使用遍历索引作为key，\n\n> 它也可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：\n> \n> 完整地触发组件的生命周期钩子\n> 触发过渡\n\n\n>diff算法默认使用“就地复用”的策略，是一个首尾交叉对比的过程。\n>用index作为key和不加key是一样的，都采用“就地复用”的策略\n>“就地复用”的策略，只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。\n>将与元素唯一对应的值作为key，可以最大化利用dom节点，提升性能\n\n# 附录\n\n[回到顶部]\n\n## sameVnode的功能与实现逻辑\n\n```typescript\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        // 标签相同\n        a.tag === b.tag &&\n\n        // 都是注释元素, 或都不是\n        a.isComment === b.isComment &&\n\n        // idDef = (v) => v !== undefined && v !== null\n        // 都定义了，或都没有定义\n        isDef(a.data) === isDef(b.data) &&\n\n        // a = { data: { atttrs: { type: 'xxx' } } }\n        // 1. 两节点的type相同，\n        //   i. type存在, 且相同；\n        //   ii. 两个type都没有定义，都是undefined；a、b都算是通过\n        // 2. a、b节点type都是'text,number,password,search,email,tel,url'中之一\n        // 换言之 a.type = text, b.type = password，也可以说两个input节点相同\n        // 3. a不是input标签\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\n/**\n * makeMap是个工厂函数，生成 isTextInputType = (key) => {\n *   const map = { text: true, ..., url: true };\n *   return map[key];\n * }\n * \n * 类似于 (val) => [text,number,password,search,email,tel,url].include(val);\n * */\nconst isTextInputType = makeMap('text,number,password,search,email,tel,url')\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') return true\n  let i\n  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type\n  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n```\n\n## patchVnode函数的关键实现\n\n```typescript\nfunction patchVnode (/* */) {\n  // ...\n\n  // a. 复用elm，将oldVnode.elm赋值到newVnode.elm；\n  const elm = vnode.elm = oldVnode.elm\n\n  const oldCh = oldVnode.children\n  const ch = vnode.children\n\n  // b. 更新elm上的属性变动；\n  if (isDef(data) && isPatchable(vnode)) {\n    for (i = 0; i < cbs.update.length; ++i) {\n      cbs.update[i](oldVnode, vnode);\n    }\n    if (isDef(i = data.hook) && isDef(i = i.update)) i(oldVnode, vnode)\n  }\n\n  // 没有文本，即是还有子节点等情况\n  if (isUndef(vnode.text)) {\n    // 新旧vnode都有children\n    if (isDef(oldCh) && isDef(ch)) {\n      // c. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！\n      if (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)\n    }\n    // 省略其他的更新children的操作：增、删等\n  }\n  // ...\n}\n```\n\n## nodeOps.insertBefore实现\n\npath: src/platforms/web/runtime/node-ops.js\n```typescript\nexport function insertBefore (parentNode: Node, newNode: Node, referenceNode: Node) {\n  parentNode.insertBefore(newNode, referenceNode)\n}\n```\n\n> Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置（在将节点附加到其他节点之前，不需要从其父节点删除该节点）。\n\n## vnode（虚拟节点）的成员属性\n\n```typescript\nclass VNode {\n  // 标签\n  tag: string | void;\n  // elm（Element）的属性\n  data: VNodeData | void;\n  // 子虚拟节点\n  children: ?Array<VNode>;\n  text: string | void;\n  // 真实dom元素\n  elm: Node | void;\n  // 元素命名空间\n  ns: string | void;\n  context: Component | void; // rendered in this component's scope\n  key: string | number | void;\n  componentOptions: VNodeComponentOptions | void;\n  componentInstance: Component | void; // component instance\n  parent: VNode | void; // component placeholder node\n\n  // strictly internal\n  raw: boolean; // contains raw HTML? (server only)\n  isStatic: boolean; // hoisted static node\n  isRootInsert: boolean; // necessary for enter transition check\n  isComment: boolean; // empty comment placeholder?\n  isCloned: boolean; // is a cloned node?\n  isOnce: boolean; // is a v-once node?\n  asyncFactory: Function | void; // async component factory function\n  asyncMeta: Object | void;\n  isAsyncPlaceholder: boolean;\n  ssrContext: Object | void;\n  fnContext: Component | void; // real context vm for functional nodes\n  fnOptions: ?ComponentOptions; // for SSR caching\n  devtoolsMeta: ?Object; // used to store functional render context for devtools\n  fnScopeId: ?string; // functional scope id support\n}\n```\n\n\n[回到顶部]: #大纲\n[前言]: #前言\n[diff算法是什么]: #diff算法是什么\n[while之外]: #while之外\n[新旧vnode与真实元素elm的关系]: #新旧vnode与真实元素elm的关系\n[-1.跳过左边已经复用的vnode]: #-1跳过左边已经复用的vnode\n[0.跳过右边已经复用的vnode]: #0跳过右边已经复用的vnode\n[1.新头与旧头垂直对比]: #1新头与旧头垂直对比\n[2.新尾与旧尾垂直对比]: #2新尾与旧尾垂直对比   \n[3.新尾与旧头交叉对比]: #3新尾与旧头交叉对比\n[4.新头与旧尾交叉对比]: #4新头与旧尾交叉对比\n[5.当前新vnode与旧头尾之间的vnode对比]: #5当前新vnode与旧头尾之间的vnode对比\n[while中的控制流顺序]: #while中的控制流顺序\n[附录]: #附录\n[sameVnode的功能与实现逻辑]: #sameVnode的功能与实现逻辑\n[patchVnode函数的关键实现]: #patchVnode函数的关键实现\n[附录：sameVnode的功能与实现逻辑]: #sameVnode的功能与实现逻辑\n[附录：patchVnode函数的关键实现]: #patchVnode函数的关键实现\n","slug":"vue中的diff算法实现","published":1,"updated":"2023-02-18T01:02:44.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcco000n5onr0sh28j4o","content":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#diff%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88\">diff算法是什么</a><ul>\n<li><a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a></li>\n<li><a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a></li>\n<li><a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a></li>\n<li><a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a></li>\n<li><a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a></li>\n<li><a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a></li>\n<li><a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a></li>\n<li><a href=\"#while%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81%E9%A1%BA%E5%BA%8F\">while中的控制流顺序</a></li>\n</ul>\n</li>\n<li><a href=\"#while%E4%B9%8B%E5%A4%96\">while之外</a></li>\n<li><a href=\"#%E6%96%B0%E6%97%A7vnode%E4%B8%8E%E7%9C%9F%E5%AE%9E%E5%85%83%E7%B4%A0elm%E7%9A%84%E5%85%B3%E7%B3%BB\">新旧vnode与真实元素elm的关系</a></li>\n<li><a href=\"#%E9%99%84%E5%BD%95\">附录</a><ul>\n<li><a href=\"#sameVnode%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">sameVnode的功能与实现逻辑</a></li>\n<li><a href=\"#patchVnode%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AE%9E%E7%8E%B0\">patchVnode函数的关键实现</a></li>\n</ul>\n</li>\n</ul>\n<span id=\"more\"></span>\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p><strong>vue版本：2.6.10</strong></p>\n<p>每次更新视图前都会根据视图模板生成vnode（虚拟的节点树），vnode类似dom树，但更简陋，每个vnode都与页面的上的元素html元素一一对应！为了更好的性能，因此要复用元素。那么就要知道怎么复用！就要对比newVnode（当前生成的vnode）和oldVnode（上次生成的vnode），对比完之后才知道那些是要删除，那些是需要重新创建，那些需要移动、移动到哪里！？<br>而diff算法则是对比的一种比较好的方式，更好的更快地对比，谁被谁复用！</p>\n<p>newVnode和oldVnode的比对仅限于同层级之间对比，兄弟之间相互比较，如下图。不会出现跨层级的对比。</p>\n<img src=\"diff-vnode.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n\n<h1 id=\"diff算法是什么\"><a href=\"#diff算法是什么\" class=\"headerlink\" title=\"diff算法是什么\"></a>diff算法是什么</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>diff算法不是一种对比的方法，而是一种寻找与当前节点匹配可复用节点的方法；寻找oldVnode.children中那个成员与newVnode.children中那个成员相同。</p>\n<p>这种寻找的方法如图可见一斑，主要的方法有5种，辅助的有2种（未画在图上），一共7种。每种寻找方式相互独立！通过循环遍历children，逐一判断，直到循环结束。下面结合代码分别说明其中寻找方式。</p>\n<p><strong>ps：无需过于在意图中所表达的逻辑，图只是用于辅助说明下面的源码</strong></p>\n<img src=\"diff-vnode-children.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (</span><br><span class=\"line\">  parentElm,  <span class=\"comment\">// &#123;Element&#125;，父节点的真实html元素</span></span><br><span class=\"line\">  oldCh,  <span class=\"comment\">// &#123;Vnode[]&#125;，oldVnode.children</span></span><br><span class=\"line\">  newCh,  <span class=\"comment\">// &#123;Vnode[]&#125;，newVnode.children</span></span><br><span class=\"line\">  insertedVnodeQueue,   <span class=\"comment\">// &#123;Vnode[]&#125;，插入的节点队列（此时可忽略）</span></span><br><span class=\"line\">  removeOnly  <span class=\"comment\">// &#123;Boolean&#125;，是否只可以删除</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立四个指针<code>oldStartVnode</code>、<code>oldEndVnode</code>、<code>newStartVnode</code>、<code>newEndVnode</code>，由<code>updateChildren</code>中的定义可以知道：开始时，他们分别指向<code>oldVnode.children</code>的头部、<code>oldVnode.children</code>的尾部、<code>newVnode.children</code>的头部、<code>newVnode.children</code>的尾部。然后，这四个指针的指向也不是固定的，在循环遍历的过程中，他们的指向也会变动，他们指向会因为以下索引的变动而变动，<code>oldStartIdx</code>、<code>oldEndIdx</code>、<code>newStartIdx</code>、<code>newEndIdx</code>。</p>\n<h2 id=\"1-新头与旧头垂直对比\"><a href=\"#1-新头与旧头垂直对比\" class=\"headerlink\" title=\"1.新头与旧头垂直对比\"></a>1.新头与旧头垂直对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-01.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新旧头部vnode进行对比，判断是否匹配，以复用。sameVnode的功能与实现逻辑参考<a href=\"#sameVnode%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">附录：sameVnode的功能与实现逻辑</a>，值得一提的是：a.是input元素，更新前后type不一致；b.变动的是key属性；c.元素更新前后将所有属性删除，或从无到有；只要不是以上三种情况之一，不论怎么增删、修改元素上的属性，都不会影响是否匹配的结果！</p>\n<p>1.判断新旧头部是匹配的，那么就调用<code>patchVnode</code>，给<code>newStartVnode</code>打补丁！</p>\n<p><code>patchVnode</code>函数的主要功能：</p>\n<p>a. 复用elm，将oldVnode.elm赋值到newVnode.elm；<br>b. 更新elm上的属性变动；<br>c. 更新newVnode.children，增删或复用，这里的复用就是通过调用<code>updateChildren</code>来实现，没错递归了！</p>\n<p>patchVnode函数的主要功能参考：<a href=\"#patchVnode%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AE%9E%E7%8E%B0\">附录：patchVnode函数的关键实现</a></p>\n<p>2.分别右移<code>oldStartVnode</code>和<code>newStartVnode</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-新尾与旧尾垂直对比\"><a href=\"#2-新尾与旧尾垂直对比\" class=\"headerlink\" title=\"2.新尾与旧尾垂直对比\"></a>2.新尾与旧尾垂直对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-02.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新旧尾部的对比情况和[1新头与旧头垂直对比]类似，再次再累累述，以下实现的逻辑：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-新尾与旧头交叉对比\"><a href=\"#3-新尾与旧头交叉对比\" class=\"headerlink\" title=\"3.新尾与旧头交叉对比\"></a>3.新尾与旧头交叉对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-03.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>当前情况与[1新头与旧头垂直对比]略有不同！看源码中，多出了下面这句：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldStartVnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">nextSibling</span>(oldEndVnode.<span class=\"property\">elm</span>))</span><br></pre></td></tr></table></figure>\n\n<p>这句代码实现就是图片中移动elm的功能！为什么要移动elm？因为newEndVnode复用了oldStartVnode.elm，复用这一步已经由<code>patchVnode</code>函数实现，然后还需要让elm列的顺序与newVnode的顺序保持一致，所以需要将<code>oldStartVnode.elm</code>移动到正确的位置！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。</span></span><br><span class=\"line\"><span class=\"comment\">       * 如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// canMove &amp;&amp; 在parentElm的nodeOps.nextSibling(oldEndVnode.elm)前面插入oldStartVnode.elm</span></span><br><span class=\"line\">      <span class=\"comment\">// 换言之，在 oldEndVnode.elm 前面插入 oldStartVnode.elm</span></span><br><span class=\"line\">      <span class=\"comment\">// 旧children的 头部真实元素 移动到 尾部真实元素的后面</span></span><br><span class=\"line\">      canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldStartVnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">nextSibling</span>(oldEndVnode.<span class=\"property\">elm</span>))</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-新头与旧尾交叉对比\"><a href=\"#4-新头与旧尾交叉对比\" class=\"headerlink\" title=\"4.新头与旧尾交叉对比\"></a>4.新头与旧尾交叉对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-04.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>当前情况与[新尾与旧头交叉对比]类似，不做赘述！配合图片和源码食用口味更佳~</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">      <span class=\"comment\">// 将旧children的尾部真实元素移动到头部真实元素的后面</span></span><br><span class=\"line\">      canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldEndVnode.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>)</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-当前新vnode与旧头尾之间的vnode对比\"><a href=\"#5-当前新vnode与旧头尾之间的vnode对比\" class=\"headerlink\" title=\"5.当前新vnode与旧头尾之间的vnode对比\"></a>5.当前新vnode与旧头尾之间的vnode对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>在本次循环中，前4种控制流都没有进入，就说明一头一尾、两次交叉对比都没有找到可复用的节点！但这并非代表旧children中无可复用，因为头与尾之间的元素还没有比对过，第5种方式即是如此！这第5种方式在有定义<code>key</code>(<code>v-for</code>指令中的<code>key</code>)或没有的情况下又是不同的表现！</p>\n<p><strong>注意：在此情况下，是用新头去旧children的头尾之间寻找可复用元素</strong></p>\n<h3 id=\"5-1-构建oldCildren映射表-key-x3D-gt-idx\"><a href=\"#5-1-构建oldCildren映射表-key-x3D-gt-idx\" class=\"headerlink\" title=\"5-1.构建oldCildren映射表(key &#x3D;&gt; idx)\"></a>5-1.构建oldCildren映射表(key &#x3D;&gt; idx)</h3><p>从oldChildren构建一个映射表(key &#x3D;&gt; idx)，这样就可以通过key，结合这个映射表快速找到匹配的可复用的元素。时间复杂度就是<code>O(1)</code>！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 5-1 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 只会执行一次，第一次定义映射表</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldKeyToIdx)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建对象映射表，children.key =&gt; children.i, i ∈ [oldStartIdx, oldEndIdx]</span></span><br><span class=\"line\">        oldKeyToIdx = <span class=\"title function_\">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>createKeyToOldIdx的实现：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createKeyToOldIdx</span> (children, beginIdx, endIdx) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, key</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class=\"line\">    key = children[i].<span class=\"property\">key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(key)) map[key] = i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-根据5-1的映射表找到可复用vnode的索引\"><a href=\"#5-2-根据5-1的映射表找到可复用vnode的索引\" class=\"headerlink\" title=\"5-2.根据5-1的映射表找到可复用vnode的索引\"></a>5-2.根据5-1的映射表找到可复用vnode的索引</h3><p>列表渲染中不一定会定义<code>key</code>，如果没有定义那么<code>5-1</code>的映射表就没有用了。那么就需要遍历旧children节点寻找与新头匹配的元素（详见下面代码的<code>findIdxInOld</code>方法）！那么时间复杂度就上来了，不再是使用映射表时的<code>O(1)</code>，而是<code>O(n)</code>。由此也可以知道使用<code>key</code>的性能优化优越之所在！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5.2 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 定义key，直接在名射表找，时间复杂度: O(1)</span></span><br><span class=\"line\">      <span class=\"comment\">// 没有定义key，用新vnode与旧vnode数组比对，时间复杂度：O(n)</span></span><br><span class=\"line\">      <span class=\"comment\">// const isDef = (v) =&gt; v !== undefined &amp;&amp; v !== null</span></span><br><span class=\"line\">      idxInOld = <span class=\"title function_\">isDef</span>(newStartVnode.<span class=\"property\">key</span>)</span><br><span class=\"line\">        ? oldKeyToIdx[newStartVnode.<span class=\"property\">key</span>]</span><br><span class=\"line\">        <span class=\"comment\">// 返回oldCh中与newStartVnode相同（ sameVnode(newStartVnode, oldCh[itIdx]) ）节点(即isDef(oldCh[itIdx].key) 同样是false)的index</span></span><br><span class=\"line\">        : <span class=\"title function_\">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>findIdxInOld：时间复杂度<code>O(n)</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findIdxInOld</span> (node, oldCh, start, end) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = oldCh[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(c) &amp;&amp; <span class=\"title function_\">sameVnode</span>(node, c)) <span class=\"keyword\">return</span> i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-无可复用旧元素\"><a href=\"#5-3-无可复用旧元素\" class=\"headerlink\" title=\"5-3.无可复用旧元素\"></a>5-3.无可复用旧元素</h3><p>在旧children可能会找到也可能找不到可复用的元素，没有找到是什么情况？如图：</p>\n<img src=\"diff-vnode-children-05.png\" width=\"100%\" alt=\"vue中的diff算法实现：在头尾见找可复用元素\"/>\n\n<p>假如现在<code>newStartVnode</code>指向的是<code>key = 1.5</code>的vnode，那么很明显旧children中就没有可以复用的vnode，那么需要做的就是：a.创建一个与<code>newStartVnode</code>对应的newElm(新的真实html元素)；b.然后将newElm插入到旧children中<code>key=02</code>的vnode对应的真实元素的前面！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5.3 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中不存在新节点，无法复用旧元素</span></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">       * [ 1 ] [ 2 ] [2.5] [ 3 ] [ 4 ] [ 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">       * [2.5]就是插入的，且就children中没有与之“相同”的vnode</span></span><br><span class=\"line\"><span class=\"comment\">       * 目前 newStartIdx = oldStartIdx = 2</span></span><br><span class=\"line\"><span class=\"comment\">       * 那么现在需要做的是：a.创建一个与[2.5]对应的真实元素；b.将元素插入到 [ 2 ] 后面 [ 3 ]前面</span></span><br><span class=\"line\"><span class=\"comment\">       * nodeOps.insertBefore(parentElm, newElm, oldStartVnode.elm)</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建 newStartVnode 对应的elm，将elm插入到parentElm的子元素oldStartVnode.elm的前面（如果oldStartVnode.elm不存在即插入到parentElm的最后）</span></span><br><span class=\"line\">        <span class=\"title function_\">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class=\"property\">elm</span>, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-复用旧元素\"><a href=\"#5-4-复用旧元素\" class=\"headerlink\" title=\"5-4.复用旧元素\"></a>5-4.复用旧元素</h3><p>5-3和5-4是互斥的，进入5-4控制流就表示5-2中返回的<code>idxInOld</code>不为空，旧children中存在这匹配的vnode。虽然存在可用的vnode，但如果<code>key</code>并不可信呢？比如<code>v-for=&quot;(item, index) in items&quot;</code>中的索引被用作<code>key</code>！！！因此有了下面的5-4-1和5-4-2。</p>\n<h4 id=\"5-4-1-确实可复用\"><a href=\"#5-4-1-确实可复用\" class=\"headerlink\" title=\"5-4-1.确实可复用\"></a>5-4-1.确实可复用</h4><p>使用sameVnode方法二次确认vnodeToMove（在旧children中找到的vnode）时可用的！接下就是类似的操作。但比较明显的不同是：其他都是递增或递减新旧索引，但在5-4-1中则是递增newStartIdx，然后旧vnode置为null(<code>oldCh[idxInOld] = undefined</code>)，这是设计的巧妙之处，当前还没有感受到，再看下<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a>和<a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a>中的内容就会豁然开朗！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5-4 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中存在新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 5-4-1 */</span></span><br><span class=\"line\">        vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">        <span class=\"comment\">// 保证节点的key和虚拟节点都相同（ oldKeyToIdx[newStartVnode.key] 获取的idxInOld，指向</span></span><br><span class=\"line\">        <span class=\"comment\">// 的虚拟节点可能与newStartVnode节点不一样(!sameVnode) ）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">          oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">          canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, vnodeToMove.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-4-2-虚假的可复用\"><a href=\"#5-4-2-虚假的可复用\" class=\"headerlink\" title=\"5-4-2.虚假的可复用\"></a>5-4-2.虚假的可复用</h4><p>5-4-1与5-4-2是互斥的，既然没有元素可以复用到<code>newStartVnode</code>中，那么只能像5-3中那样创建与<code>newStartVnode</code>对应的html元素！！！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5-4 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中存在新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 5-4-2 */</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">          <span class=\"comment\">// key相同但虚拟节点不同，newStartVnode当做新元素创建</span></span><br><span class=\"line\">          <span class=\"title function_\">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class=\"property\">elm</span>, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-跳过左边已经复用的vnode\"><a href=\"#1-跳过左边已经复用的vnode\" class=\"headerlink\" title=\"-1.跳过左边已经复用的vnode\"></a>-1.跳过左边已经复用的vnode</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>我们知道<code>oldStartVnode</code>这个指针是不断地右移，从下面的代码中的<code>isUndef(oldStartVnode)</code>知道，一旦碰到未定的vnode就会右移一个单位，继续循环比对后面的vnode。为什么会有未定义的vnode？正常来说应该存在，因为vnode都是与页面上的html元素一一对应的！在<a href=\"#5-4-1%E7%A1%AE%E5%AE%9E%E5%8F%AF%E5%A4%8D%E7%94%A8\">5-4-1.确实可复用</a>中，vue确实地将旧children中存在可复用elm的vnode手动置为了undefined：<code>oldCh[idxInOld] = undefined</code>！为什么置空不直接用<code>delete</code>操作符删除？！删了就换了idx顺序！！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* -1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldStartVnode)) &#123;</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0-跳过右边已经复用的vnode\"><a href=\"#0-跳过右边已经复用的vnode\" class=\"headerlink\" title=\"0.跳过右边已经复用的vnode\"></a>0.跳过右边已经复用的vnode</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>参考<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldEndVnode)) &#123;</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"while中的控制流顺序\"><a href=\"#while中的控制流顺序\" class=\"headerlink\" title=\"while中的控制流顺序\"></a>while中的控制流顺序</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>上面为了突出重点去讲，没有按while中控制流的顺序书写，以下是while块总各控制流的顺序：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* -1：跳过左边已经复用的vnode */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 0：跳过右边已经复用的vnode */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 1：新头与旧头垂直对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 2：新尾与旧尾垂直对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 3：新尾与旧头交叉对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 4：新头与旧尾交叉对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"while之外\"><a href=\"#while之外\" class=\"headerlink\" title=\"while之外\"></a>while之外</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>留意while的循环条件：<code>oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx</code>，只要<code>oldStartIdx</code>大于<code>oldEndIdx</code>或<code>newStartIdx</code>大于<code>newEndIdx</code>就会结束循环！换言之，只要遍历完新旧children任意一个就会结束循环！</p>\n<p>a. 先遍历完旧children就说明<strong>新children新增了vnode</strong>，那么就要创建与这些vnodes对应的elm；<br>b. 先遍历完新children就说明<strong>新children删除了一些vnode</strong>，那么就要删除多出的vnodes。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会用调用node.insertBefore插入新元素，现在就是找引用元素，在refElm前面插入新元素</span></span><br><span class=\"line\">  refElm = <span class=\"title function_\">isUndef</span>(newCh[newEndIdx + <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的children没有新增元素（newStartIdx &gt; newEndIdx） </span></span><br><span class=\"line\"><span class=\"comment\">     * 或 后面新增了vnode（newStartIdx &lt;= newEndIdx）</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    ? <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * newStartIdx &lt;= newEndIdx</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的children新增了元素，但不是在后面！</span></span><br><span class=\"line\"><span class=\"comment\">     * 可能是中间！</span></span><br><span class=\"line\"><span class=\"comment\">     * 也可能是在前面</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    : newCh[newEndIdx + <span class=\"number\">1</span>].<span class=\"property\">elm</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环调用 createElm</span></span><br><span class=\"line\">  <span class=\"title function_\">addVnodes</span>(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">removeVnodes</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为在循环遍历children的时候，startIdx（newStartIdx或oldStartIdx）和endIdx分别会向左和右移动。下面是四个索引移动的情况：</p>\n<ul>\n<li><p>newStartIdx右移：<a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>、<a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a>；</p>\n</li>\n<li><p>newEndIdx左移：<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>；</p>\n</li>\n<li><p>oldStartIdx右移：<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a>、<a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>；</p>\n</li>\n<li><p>ildEndIdx左移：<a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a>、<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>；</p>\n</li>\n</ul>\n<h2 id=\"新children新增了vnode\"><a href=\"#新children新增了vnode\" class=\"headerlink\" title=\"新children新增了vnode\"></a>新children新增了vnode</h2><p>根据newStartIdx和newEndIdx的移动情况</p>\n<p>1.newStartIdx一直右移，由于新增的vnode都在后面，可以复用的vnode都在前面了，newEndIdx会保持不变，直到遍历完旧children：<br><img src=\"add-in-after.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/><br>&amp;nbsp;</p>\n<p>2.newStartIdx右移，newEndIdx左移，直到遍历完旧children：</p>\n<img src=\"add-in-middle.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>3.新增的vnode都在前面了，由于是新的节点所以存在“newStartIdx右移”的情况，newStartIdx就保持不变了，而可复用的vnode在右边，随着一次次循环，newEndIdx则会左移：</p>\n<img src=\"add-in-before.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新children删除了vnode的情况就不赘述，情况可以从上面的解析类推！</p>\n<h1 id=\"新旧vnode与真实元素elm的关系\"><a href=\"#新旧vnode与真实元素elm的关系\" class=\"headerlink\" title=\"新旧vnode与真实元素elm的关系\"></a>新旧vnode与真实元素elm的关系</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>vnode是和elm一一对应的，vnode的顺序和elm保持这一致，vnode上的属性也是与对应的elm的属性对应。所以，在patch（给oldVnode打补丁）前，可以认为oldVnode树与页面上elm树是对应的！</p>\n<p>1.oldVnode.children中vnode的顺序和oldVnode.elm.children(oldVnode对应的elm的子元素列表)的顺序是保持一致的、elm上的属性也是保持一致；</p>\n<p>2.diff算法通过对比oldVnode.children与newVnode.children的vnode，找到可以复用的elm，并改变elm的位置，使之与newVnode.children的顺序保持一致！</p>\n<h1 id=\"diff的特点\"><a href=\"#diff的特点\" class=\"headerlink\" title=\"diff的特点\"></a>diff的特点</h1><ul>\n<li><strong>先垂直，再交叉，最后中间找</strong>，diff在旧vnode.children找可复用vnode，所用比对方式的优先级！</li>\n</ul>\n<p>&amp;nbsp;</p>\n<ul>\n<li><strong>只与同级vnode中寻找复用的elm</strong>，由上面的分析可以知道，只会在同级的children中寻找可以复用的vnode。但现实是可以复用的元素可以存在于dom树任意的地方，明显这样是可能回错过实际存在的复用元素，而重新创建元素！这里就是vue或diff的权衡的地方，是不计代价全局去找最优解，还是如当前这般在同级节点中寻找！？</li>\n</ul>\n<p>&amp;nbsp;</p>\n<ul>\n<li><strong>定义key属性可以大幅度减少操作数</strong>，在<a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a>中，在定义了key的情况下，会创建一个映射表<code>oldKeyToIdx</code>，通过映射表可以快速找到可复用vnode，而没有定义的话，就需要遍历oldVnode.children，逐一使用<code>sameVnode</code>比对！</li>\n</ul>\n<h1 id=\"实用主义\"><a href=\"#实用主义\" class=\"headerlink\" title=\"实用主义\"></a>实用主义</h1><p><a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>，以上四种不论是否定义元素属性key</p>\n<ol>\n<li>定义了，可以快速判断出不相同（但不完全可靠）</li>\n</ol>\n<p>使用遍历索引作为key，</p>\n<blockquote>\n<p>它也可以用于强制替换元素&#x2F;组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p>\n<p>完整地触发组件的生命周期钩子<br>触发过渡</p>\n</blockquote>\n<blockquote>\n<p>diff算法默认使用“就地复用”的策略，是一个首尾交叉对比的过程。<br>用index作为key和不加key是一样的，都采用“就地复用”的策略<br>“就地复用”的策略，只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。<br>将与元素唯一对应的值作为key，可以最大化利用dom节点，提升性能</p>\n</blockquote>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<h2 id=\"sameVnode的功能与实现逻辑\"><a href=\"#sameVnode的功能与实现逻辑\" class=\"headerlink\" title=\"sameVnode的功能与实现逻辑\"></a>sameVnode的功能与实现逻辑</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sameVnode</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    a.<span class=\"property\">key</span> === b.<span class=\"property\">key</span> &amp;&amp; (</span><br><span class=\"line\">      (</span><br><span class=\"line\">        <span class=\"comment\">// 标签相同</span></span><br><span class=\"line\">        a.<span class=\"property\">tag</span> === b.<span class=\"property\">tag</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 都是注释元素, 或都不是</span></span><br><span class=\"line\">        a.<span class=\"property\">isComment</span> === b.<span class=\"property\">isComment</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// idDef = (v) =&gt; v !== undefined &amp;&amp; v !== null</span></span><br><span class=\"line\">        <span class=\"comment\">// 都定义了，或都没有定义</span></span><br><span class=\"line\">        <span class=\"title function_\">isDef</span>(a.<span class=\"property\">data</span>) === <span class=\"title function_\">isDef</span>(b.<span class=\"property\">data</span>) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a = &#123; data: &#123; atttrs: &#123; type: &#x27;xxx&#x27; &#125; &#125; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 两节点的type相同，</span></span><br><span class=\"line\">        <span class=\"comment\">//   i. type存在, 且相同；</span></span><br><span class=\"line\">        <span class=\"comment\">//   ii. 两个type都没有定义，都是undefined；a、b都算是通过</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. a、b节点type都是&#x27;text,number,password,search,email,tel,url&#x27;中之一</span></span><br><span class=\"line\">        <span class=\"comment\">// 换言之 a.type = text, b.type = password，也可以说两个input节点相同</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. a不是input标签</span></span><br><span class=\"line\">        <span class=\"title function_\">sameInputType</span>(a, b)</span><br><span class=\"line\">      ) || (</span><br><span class=\"line\">        <span class=\"title function_\">isTrue</span>(a.<span class=\"property\">isAsyncPlaceholder</span>) &amp;&amp;</span><br><span class=\"line\">        a.<span class=\"property\">asyncFactory</span> === b.<span class=\"property\">asyncFactory</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isUndef</span>(b.<span class=\"property\">asyncFactory</span>.<span class=\"property\">error</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * makeMap是个工厂函数，生成 isTextInputType = (key) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   const map = &#123; text: true, ..., url: true &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> *   return map[key];</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 类似于 (val) =&gt; [text,number,password,search,email,tel,url].include(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isTextInputType = <span class=\"title function_\">makeMap</span>(<span class=\"string\">&#x27;text,number,password,search,email,tel,url&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sameInputType</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.<span class=\"property\">tag</span> !== <span class=\"string\">&#x27;input&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> typeA = <span class=\"title function_\">isDef</span>(i = a.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">attrs</span>) &amp;&amp; i.<span class=\"property\">type</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> typeB = <span class=\"title function_\">isDef</span>(i = b.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">attrs</span>) &amp;&amp; i.<span class=\"property\">type</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> typeA === typeB || <span class=\"title function_\">isTextInputType</span>(typeA) &amp;&amp; <span class=\"title function_\">isTextInputType</span>(typeB)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"patchVnode函数的关键实现\"><a href=\"#patchVnode函数的关键实现\" class=\"headerlink\" title=\"patchVnode函数的关键实现\"></a>patchVnode函数的关键实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">patchVnode</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a. 复用elm，将oldVnode.elm赋值到newVnode.elm；</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> elm = vnode.<span class=\"property\">elm</span> = oldVnode.<span class=\"property\">elm</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldCh = oldVnode.<span class=\"property\">children</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ch = vnode.<span class=\"property\">children</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// b. 更新elm上的属性变动；</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(data) &amp;&amp; <span class=\"title function_\">isPatchable</span>(vnode)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.<span class=\"property\">update</span>.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">      cbs.<span class=\"property\">update</span>[i](oldVnode, vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i = data.<span class=\"property\">hook</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">update</span>)) <span class=\"title function_\">i</span>(oldVnode, vnode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有文本，即是还有子节点等情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(vnode.<span class=\"property\">text</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新旧vnode都有children</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldCh) &amp;&amp; <span class=\"title function_\">isDef</span>(ch)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// c. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldCh !== ch) <span class=\"title function_\">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他的更新children的操作：增、删等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodeOps-insertBefore实现\"><a href=\"#nodeOps-insertBefore实现\" class=\"headerlink\" title=\"nodeOps.insertBefore实现\"></a>nodeOps.insertBefore实现</h2><p>path: src&#x2F;platforms&#x2F;web&#x2F;runtime&#x2F;node-ops.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">insertBefore</span> (<span class=\"attr\">parentNode</span>: <span class=\"title class_\">Node</span>, <span class=\"attr\">newNode</span>: <span class=\"title class_\">Node</span>, <span class=\"attr\">referenceNode</span>: <span class=\"title class_\">Node</span>) &#123;</span><br><span class=\"line\">  parentNode.<span class=\"title function_\">insertBefore</span>(newNode, referenceNode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置（在将节点附加到其他节点之前，不需要从其父节点删除该节点）。</p>\n</blockquote>\n<h2 id=\"vnode（虚拟节点）的成员属性\"><a href=\"#vnode（虚拟节点）的成员属性\" class=\"headerlink\" title=\"vnode（虚拟节点）的成员属性\"></a>vnode（虚拟节点）的成员属性</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标签</span></span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// elm（Element）的属性</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">VNodeData</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 子虚拟节点</span></span><br><span class=\"line\">  <span class=\"attr\">children</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 真实dom元素</span></span><br><span class=\"line\">  <span class=\"attr\">elm</span>: <span class=\"title class_\">Node</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 元素命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">ns</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// rendered in this component&#x27;s scope</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentOptions</span>: <span class=\"title class_\">VNodeComponentOptions</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentInstance</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component instance</span></span><br><span class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"title class_\">VNode</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component placeholder node</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// strictly internal</span></span><br><span class=\"line\">  <span class=\"attr\">raw</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// contains raw HTML? (server only)</span></span><br><span class=\"line\">  <span class=\"attr\">isStatic</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// hoisted static node</span></span><br><span class=\"line\">  <span class=\"attr\">isRootInsert</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// necessary for enter transition check</span></span><br><span class=\"line\">  <span class=\"attr\">isComment</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// empty comment placeholder?</span></span><br><span class=\"line\">  <span class=\"attr\">isCloned</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a cloned node?</span></span><br><span class=\"line\">  <span class=\"attr\">isOnce</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a v-once node?</span></span><br><span class=\"line\">  <span class=\"attr\">asyncFactory</span>: <span class=\"title class_\">Function</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// async component factory function</span></span><br><span class=\"line\">  <span class=\"attr\">asyncMeta</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">isAsyncPlaceholder</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">ssrContext</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">fnContext</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// real context vm for functional nodes</span></span><br><span class=\"line\">  <span class=\"attr\">fnOptions</span>: ?<span class=\"title class_\">ComponentOptions</span>; <span class=\"comment\">// for SSR caching</span></span><br><span class=\"line\">  <span class=\"attr\">devtoolsMeta</span>: ?<span class=\"title class_\">Object</span>; <span class=\"comment\">// used to store functional render context for devtools</span></span><br><span class=\"line\">  <span class=\"attr\">fnScopeId</span>: ?<span class=\"built_in\">string</span>; <span class=\"comment\">// functional scope id support</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><ul>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#diff%E7%AE%97%E6%B3%95%E6%98%AF%E4%BB%80%E4%B9%88\">diff算法是什么</a><ul>\n<li><a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a></li>\n<li><a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a></li>\n<li><a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a></li>\n<li><a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a></li>\n<li><a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a></li>\n<li><a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a></li>\n<li><a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a></li>\n<li><a href=\"#while%E4%B8%AD%E7%9A%84%E6%8E%A7%E5%88%B6%E6%B5%81%E9%A1%BA%E5%BA%8F\">while中的控制流顺序</a></li>\n</ul>\n</li>\n<li><a href=\"#while%E4%B9%8B%E5%A4%96\">while之外</a></li>\n<li><a href=\"#%E6%96%B0%E6%97%A7vnode%E4%B8%8E%E7%9C%9F%E5%AE%9E%E5%85%83%E7%B4%A0elm%E7%9A%84%E5%85%B3%E7%B3%BB\">新旧vnode与真实元素elm的关系</a></li>\n<li><a href=\"#%E9%99%84%E5%BD%95\">附录</a><ul>\n<li><a href=\"#sameVnode%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">sameVnode的功能与实现逻辑</a></li>\n<li><a href=\"#patchVnode%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AE%9E%E7%8E%B0\">patchVnode函数的关键实现</a></li>\n</ul>\n</li>\n</ul>","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p><strong>vue版本：2.6.10</strong></p>\n<p>每次更新视图前都会根据视图模板生成vnode（虚拟的节点树），vnode类似dom树，但更简陋，每个vnode都与页面的上的元素html元素一一对应！为了更好的性能，因此要复用元素。那么就要知道怎么复用！就要对比newVnode（当前生成的vnode）和oldVnode（上次生成的vnode），对比完之后才知道那些是要删除，那些是需要重新创建，那些需要移动、移动到哪里！？<br>而diff算法则是对比的一种比较好的方式，更好的更快地对比，谁被谁复用！</p>\n<p>newVnode和oldVnode的比对仅限于同层级之间对比，兄弟之间相互比较，如下图。不会出现跨层级的对比。</p>\n<img src=\"diff-vnode.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n\n<h1 id=\"diff算法是什么\"><a href=\"#diff算法是什么\" class=\"headerlink\" title=\"diff算法是什么\"></a>diff算法是什么</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>diff算法不是一种对比的方法，而是一种寻找与当前节点匹配可复用节点的方法；寻找oldVnode.children中那个成员与newVnode.children中那个成员相同。</p>\n<p>这种寻找的方法如图可见一斑，主要的方法有5种，辅助的有2种（未画在图上），一共7种。每种寻找方式相互独立！通过循环遍历children，逐一判断，直到循环结束。下面结合代码分别说明其中寻找方式。</p>\n<p><strong>ps：无需过于在意图中所表达的逻辑，图只是用于辅助说明下面的源码</strong></p>\n<img src=\"diff-vnode-children.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (</span><br><span class=\"line\">  parentElm,  <span class=\"comment\">// &#123;Element&#125;，父节点的真实html元素</span></span><br><span class=\"line\">  oldCh,  <span class=\"comment\">// &#123;Vnode[]&#125;，oldVnode.children</span></span><br><span class=\"line\">  newCh,  <span class=\"comment\">// &#123;Vnode[]&#125;，newVnode.children</span></span><br><span class=\"line\">  insertedVnodeQueue,   <span class=\"comment\">// &#123;Vnode[]&#125;，插入的节点队列（此时可忽略）</span></span><br><span class=\"line\">  removeOnly  <span class=\"comment\">// &#123;Boolean&#125;，是否只可以删除</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartIdx = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndIdx = oldCh.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldStartVnode = oldCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndIdx = newCh.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newStartVnode = newCh[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class=\"line\">    <span class=\"keyword\">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立四个指针<code>oldStartVnode</code>、<code>oldEndVnode</code>、<code>newStartVnode</code>、<code>newEndVnode</code>，由<code>updateChildren</code>中的定义可以知道：开始时，他们分别指向<code>oldVnode.children</code>的头部、<code>oldVnode.children</code>的尾部、<code>newVnode.children</code>的头部、<code>newVnode.children</code>的尾部。然后，这四个指针的指向也不是固定的，在循环遍历的过程中，他们的指向也会变动，他们指向会因为以下索引的变动而变动，<code>oldStartIdx</code>、<code>oldEndIdx</code>、<code>newStartIdx</code>、<code>newEndIdx</code>。</p>\n<h2 id=\"1-新头与旧头垂直对比\"><a href=\"#1-新头与旧头垂直对比\" class=\"headerlink\" title=\"1.新头与旧头垂直对比\"></a>1.新头与旧头垂直对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-01.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新旧头部vnode进行对比，判断是否匹配，以复用。sameVnode的功能与实现逻辑参考<a href=\"#sameVnode%E7%9A%84%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91\">附录：sameVnode的功能与实现逻辑</a>，值得一提的是：a.是input元素，更新前后type不一致；b.变动的是key属性；c.元素更新前后将所有属性删除，或从无到有；只要不是以上三种情况之一，不论怎么增删、修改元素上的属性，都不会影响是否匹配的结果！</p>\n<p>1.判断新旧头部是匹配的，那么就调用<code>patchVnode</code>，给<code>newStartVnode</code>打补丁！</p>\n<p><code>patchVnode</code>函数的主要功能：</p>\n<p>a. 复用elm，将oldVnode.elm赋值到newVnode.elm；<br>b. 更新elm上的属性变动；<br>c. 更新newVnode.children，增删或复用，这里的复用就是通过调用<code>updateChildren</code>来实现，没错递归了！</p>\n<p>patchVnode函数的主要功能参考：<a href=\"#patchVnode%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AE%9E%E7%8E%B0\">附录：patchVnode函数的关键实现</a></p>\n<p>2.分别右移<code>oldStartVnode</code>和<code>newStartVnode</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-新尾与旧尾垂直对比\"><a href=\"#2-新尾与旧尾垂直对比\" class=\"headerlink\" title=\"2.新尾与旧尾垂直对比\"></a>2.新尾与旧尾垂直对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-02.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新旧尾部的对比情况和[1新头与旧头垂直对比]类似，再次再累累述，以下实现的逻辑：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 2 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-新尾与旧头交叉对比\"><a href=\"#3-新尾与旧头交叉对比\" class=\"headerlink\" title=\"3.新尾与旧头交叉对比\"></a>3.新尾与旧头交叉对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-03.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>当前情况与[1新头与旧头垂直对比]略有不同！看源码中，多出了下面这句：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldStartVnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">nextSibling</span>(oldEndVnode.<span class=\"property\">elm</span>))</span><br></pre></td></tr></table></figure>\n\n<p>这句代码实现就是图片中移动elm的功能！为什么要移动elm？因为newEndVnode复用了oldStartVnode.elm，复用这一步已经由<code>patchVnode</code>函数实现，然后还需要让elm列的顺序与newVnode的顺序保持一致，所以需要将<code>oldStartVnode.elm</code>移动到正确的位置！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 3 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">// Vnode moved right</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。</span></span><br><span class=\"line\"><span class=\"comment\">       * 如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"comment\">// canMove &amp;&amp; 在parentElm的nodeOps.nextSibling(oldEndVnode.elm)前面插入oldStartVnode.elm</span></span><br><span class=\"line\">      <span class=\"comment\">// 换言之，在 oldEndVnode.elm 前面插入 oldStartVnode.elm</span></span><br><span class=\"line\">      <span class=\"comment\">// 旧children的 头部真实元素 移动到 尾部真实元素的后面</span></span><br><span class=\"line\">      canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldStartVnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">nextSibling</span>(oldEndVnode.<span class=\"property\">elm</span>))</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class=\"line\">      newEndVnode = newCh[--newEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-新头与旧尾交叉对比\"><a href=\"#4-新头与旧尾交叉对比\" class=\"headerlink\" title=\"4.新头与旧尾交叉对比\"></a>4.新头与旧尾交叉对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<img src=\"diff-vnode-children-04.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>当前情况与[新尾与旧头交叉对比]类似，不做赘述！配合图片和源码食用口味更佳~</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 4 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">// Vnode moved left</span></span><br><span class=\"line\">      <span class=\"title function_\">patchVnode</span>(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">      <span class=\"comment\">// 将旧children的尾部真实元素移动到头部真实元素的后面</span></span><br><span class=\"line\">      canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, oldEndVnode.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>)</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-当前新vnode与旧头尾之间的vnode对比\"><a href=\"#5-当前新vnode与旧头尾之间的vnode对比\" class=\"headerlink\" title=\"5.当前新vnode与旧头尾之间的vnode对比\"></a>5.当前新vnode与旧头尾之间的vnode对比</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>在本次循环中，前4种控制流都没有进入，就说明一头一尾、两次交叉对比都没有找到可复用的节点！但这并非代表旧children中无可复用，因为头与尾之间的元素还没有比对过，第5种方式即是如此！这第5种方式在有定义<code>key</code>(<code>v-for</code>指令中的<code>key</code>)或没有的情况下又是不同的表现！</p>\n<p><strong>注意：在此情况下，是用新头去旧children的头尾之间寻找可复用元素</strong></p>\n<h3 id=\"5-1-构建oldCildren映射表-key-x3D-gt-idx\"><a href=\"#5-1-构建oldCildren映射表-key-x3D-gt-idx\" class=\"headerlink\" title=\"5-1.构建oldCildren映射表(key &#x3D;&gt; idx)\"></a>5-1.构建oldCildren映射表(key &#x3D;&gt; idx)</h3><p>从oldChildren构建一个映射表(key &#x3D;&gt; idx)，这样就可以通过key，结合这个映射表快速找到匹配的可复用的元素。时间复杂度就是<code>O(1)</code>！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 5-1 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 只会执行一次，第一次定义映射表</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldKeyToIdx)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建对象映射表，children.key =&gt; children.i, i ∈ [oldStartIdx, oldEndIdx]</span></span><br><span class=\"line\">        oldKeyToIdx = <span class=\"title function_\">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>createKeyToOldIdx的实现：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createKeyToOldIdx</span> (children, beginIdx, endIdx) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i, key</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = beginIdx; i &lt;= endIdx; ++i) &#123;</span><br><span class=\"line\">    key = children[i].<span class=\"property\">key</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(key)) map[key] = i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-根据5-1的映射表找到可复用vnode的索引\"><a href=\"#5-2-根据5-1的映射表找到可复用vnode的索引\" class=\"headerlink\" title=\"5-2.根据5-1的映射表找到可复用vnode的索引\"></a>5-2.根据5-1的映射表找到可复用vnode的索引</h3><p>列表渲染中不一定会定义<code>key</code>，如果没有定义那么<code>5-1</code>的映射表就没有用了。那么就需要遍历旧children节点寻找与新头匹配的元素（详见下面代码的<code>findIdxInOld</code>方法）！那么时间复杂度就上来了，不再是使用映射表时的<code>O(1)</code>，而是<code>O(n)</code>。由此也可以知道使用<code>key</code>的性能优化优越之所在！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5.2 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 定义key，直接在名射表找，时间复杂度: O(1)</span></span><br><span class=\"line\">      <span class=\"comment\">// 没有定义key，用新vnode与旧vnode数组比对，时间复杂度：O(n)</span></span><br><span class=\"line\">      <span class=\"comment\">// const isDef = (v) =&gt; v !== undefined &amp;&amp; v !== null</span></span><br><span class=\"line\">      idxInOld = <span class=\"title function_\">isDef</span>(newStartVnode.<span class=\"property\">key</span>)</span><br><span class=\"line\">        ? oldKeyToIdx[newStartVnode.<span class=\"property\">key</span>]</span><br><span class=\"line\">        <span class=\"comment\">// 返回oldCh中与newStartVnode相同（ sameVnode(newStartVnode, oldCh[itIdx]) ）节点(即isDef(oldCh[itIdx].key) 同样是false)的index</span></span><br><span class=\"line\">        : <span class=\"title function_\">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>findIdxInOld：时间复杂度<code>O(n)</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findIdxInOld</span> (node, oldCh, start, end) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> c = oldCh[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(c) &amp;&amp; <span class=\"title function_\">sameVnode</span>(node, c)) <span class=\"keyword\">return</span> i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-3-无可复用旧元素\"><a href=\"#5-3-无可复用旧元素\" class=\"headerlink\" title=\"5-3.无可复用旧元素\"></a>5-3.无可复用旧元素</h3><p>在旧children可能会找到也可能找不到可复用的元素，没有找到是什么情况？如图：</p>\n<img src=\"diff-vnode-children-05.png\" width=\"100%\" alt=\"vue中的diff算法实现：在头尾见找可复用元素\"/>\n\n<p>假如现在<code>newStartVnode</code>指向的是<code>key = 1.5</code>的vnode，那么很明显旧children中就没有可以复用的vnode，那么需要做的就是：a.创建一个与<code>newStartVnode</code>对应的newElm(新的真实html元素)；b.然后将newElm插入到旧children中<code>key=02</code>的vnode对应的真实元素的前面！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5.3 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中不存在新节点，无法复用旧元素</span></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">       * [ 1 ] [ 2 ] [2.5] [ 3 ] [ 4 ] [ 5 ]</span></span><br><span class=\"line\"><span class=\"comment\">       * [2.5]就是插入的，且就children中没有与之“相同”的vnode</span></span><br><span class=\"line\"><span class=\"comment\">       * 目前 newStartIdx = oldStartIdx = 2</span></span><br><span class=\"line\"><span class=\"comment\">       * 那么现在需要做的是：a.创建一个与[2.5]对应的真实元素；b.将元素插入到 [ 2 ] 后面 [ 3 ]前面</span></span><br><span class=\"line\"><span class=\"comment\">       * nodeOps.insertBefore(parentElm, newElm, oldStartVnode.elm)</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(idxInOld)) &#123; <span class=\"comment\">// New element</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建 newStartVnode 对应的elm，将elm插入到parentElm的子元素oldStartVnode.elm的前面（如果oldStartVnode.elm不存在即插入到parentElm的最后）</span></span><br><span class=\"line\">        <span class=\"title function_\">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class=\"property\">elm</span>, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-4-复用旧元素\"><a href=\"#5-4-复用旧元素\" class=\"headerlink\" title=\"5-4.复用旧元素\"></a>5-4.复用旧元素</h3><p>5-3和5-4是互斥的，进入5-4控制流就表示5-2中返回的<code>idxInOld</code>不为空，旧children中存在这匹配的vnode。虽然存在可用的vnode，但如果<code>key</code>并不可信呢？比如<code>v-for=&quot;(item, index) in items&quot;</code>中的索引被用作<code>key</code>！！！因此有了下面的5-4-1和5-4-2。</p>\n<h4 id=\"5-4-1-确实可复用\"><a href=\"#5-4-1-确实可复用\" class=\"headerlink\" title=\"5-4-1.确实可复用\"></a>5-4-1.确实可复用</h4><p>使用sameVnode方法二次确认vnodeToMove（在旧children中找到的vnode）时可用的！接下就是类似的操作。但比较明显的不同是：其他都是递增或递减新旧索引，但在5-4-1中则是递增newStartIdx，然后旧vnode置为null(<code>oldCh[idxInOld] = undefined</code>)，这是设计的巧妙之处，当前还没有感受到，再看下<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a>和<a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a>中的内容就会豁然开朗！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5-4 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中存在新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 5-4-1 */</span></span><br><span class=\"line\">        vnodeToMove = oldCh[idxInOld]</span><br><span class=\"line\">        <span class=\"comment\">// 保证节点的key和虚拟节点都相同（ oldKeyToIdx[newStartVnode.key] 获取的idxInOld，指向</span></span><br><span class=\"line\">        <span class=\"comment\">// 的虚拟节点可能与newStartVnode节点不一样(!sameVnode) ）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class=\"line\">          oldCh[idxInOld] = <span class=\"literal\">undefined</span></span><br><span class=\"line\">          canMove &amp;&amp; nodeOps.<span class=\"title function_\">insertBefore</span>(parentElm, vnodeToMove.<span class=\"property\">elm</span>, oldStartVnode.<span class=\"property\">elm</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-4-2-虚假的可复用\"><a href=\"#5-4-2-虚假的可复用\" class=\"headerlink\" title=\"5-4-2.虚假的可复用\"></a>5-4-2.虚假的可复用</h4><p>5-4-1与5-4-2是互斥的，既然没有元素可以复用到<code>newStartVnode</code>中，那么只能像5-3中那样创建与<code>newStartVnode</code>对应的html元素！！！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* 5-4 */</span></span><br><span class=\"line\">      <span class=\"comment\">// 在旧虚拟节点中存在新节点</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 5-4-2 */</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">// same key but different element. treat as new element</span></span><br><span class=\"line\">          <span class=\"comment\">// key相同但虚拟节点不同，newStartVnode当做新元素创建</span></span><br><span class=\"line\">          <span class=\"title function_\">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class=\"property\">elm</span>, <span class=\"literal\">false</span>, newCh, newStartIdx)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      newStartVnode = newCh[++newStartIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-跳过左边已经复用的vnode\"><a href=\"#1-跳过左边已经复用的vnode\" class=\"headerlink\" title=\"-1.跳过左边已经复用的vnode\"></a>-1.跳过左边已经复用的vnode</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>我们知道<code>oldStartVnode</code>这个指针是不断地右移，从下面的代码中的<code>isUndef(oldStartVnode)</code>知道，一旦碰到未定的vnode就会右移一个单位，继续循环比对后面的vnode。为什么会有未定义的vnode？正常来说应该存在，因为vnode都是与页面上的html元素一一对应的！在<a href=\"#5-4-1%E7%A1%AE%E5%AE%9E%E5%8F%AF%E5%A4%8D%E7%94%A8\">5-4-1.确实可复用</a>中，vue确实地将旧children中存在可复用elm的vnode手动置为了undefined：<code>oldCh[idxInOld] = undefined</code>！为什么置空不直接用<code>delete</code>操作符删除？！删了就换了idx顺序！！</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* -1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldStartVnode)) &#123;</span><br><span class=\"line\">      oldStartVnode = oldCh[++oldStartIdx] <span class=\"comment\">// Vnode has been moved left</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0-跳过右边已经复用的vnode\"><a href=\"#0-跳过右边已经复用的vnode\" class=\"headerlink\" title=\"0.跳过右边已经复用的vnode\"></a>0.跳过右边已经复用的vnode</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>参考<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateChildren</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* 0 */</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldEndVnode)) &#123;</span><br><span class=\"line\">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"while中的控制流顺序\"><a href=\"#while中的控制流顺序\" class=\"headerlink\" title=\"while中的控制流顺序\"></a>while中的控制流顺序</h2><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>上面为了突出重点去讲，没有按while中控制流的顺序书写，以下是while块总各控制流的顺序：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* -1：跳过左边已经复用的vnode */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 0：跳过右边已经复用的vnode */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 1：新头与旧头垂直对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 2：新尾与旧尾垂直对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 3：新尾与旧头交叉对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldStartVnode, newEndVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 4：新头与旧尾交叉对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">sameVnode</span>(oldEndVnode, newStartVnode)) &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">/* 5：当前新vnode与旧头尾之间的vnode对比 */</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* */</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"while之外\"><a href=\"#while之外\" class=\"headerlink\" title=\"while之外\"></a>while之外</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>留意while的循环条件：<code>oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx</code>，只要<code>oldStartIdx</code>大于<code>oldEndIdx</code>或<code>newStartIdx</code>大于<code>newEndIdx</code>就会结束循环！换言之，只要遍历完新旧children任意一个就会结束循环！</p>\n<p>a. 先遍历完旧children就说明<strong>新children新增了vnode</strong>，那么就要创建与这些vnodes对应的elm；<br>b. 先遍历完新children就说明<strong>新children删除了一些vnode</strong>，那么就要删除多出的vnodes。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会用调用node.insertBefore插入新元素，现在就是找引用元素，在refElm前面插入新元素</span></span><br><span class=\"line\">  refElm = <span class=\"title function_\">isUndef</span>(newCh[newEndIdx + <span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的children没有新增元素（newStartIdx &gt; newEndIdx） </span></span><br><span class=\"line\"><span class=\"comment\">     * 或 后面新增了vnode（newStartIdx &lt;= newEndIdx）</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    ? <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * newStartIdx &lt;= newEndIdx</span></span><br><span class=\"line\"><span class=\"comment\">     * 新的children新增了元素，但不是在后面！</span></span><br><span class=\"line\"><span class=\"comment\">     * 可能是中间！</span></span><br><span class=\"line\"><span class=\"comment\">     * 也可能是在前面</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    : newCh[newEndIdx + <span class=\"number\">1</span>].<span class=\"property\">elm</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环调用 createElm</span></span><br><span class=\"line\">  <span class=\"title function_\">addVnodes</span>(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">removeVnodes</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因为在循环遍历children的时候，startIdx（newStartIdx或oldStartIdx）和endIdx分别会向左和右移动。下面是四个索引移动的情况：</p>\n<ul>\n<li><p>newStartIdx右移：<a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>、<a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a>；</p>\n</li>\n<li><p>newEndIdx左移：<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>；</p>\n</li>\n<li><p>oldStartIdx右移：<a href=\"#-1%E8%B7%B3%E8%BF%87%E5%B7%A6%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">-1.跳过左边已经复用的vnode</a>、<a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>；</p>\n</li>\n<li><p>ildEndIdx左移：<a href=\"#0%E8%B7%B3%E8%BF%87%E5%8F%B3%E8%BE%B9%E5%B7%B2%E7%BB%8F%E5%A4%8D%E7%94%A8%E7%9A%84vnode\">0.跳过右边已经复用的vnode</a>、<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>；</p>\n</li>\n</ul>\n<h2 id=\"新children新增了vnode\"><a href=\"#新children新增了vnode\" class=\"headerlink\" title=\"新children新增了vnode\"></a>新children新增了vnode</h2><p>根据newStartIdx和newEndIdx的移动情况</p>\n<p>1.newStartIdx一直右移，由于新增的vnode都在后面，可以复用的vnode都在前面了，newEndIdx会保持不变，直到遍历完旧children：<br><img src=\"add-in-after.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/><br>&amp;nbsp;</p>\n<p>2.newStartIdx右移，newEndIdx左移，直到遍历完旧children：</p>\n<img src=\"add-in-middle.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>3.新增的vnode都在前面了，由于是新的节点所以存在“newStartIdx右移”的情况，newStartIdx就保持不变了，而可复用的vnode在右边，随着一次次循环，newEndIdx则会左移：</p>\n<img src=\"add-in-before.png\" width=\"100%\" alt=\"vue中的diff算法实现\"/>\n\n<p>新children删除了vnode的情况就不赘述，情况可以从上面的解析类推！</p>\n<h1 id=\"新旧vnode与真实元素elm的关系\"><a href=\"#新旧vnode与真实元素elm的关系\" class=\"headerlink\" title=\"新旧vnode与真实元素elm的关系\"></a>新旧vnode与真实元素elm的关系</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<p>vnode是和elm一一对应的，vnode的顺序和elm保持这一致，vnode上的属性也是与对应的elm的属性对应。所以，在patch（给oldVnode打补丁）前，可以认为oldVnode树与页面上elm树是对应的！</p>\n<p>1.oldVnode.children中vnode的顺序和oldVnode.elm.children(oldVnode对应的elm的子元素列表)的顺序是保持一致的、elm上的属性也是保持一致；</p>\n<p>2.diff算法通过对比oldVnode.children与newVnode.children的vnode，找到可以复用的elm，并改变elm的位置，使之与newVnode.children的顺序保持一致！</p>\n<h1 id=\"diff的特点\"><a href=\"#diff的特点\" class=\"headerlink\" title=\"diff的特点\"></a>diff的特点</h1><ul>\n<li><strong>先垂直，再交叉，最后中间找</strong>，diff在旧vnode.children找可复用vnode，所用比对方式的优先级！</li>\n</ul>\n<p>&amp;nbsp;</p>\n<ul>\n<li><strong>只与同级vnode中寻找复用的elm</strong>，由上面的分析可以知道，只会在同级的children中寻找可以复用的vnode。但现实是可以复用的元素可以存在于dom树任意的地方，明显这样是可能回错过实际存在的复用元素，而重新创建元素！这里就是vue或diff的权衡的地方，是不计代价全局去找最优解，还是如当前这般在同级节点中寻找！？</li>\n</ul>\n<p>&amp;nbsp;</p>\n<ul>\n<li><strong>定义key属性可以大幅度减少操作数</strong>，在<a href=\"#5%E5%BD%93%E5%89%8D%E6%96%B0vnode%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%B0%BE%E4%B9%8B%E9%97%B4%E7%9A%84vnode%E5%AF%B9%E6%AF%94\">5.当前新vnode与旧头尾之间的vnode对比</a>中，在定义了key的情况下，会创建一个映射表<code>oldKeyToIdx</code>，通过映射表可以快速找到可复用vnode，而没有定义的话，就需要遍历oldVnode.children，逐一使用<code>sameVnode</code>比对！</li>\n</ul>\n<h1 id=\"实用主义\"><a href=\"#实用主义\" class=\"headerlink\" title=\"实用主义\"></a>实用主义</h1><p><a href=\"#1%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%A4%B4%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">1.新头与旧头垂直对比</a>、<a href=\"#2%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%B0%BE%E5%9E%82%E7%9B%B4%E5%AF%B9%E6%AF%94\">2.新尾与旧尾垂直对比</a>、<a href=\"#3%E6%96%B0%E5%B0%BE%E4%B8%8E%E6%97%A7%E5%A4%B4%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">3.新尾与旧头交叉对比</a>、<a href=\"#4%E6%96%B0%E5%A4%B4%E4%B8%8E%E6%97%A7%E5%B0%BE%E4%BA%A4%E5%8F%89%E5%AF%B9%E6%AF%94\">4.新头与旧尾交叉对比</a>，以上四种不论是否定义元素属性key</p>\n<ol>\n<li>定义了，可以快速判断出不相同（但不完全可靠）</li>\n</ol>\n<p>使用遍历索引作为key，</p>\n<blockquote>\n<p>它也可以用于强制替换元素&#x2F;组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p>\n<p>完整地触发组件的生命周期钩子<br>触发过渡</p>\n</blockquote>\n<blockquote>\n<p>diff算法默认使用“就地复用”的策略，是一个首尾交叉对比的过程。<br>用index作为key和不加key是一样的，都采用“就地复用”的策略<br>“就地复用”的策略，只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。<br>将与元素唯一对应的值作为key，可以最大化利用dom节点，提升性能</p>\n</blockquote>\n<h1 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h1><p><a href=\"#%E5%A4%A7%E7%BA%B2\">回到顶部</a></p>\n<h2 id=\"sameVnode的功能与实现逻辑\"><a href=\"#sameVnode的功能与实现逻辑\" class=\"headerlink\" title=\"sameVnode的功能与实现逻辑\"></a>sameVnode的功能与实现逻辑</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sameVnode</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    a.<span class=\"property\">key</span> === b.<span class=\"property\">key</span> &amp;&amp; (</span><br><span class=\"line\">      (</span><br><span class=\"line\">        <span class=\"comment\">// 标签相同</span></span><br><span class=\"line\">        a.<span class=\"property\">tag</span> === b.<span class=\"property\">tag</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 都是注释元素, 或都不是</span></span><br><span class=\"line\">        a.<span class=\"property\">isComment</span> === b.<span class=\"property\">isComment</span> &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// idDef = (v) =&gt; v !== undefined &amp;&amp; v !== null</span></span><br><span class=\"line\">        <span class=\"comment\">// 都定义了，或都没有定义</span></span><br><span class=\"line\">        <span class=\"title function_\">isDef</span>(a.<span class=\"property\">data</span>) === <span class=\"title function_\">isDef</span>(b.<span class=\"property\">data</span>) &amp;&amp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a = &#123; data: &#123; atttrs: &#123; type: &#x27;xxx&#x27; &#125; &#125; &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 两节点的type相同，</span></span><br><span class=\"line\">        <span class=\"comment\">//   i. type存在, 且相同；</span></span><br><span class=\"line\">        <span class=\"comment\">//   ii. 两个type都没有定义，都是undefined；a、b都算是通过</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. a、b节点type都是&#x27;text,number,password,search,email,tel,url&#x27;中之一</span></span><br><span class=\"line\">        <span class=\"comment\">// 换言之 a.type = text, b.type = password，也可以说两个input节点相同</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. a不是input标签</span></span><br><span class=\"line\">        <span class=\"title function_\">sameInputType</span>(a, b)</span><br><span class=\"line\">      ) || (</span><br><span class=\"line\">        <span class=\"title function_\">isTrue</span>(a.<span class=\"property\">isAsyncPlaceholder</span>) &amp;&amp;</span><br><span class=\"line\">        a.<span class=\"property\">asyncFactory</span> === b.<span class=\"property\">asyncFactory</span> &amp;&amp;</span><br><span class=\"line\">        <span class=\"title function_\">isUndef</span>(b.<span class=\"property\">asyncFactory</span>.<span class=\"property\">error</span>)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * makeMap是个工厂函数，生成 isTextInputType = (key) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   const map = &#123; text: true, ..., url: true &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> *   return map[key];</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 类似于 (val) =&gt; [text,number,password,search,email,tel,url].include(val);</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isTextInputType = <span class=\"title function_\">makeMap</span>(<span class=\"string\">&#x27;text,number,password,search,email,tel,url&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sameInputType</span> (a, b) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a.<span class=\"property\">tag</span> !== <span class=\"string\">&#x27;input&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> i</span><br><span class=\"line\">  <span class=\"keyword\">const</span> typeA = <span class=\"title function_\">isDef</span>(i = a.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">attrs</span>) &amp;&amp; i.<span class=\"property\">type</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> typeB = <span class=\"title function_\">isDef</span>(i = b.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">attrs</span>) &amp;&amp; i.<span class=\"property\">type</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> typeA === typeB || <span class=\"title function_\">isTextInputType</span>(typeA) &amp;&amp; <span class=\"title function_\">isTextInputType</span>(typeB)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"patchVnode函数的关键实现\"><a href=\"#patchVnode函数的关键实现\" class=\"headerlink\" title=\"patchVnode函数的关键实现\"></a>patchVnode函数的关键实现</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">patchVnode</span> (<span class=\"comment\">/* */</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a. 复用elm，将oldVnode.elm赋值到newVnode.elm；</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> elm = vnode.<span class=\"property\">elm</span> = oldVnode.<span class=\"property\">elm</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldCh = oldVnode.<span class=\"property\">children</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ch = vnode.<span class=\"property\">children</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// b. 更新elm上的属性变动；</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(data) &amp;&amp; <span class=\"title function_\">isPatchable</span>(vnode)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; cbs.<span class=\"property\">update</span>.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">      cbs.<span class=\"property\">update</span>[i](oldVnode, vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i = data.<span class=\"property\">hook</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">update</span>)) <span class=\"title function_\">i</span>(oldVnode, vnode)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 没有文本，即是还有子节点等情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(vnode.<span class=\"property\">text</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新旧vnode都有children</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldCh) &amp;&amp; <span class=\"title function_\">isDef</span>(ch)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// c. 更新newVnode.children，增删或复用，这里的复用就是通过调用`updateChildren`来实现，没错递归了！</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (oldCh !== ch) <span class=\"title function_\">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他的更新children的操作：增、删等</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nodeOps-insertBefore实现\"><a href=\"#nodeOps-insertBefore实现\" class=\"headerlink\" title=\"nodeOps.insertBefore实现\"></a>nodeOps.insertBefore实现</h2><p>path: src&#x2F;platforms&#x2F;web&#x2F;runtime&#x2F;node-ops.js</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">insertBefore</span> (<span class=\"attr\">parentNode</span>: <span class=\"title class_\">Node</span>, <span class=\"attr\">newNode</span>: <span class=\"title class_\">Node</span>, <span class=\"attr\">referenceNode</span>: <span class=\"title class_\">Node</span>) &#123;</span><br><span class=\"line\">  parentNode.<span class=\"title function_\">insertBefore</span>(newNode, referenceNode)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Node.insertBefore() 方法在参考节点之前插入一个拥有指定父节点的子节点。如果给定的子节点是对文档中现有节点的引用，insertBefore() 会将其从当前位置移动到新位置（在将节点附加到其他节点之前，不需要从其父节点删除该节点）。</p>\n</blockquote>\n<h2 id=\"vnode（虚拟节点）的成员属性\"><a href=\"#vnode（虚拟节点）的成员属性\" class=\"headerlink\" title=\"vnode（虚拟节点）的成员属性\"></a>vnode（虚拟节点）的成员属性</h2><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标签</span></span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// elm（Element）的属性</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: <span class=\"title class_\">VNodeData</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 子虚拟节点</span></span><br><span class=\"line\">  <span class=\"attr\">children</span>: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;;</span><br><span class=\"line\">  <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 真实dom元素</span></span><br><span class=\"line\">  <span class=\"attr\">elm</span>: <span class=\"title class_\">Node</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 元素命名空间</span></span><br><span class=\"line\">  <span class=\"attr\">ns</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">context</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// rendered in this component&#x27;s scope</span></span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentOptions</span>: <span class=\"title class_\">VNodeComponentOptions</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">componentInstance</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component instance</span></span><br><span class=\"line\">  <span class=\"attr\">parent</span>: <span class=\"title class_\">VNode</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// component placeholder node</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// strictly internal</span></span><br><span class=\"line\">  <span class=\"attr\">raw</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// contains raw HTML? (server only)</span></span><br><span class=\"line\">  <span class=\"attr\">isStatic</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// hoisted static node</span></span><br><span class=\"line\">  <span class=\"attr\">isRootInsert</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// necessary for enter transition check</span></span><br><span class=\"line\">  <span class=\"attr\">isComment</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// empty comment placeholder?</span></span><br><span class=\"line\">  <span class=\"attr\">isCloned</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a cloned node?</span></span><br><span class=\"line\">  <span class=\"attr\">isOnce</span>: <span class=\"built_in\">boolean</span>; <span class=\"comment\">// is a v-once node?</span></span><br><span class=\"line\">  <span class=\"attr\">asyncFactory</span>: <span class=\"title class_\">Function</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// async component factory function</span></span><br><span class=\"line\">  <span class=\"attr\">asyncMeta</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">isAsyncPlaceholder</span>: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">ssrContext</span>: <span class=\"title class_\">Object</span> | <span class=\"built_in\">void</span>;</span><br><span class=\"line\">  <span class=\"attr\">fnContext</span>: <span class=\"title class_\">Component</span> | <span class=\"built_in\">void</span>; <span class=\"comment\">// real context vm for functional nodes</span></span><br><span class=\"line\">  <span class=\"attr\">fnOptions</span>: ?<span class=\"title class_\">ComponentOptions</span>; <span class=\"comment\">// for SSR caching</span></span><br><span class=\"line\">  <span class=\"attr\">devtoolsMeta</span>: ?<span class=\"title class_\">Object</span>; <span class=\"comment\">// used to store functional render context for devtools</span></span><br><span class=\"line\">  <span class=\"attr\">fnScopeId</span>: ?<span class=\"built_in\">string</span>; <span class=\"comment\">// functional scope id support</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题19. 正则表达式匹配","date":"2020-04-16T23:26:51.000Z","_content":"\n\n请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串\"aaa\"与模式\"a.a\"和\"ab*ac*a\"匹配，但与\"aa.a\"和\"ab*a\"均不匹配。\n\n<!-- more -->\n\n示例 1:\n\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n示例 2:\n\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n示例 3:\n\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n示例 4:\n\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。\n示例 5:\n\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof\n\n## 1.暴力递归进行穷举\n\n```js\n/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nfunction isMatchIt(s, p) {\n  if (p === '') return s === '';\n  const subMatch = s && [s[0], '.'].includes(p[0]);\n  // *是需要和前面一个字符结合使用，即至少p的长度是2\n  if (p.length > 1 && p[1] === '*') {\n    // 1. 匹配0次: isMatch(s, p.slice(2))，可以忽略s[0] !== p[0]，既然匹配0次，即可以跳过“p[0]*”的匹配\n    // 2. 匹配多次，匹配多次的前提是[p[0], '.'].includes(s[0])\n    // 2.1 通过后移s，而不动p，然后下一个s可以持续匹配\"p[0]*\"\n    return isMatch(s, p.slice(2)) || subMatch && isMatch(s.slice(1), p);\n  }\n  return subMatch && isMatch(s.slice(1), p.slice(1));\n}\n```\n\n## 2.备忘录优化暴力法\n\n```js\nfunction isMatchByMemo(s, p) {\n  const sLen = s.length;\n  const pLen = p.length;\n  const meno = {};\n  function dp(i, j) {\n    // [i, sLen)\n    // [j, pLen)\n    const key = [i, j].join();\n    const sRestLen = sLen - i;\n    const pRestLen = pLen - j;\n    if (typeof meno[key] !== 'undefined') return meno[key];\n    if (pRestLen < 1) return sRestLen < 1;\n    let isMatch = sRestLen > 0 && (s[i] === p[j] || p[j] === '.');\n    if (pRestLen > 1 && p[j + 1] === '*') {\n      // j: p[j], j + 1: *\n      isMatch = dp(i, j + 2) || isMatch && dp(i + 1, j);\n    } else {\n      isMatch = isMatch && dp(i + 1, j + 1);\n    }\n    meno[key] = isMatch;\n    return isMatch;\n  }\n  return dp(0, 0);\n}\n```\n","source":"_posts/面试题19-正则表达式匹配.md","raw":"---\ntitle: 面试题19. 正则表达式匹配\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n请实现一个函数用来匹配包含'. '和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串\"aaa\"与模式\"a.a\"和\"ab*ac*a\"匹配，但与\"aa.a\"和\"ab*a\"均不匹配。\n\n<!-- more -->\n\n示例 1:\n\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n示例 2:\n\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \"aa\" 可被视为 'a' 重复了一次。\n示例 3:\n\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个（'*'）任意字符（'.'）。\n示例 4:\n\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \"aab\"。\n示例 5:\n\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\ns 可能为空，且只包含从 a-z 的小写字母。\np 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof\n\n## 1.暴力递归进行穷举\n\n```js\n/**\n * @param {string} s\n * @param {string} p\n * @return {boolean}\n */\nfunction isMatchIt(s, p) {\n  if (p === '') return s === '';\n  const subMatch = s && [s[0], '.'].includes(p[0]);\n  // *是需要和前面一个字符结合使用，即至少p的长度是2\n  if (p.length > 1 && p[1] === '*') {\n    // 1. 匹配0次: isMatch(s, p.slice(2))，可以忽略s[0] !== p[0]，既然匹配0次，即可以跳过“p[0]*”的匹配\n    // 2. 匹配多次，匹配多次的前提是[p[0], '.'].includes(s[0])\n    // 2.1 通过后移s，而不动p，然后下一个s可以持续匹配\"p[0]*\"\n    return isMatch(s, p.slice(2)) || subMatch && isMatch(s.slice(1), p);\n  }\n  return subMatch && isMatch(s.slice(1), p.slice(1));\n}\n```\n\n## 2.备忘录优化暴力法\n\n```js\nfunction isMatchByMemo(s, p) {\n  const sLen = s.length;\n  const pLen = p.length;\n  const meno = {};\n  function dp(i, j) {\n    // [i, sLen)\n    // [j, pLen)\n    const key = [i, j].join();\n    const sRestLen = sLen - i;\n    const pRestLen = pLen - j;\n    if (typeof meno[key] !== 'undefined') return meno[key];\n    if (pRestLen < 1) return sRestLen < 1;\n    let isMatch = sRestLen > 0 && (s[i] === p[j] || p[j] === '.');\n    if (pRestLen > 1 && p[j + 1] === '*') {\n      // j: p[j], j + 1: *\n      isMatch = dp(i, j + 2) || isMatch && dp(i + 1, j);\n    } else {\n      isMatch = isMatch && dp(i + 1, j + 1);\n    }\n    meno[key] = isMatch;\n    return isMatch;\n  }\n  return dp(0, 0);\n}\n```\n","slug":"面试题19-正则表达式匹配","published":1,"updated":"2023-02-18T00:21:38.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccq000p5onr0fy718di","content":"<p>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p>\n<p>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a*”<br>输出: true<br>解释: 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。<br>示例 3:</p>\n<p>输入:<br>s &#x3D; “ab”<br>p &#x3D; “.<em>“<br>输出: true<br>解释: “.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。<br>示例 4:</p>\n<p>输入:<br>s &#x3D; “aab”<br>p &#x3D; “c<em>a</em>b”<br>输出: true<br>解释: 因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。<br>示例 5:</p>\n<p>输入:<br>s &#x3D; “mississippi”<br>p &#x3D; “mis<em>is</em>p*.”<br>输出: false<br>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof\">https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof</a></p>\n<h2 id=\"1-暴力递归进行穷举\"><a href=\"#1-暴力递归进行穷举\" class=\"headerlink\" title=\"1.暴力递归进行穷举\"></a>1.暴力递归进行穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isMatchIt</span>(<span class=\"params\">s, p</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p === <span class=\"string\">&#x27;&#x27;</span>) <span class=\"keyword\">return</span> s === <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subMatch = s &amp;&amp; [s[<span class=\"number\">0</span>], <span class=\"string\">&#x27;.&#x27;</span>].<span class=\"title function_\">includes</span>(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// *是需要和前面一个字符结合使用，即至少p的长度是2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; p[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 匹配0次: isMatch(s, p.slice(2))，可以忽略s[0] !== p[0]，既然匹配0次，即可以跳过“p[0]*”的匹配</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 匹配多次，匹配多次的前提是[p[0], &#x27;.&#x27;].includes(s[0])</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1 通过后移s，而不动p，然后下一个s可以持续匹配&quot;p[0]*&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMatch</span>(s, p.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)) || subMatch &amp;&amp; <span class=\"title function_\">isMatch</span>(s.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>), p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subMatch &amp;&amp; <span class=\"title function_\">isMatch</span>(s.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>), p.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-备忘录优化暴力法\"><a href=\"#2-备忘录优化暴力法\" class=\"headerlink\" title=\"2.备忘录优化暴力法\"></a>2.备忘录优化暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isMatchByMemo</span>(<span class=\"params\">s, p</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sLen = s.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pLen = p.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> meno = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [i, sLen)</span></span><br><span class=\"line\">    <span class=\"comment\">// [j, pLen)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = [i, j].<span class=\"title function_\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sRestLen = sLen - i;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pRestLen = pLen - j;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> meno[key] !== <span class=\"string\">&#x27;undefined&#x27;</span>) <span class=\"keyword\">return</span> meno[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRestLen &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> sRestLen &lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMatch = sRestLen &gt; <span class=\"number\">0</span> &amp;&amp; (s[i] === p[j] || p[j] === <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRestLen &gt; <span class=\"number\">1</span> &amp;&amp; p[j + <span class=\"number\">1</span>] === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// j: p[j], j + 1: *</span></span><br><span class=\"line\">      isMatch = <span class=\"title function_\">dp</span>(i, j + <span class=\"number\">2</span>) || isMatch &amp;&amp; <span class=\"title function_\">dp</span>(i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      isMatch = isMatch &amp;&amp; <span class=\"title function_\">dp</span>(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    meno[key] = isMatch;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMatch;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">dp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>请实现一个函数用来匹配包含’. ‘和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和”ab*a”均不匹配。</p>","more":"<p>示例 1:</p>\n<p>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a”<br>输出: false<br>解释: “a” 无法匹配 “aa” 整个字符串。<br>示例 2:</p>\n<p>输入:<br>s &#x3D; “aa”<br>p &#x3D; “a*”<br>输出: true<br>解释: 因为 ‘*’ 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 ‘a’。因此，字符串 “aa” 可被视为 ‘a’ 重复了一次。<br>示例 3:</p>\n<p>输入:<br>s &#x3D; “ab”<br>p &#x3D; “.<em>“<br>输出: true<br>解释: “.</em>“ 表示可匹配零个或多个（’*’）任意字符（’.’）。<br>示例 4:</p>\n<p>输入:<br>s &#x3D; “aab”<br>p &#x3D; “c<em>a</em>b”<br>输出: true<br>解释: 因为 ‘*’ 表示零个或多个，这里 ‘c’ 为 0 个, ‘a’ 被重复一次。因此可以匹配字符串 “aab”。<br>示例 5:</p>\n<p>输入:<br>s &#x3D; “mississippi”<br>p &#x3D; “mis<em>is</em>p*.”<br>输出: false<br>s 可能为空，且只包含从 a-z 的小写字母。<br>p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof\">https://leetcode-cn.com/problems/zheng-ze-biao-da-shi-pi-pei-lcof</a></p>\n<h2 id=\"1-暴力递归进行穷举\"><a href=\"#1-暴力递归进行穷举\" class=\"headerlink\" title=\"1.暴力递归进行穷举\"></a>1.暴力递归进行穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">p</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isMatchIt</span>(<span class=\"params\">s, p</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p === <span class=\"string\">&#x27;&#x27;</span>) <span class=\"keyword\">return</span> s === <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> subMatch = s &amp;&amp; [s[<span class=\"number\">0</span>], <span class=\"string\">&#x27;.&#x27;</span>].<span class=\"title function_\">includes</span>(p[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"comment\">// *是需要和前面一个字符结合使用，即至少p的长度是2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span> &amp;&amp; p[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 匹配0次: isMatch(s, p.slice(2))，可以忽略s[0] !== p[0]，既然匹配0次，即可以跳过“p[0]*”的匹配</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. 匹配多次，匹配多次的前提是[p[0], &#x27;.&#x27;].includes(s[0])</span></span><br><span class=\"line\">    <span class=\"comment\">// 2.1 通过后移s，而不动p，然后下一个s可以持续匹配&quot;p[0]*&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isMatch</span>(s, p.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)) || subMatch &amp;&amp; <span class=\"title function_\">isMatch</span>(s.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>), p);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subMatch &amp;&amp; <span class=\"title function_\">isMatch</span>(s.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>), p.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-备忘录优化暴力法\"><a href=\"#2-备忘录优化暴力法\" class=\"headerlink\" title=\"2.备忘录优化暴力法\"></a>2.备忘录优化暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isMatchByMemo</span>(<span class=\"params\">s, p</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sLen = s.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pLen = p.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> meno = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dp</span>(<span class=\"params\">i, j</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [i, sLen)</span></span><br><span class=\"line\">    <span class=\"comment\">// [j, pLen)</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = [i, j].<span class=\"title function_\">join</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> sRestLen = sLen - i;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pRestLen = pLen - j;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> meno[key] !== <span class=\"string\">&#x27;undefined&#x27;</span>) <span class=\"keyword\">return</span> meno[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRestLen &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> sRestLen &lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isMatch = sRestLen &gt; <span class=\"number\">0</span> &amp;&amp; (s[i] === p[j] || p[j] === <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pRestLen &gt; <span class=\"number\">1</span> &amp;&amp; p[j + <span class=\"number\">1</span>] === <span class=\"string\">&#x27;*&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// j: p[j], j + 1: *</span></span><br><span class=\"line\">      isMatch = <span class=\"title function_\">dp</span>(i, j + <span class=\"number\">2</span>) || isMatch &amp;&amp; <span class=\"title function_\">dp</span>(i + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      isMatch = isMatch &amp;&amp; <span class=\"title function_\">dp</span>(i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    meno[key] = isMatch;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isMatch;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">dp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"多角度剖析计算属性的运行机制","date":"2023-02-18T01:05:21.000Z","_content":"","source":"_posts/多角度剖析计算属性的运行机制.md","raw":"---\ntitle: 多角度剖析计算属性的运行机制\ndate: 2023-02-18 09:05:21\ntags:\n---\n","slug":"多角度剖析计算属性的运行机制","published":1,"updated":"2023-02-18T01:05:21.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccr000u5onrb6zx31m7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"面试题26. 树的子结构","date":"2020-04-15T23:33:59.000Z","_content":"\n输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\n\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n\n<!-- more -->\n\n例如:\n给定的树 A:\n```\n\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n```\n给定的树 B：\n```\n   4 \n  /\n 1\n```\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n\n示例 1：\n\n输入：A = [1,2,3], B = [3,1]\n输出：false\n示例 2：\n\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n限制：\n\n0 <= 节点个数 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof\n\n## 1.先序遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 解题思路：\n * 1.先序遍历找到与B根节点匹配的A子节点或A的根节点subA，找到后暂停\n * 2.比较从B和subA的根节点开始比较，B是不是subA的子树\n * 3.如果2判断不是，则重复1、2直到遍历完A\n * @param {TreeNode} A\n * @param {TreeNode} B\n * @return {boolean}\n */\nvar isSubStructure = function(A, B) {\n  if (!B) return false;\n\n  let isSub = false;\n  preOrder(A);\n\n  function preOrder(node) {\n    if (!node) return '';\n    if (node.val === B.val) {\n      if (isSubOf(node, B)) {\n        isSub = true;\n        return;\n      }\n    }\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n\n  function isSubOf(sup, sub) {\n    if (!sub) return true;\n    if (!sup || sup.val !== sub.val) {\n      return false;\n    }\n    return isSubOf(sup.left, sub.left) && isSubOf(sup.right, sub.right);\n  }\n\n  return isSub;\n};\n```\n","source":"_posts/面试题26-树的子结构.md","raw":"---\ntitle: 面试题26. 树的子结构\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\n\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n\n<!-- more -->\n\n例如:\n给定的树 A:\n```\n\n     3\n    / \\\n   4   5\n  / \\\n 1   2\n```\n给定的树 B：\n```\n   4 \n  /\n 1\n```\n返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n\n示例 1：\n\n输入：A = [1,2,3], B = [3,1]\n输出：false\n示例 2：\n\n输入：A = [3,4,5,1,2], B = [4,1]\n输出：true\n限制：\n\n0 <= 节点个数 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof\n\n## 1.先序遍历\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 解题思路：\n * 1.先序遍历找到与B根节点匹配的A子节点或A的根节点subA，找到后暂停\n * 2.比较从B和subA的根节点开始比较，B是不是subA的子树\n * 3.如果2判断不是，则重复1、2直到遍历完A\n * @param {TreeNode} A\n * @param {TreeNode} B\n * @return {boolean}\n */\nvar isSubStructure = function(A, B) {\n  if (!B) return false;\n\n  let isSub = false;\n  preOrder(A);\n\n  function preOrder(node) {\n    if (!node) return '';\n    if (node.val === B.val) {\n      if (isSubOf(node, B)) {\n        isSub = true;\n        return;\n      }\n    }\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n\n  function isSubOf(sup, sub) {\n    if (!sub) return true;\n    if (!sup || sup.val !== sub.val) {\n      return false;\n    }\n    return isSubOf(sup.left, sub.left) && isSubOf(sup.right, sub.right);\n  }\n\n  return isSub;\n};\n```\n","slug":"面试题26-树的子结构","published":1,"updated":"2023-02-18T00:14:33.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcct000w5onraafzdrva","content":"<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>\n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>\n<span id=\"more\"></span>\n\n<p>例如:<br>给定的树 A:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     3</span><br><span class=\"line\">    / \\</span><br><span class=\"line\">   4   5</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 1   2</span><br></pre></td></tr></table></figure>\n<p>给定的树 B：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   4 </span><br><span class=\"line\">  /</span><br><span class=\"line\"> 1</span><br></pre></td></tr></table></figure>\n<p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>\n<p>示例 1：</p>\n<p>输入：A &#x3D; [1,2,3], B &#x3D; [3,1]<br>输出：false<br>示例 2：</p>\n<p>输入：A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]<br>输出：true<br>限制：</p>\n<p>0 &lt;&#x3D; 节点个数 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof\">https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof</a></p>\n<h2 id=\"1-先序遍历\"><a href=\"#1-先序遍历\" class=\"headerlink\" title=\"1.先序遍历\"></a>1.先序遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.先序遍历找到与B根节点匹配的A子节点或A的根节点subA，找到后暂停</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.比较从B和subA的根节点开始比较，B是不是subA的子树</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果2判断不是，则重复1、2直到遍历完A</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">A</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">B</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSubStructure = <span class=\"keyword\">function</span>(<span class=\"params\">A, B</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isSub = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"title function_\">preOrder</span>(A);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">preOrder</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">val</span> === B.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isSubOf</span>(node, B)) &#123;</span><br><span class=\"line\">        isSub = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">isSubOf</span>(<span class=\"params\">sup, sub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sub) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sup || sup.<span class=\"property\">val</span> !== sub.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isSubOf</span>(sup.<span class=\"property\">left</span>, sub.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">isSubOf</span>(sup.<span class=\"property\">right</span>, sub.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isSub;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)</p>\n<p>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p>","more":"<p>例如:<br>给定的树 A:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">     3</span><br><span class=\"line\">    / \\</span><br><span class=\"line\">   4   5</span><br><span class=\"line\">  / \\</span><br><span class=\"line\"> 1   2</span><br></pre></td></tr></table></figure>\n<p>给定的树 B：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   4 </span><br><span class=\"line\">  /</span><br><span class=\"line\"> 1</span><br></pre></td></tr></table></figure>\n<p>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。</p>\n<p>示例 1：</p>\n<p>输入：A &#x3D; [1,2,3], B &#x3D; [3,1]<br>输出：false<br>示例 2：</p>\n<p>输入：A &#x3D; [3,4,5,1,2], B &#x3D; [4,1]<br>输出：true<br>限制：</p>\n<p>0 &lt;&#x3D; 节点个数 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof\">https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof</a></p>\n<h2 id=\"1-先序遍历\"><a href=\"#1-先序遍历\" class=\"headerlink\" title=\"1.先序遍历\"></a>1.先序遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 解题思路：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.先序遍历找到与B根节点匹配的A子节点或A的根节点subA，找到后暂停</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.比较从B和subA的根节点开始比较，B是不是subA的子树</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果2判断不是，则重复1、2直到遍历完A</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">A</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">B</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isSubStructure = <span class=\"keyword\">function</span>(<span class=\"params\">A, B</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!B) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> isSub = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"title function_\">preOrder</span>(A);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">preOrder</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.<span class=\"property\">val</span> === B.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isSubOf</span>(node, B)) &#123;</span><br><span class=\"line\">        isSub = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">isSubOf</span>(<span class=\"params\">sup, sub</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sub) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!sup || sup.<span class=\"property\">val</span> !== sub.<span class=\"property\">val</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">isSubOf</span>(sup.<span class=\"property\">left</span>, sub.<span class=\"property\">left</span>) &amp;&amp; <span class=\"title function_\">isSubOf</span>(sup.<span class=\"property\">right</span>, sub.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> isSub;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题29. 顺时针打印矩阵","date":"2020-04-16T23:26:51.000Z","_content":"\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n<!-- more -->\n\n示例 1：\n\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n示例 2：\n\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n \n\n限制：\n\n0 <= matrix.length <= 100\n0 <= matrix[i].length <= 100\n注意：本题与主站 54 题相同：https://leetcode-cn.com/problems/spiral-matrix/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof\n\n\n## 1.缩小边界直到越界\n\n```js\n/**\n * [\n *  [1, 2, 3, 4],\n *  [5, 6, 7, 8],\n *  [9,10,11,12]\n * ]\n * [\n *  [(0,0), (0,1), (0,2), (0,3)],\n *  [(1,0), (1,1), (1,2), (1,3)],\n *  [(2,0), (2,1), (2,2), (2,3)],\n * ]\n * 0.定义边界top, right, bottom, left. [top, bottom], [left, right]\n * 1.顺时针打印边界元素，每打印完一条边，将这条边的位置向中心步进1\n * 2.直到越界\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n  if (!matrix.length) return []; \n\n  let top = 0;\n  let right = matrix[0].length - 1;\n  let bottom = matrix.length - 1;\n  let left = 0;\n  const res = [];\n\n  while (true) {\n    // 遍历上边界\n    for (let i = left; i <= right; i++) {\n      res.push(matrix[top][i])\n    }\n    if (++top > bottom) break;\n\n    // 遍历右边界\n    for (let i = top; i <= bottom; i++) {\n      res.push(matrix[i][right]);\n    }\n    if (left > --right) break;\n\n    // 遍历下边界\n    for (let i = right; i >= left; i--) {\n      res.push(matrix[bottom][i]);\n    }\n    if (top > --bottom) break;\n\n    // 遍历左边界\n    for (let i = bottom; i >= top; i--) {\n      res.push(matrix[i][left]);\n    }\n    if (++left > right) break;\n  }\n  return res;\n};\n```\n","source":"_posts/面试题29-顺时针打印矩阵.md","raw":"---\ntitle: 面试题29. 顺时针打印矩阵\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n\n<!-- more -->\n\n示例 1：\n\n输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n输出：[1,2,3,6,9,8,7,4,5]\n示例 2：\n\n输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n \n\n限制：\n\n0 <= matrix.length <= 100\n0 <= matrix[i].length <= 100\n注意：本题与主站 54 题相同：https://leetcode-cn.com/problems/spiral-matrix/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof\n\n\n## 1.缩小边界直到越界\n\n```js\n/**\n * [\n *  [1, 2, 3, 4],\n *  [5, 6, 7, 8],\n *  [9,10,11,12]\n * ]\n * [\n *  [(0,0), (0,1), (0,2), (0,3)],\n *  [(1,0), (1,1), (1,2), (1,3)],\n *  [(2,0), (2,1), (2,2), (2,3)],\n * ]\n * 0.定义边界top, right, bottom, left. [top, bottom], [left, right]\n * 1.顺时针打印边界元素，每打印完一条边，将这条边的位置向中心步进1\n * 2.直到越界\n * @param {number[][]} matrix\n * @return {number[]}\n */\nvar spiralOrder = function(matrix) {\n  if (!matrix.length) return []; \n\n  let top = 0;\n  let right = matrix[0].length - 1;\n  let bottom = matrix.length - 1;\n  let left = 0;\n  const res = [];\n\n  while (true) {\n    // 遍历上边界\n    for (let i = left; i <= right; i++) {\n      res.push(matrix[top][i])\n    }\n    if (++top > bottom) break;\n\n    // 遍历右边界\n    for (let i = top; i <= bottom; i++) {\n      res.push(matrix[i][right]);\n    }\n    if (left > --right) break;\n\n    // 遍历下边界\n    for (let i = right; i >= left; i--) {\n      res.push(matrix[bottom][i]);\n    }\n    if (top > --bottom) break;\n\n    // 遍历左边界\n    for (let i = bottom; i >= top; i--) {\n      res.push(matrix[i][left]);\n    }\n    if (++left > right) break;\n  }\n  return res;\n};\n```\n","slug":"面试题29-顺时针打印矩阵","published":1,"updated":"2023-02-18T00:18:45.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccw00105onrhtkmaunx","content":"<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p>\n<p>输入：matrix &#x3D; [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; matrix.length &lt;&#x3D; 100<br>0 &lt;&#x3D; matrix[i].length &lt;&#x3D; 100<br>注意：本题与主站 54 题相同：<a href=\"https://leetcode-cn.com/problems/spiral-matrix/\">https://leetcode-cn.com/problems/spiral-matrix/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof\">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof</a></p>\n<h2 id=\"1-缩小边界直到越界\"><a href=\"#1-缩小边界直到越界\" class=\"headerlink\" title=\"1.缩小边界直到越界\"></a>1.缩小边界直到越界</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *  [1, 2, 3, 4],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [5, 6, 7, 8],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [9,10,11,12]</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(0,0), (0,1), (0,2), (0,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(1,0), (1,1), (1,2), (1,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(2,0), (2,1), (2,2), (2,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> * 0.定义边界top, right, bottom, left. [top, bottom], [left, right]</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.顺时针打印边界元素，每打印完一条边，将这条边的位置向中心步进1</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.直到越界</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">matrix</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spiralOrder = <span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> []; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历上边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[top][i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++top &gt; bottom) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[i][right]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; --right) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历下边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[bottom][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &gt; --bottom) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历左边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[i][left]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++left &gt; right) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p>","more":"<p>示例 1：</p>\n<p>输入：matrix &#x3D; [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p>\n<p>输入：matrix &#x3D; [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; matrix.length &lt;&#x3D; 100<br>0 &lt;&#x3D; matrix[i].length &lt;&#x3D; 100<br>注意：本题与主站 54 题相同：<a href=\"https://leetcode-cn.com/problems/spiral-matrix/\">https://leetcode-cn.com/problems/spiral-matrix/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof\">https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof</a></p>\n<h2 id=\"1-缩小边界直到越界\"><a href=\"#1-缩小边界直到越界\" class=\"headerlink\" title=\"1.缩小边界直到越界\"></a>1.缩小边界直到越界</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *  [1, 2, 3, 4],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [5, 6, 7, 8],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [9,10,11,12]</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> * [</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(0,0), (0,1), (0,2), (0,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(1,0), (1,1), (1,2), (1,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> *  [(2,0), (2,1), (2,2), (2,3)],</span></span><br><span class=\"line\"><span class=\"comment\"> * ]</span></span><br><span class=\"line\"><span class=\"comment\"> * 0.定义边界top, right, bottom, left. [top, bottom], [left, right]</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.顺时针打印边界元素，每打印完一条边，将这条边的位置向中心步进1</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.直到越界</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">matrix</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> spiralOrder = <span class=\"keyword\">function</span>(<span class=\"params\">matrix</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matrix.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> []; </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> top = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = matrix[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bottom = matrix.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历上边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[top][i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++top &gt; bottom) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = top; i &lt;= bottom; i++) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[i][right]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; --right) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历下边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = right; i &gt;= left; i--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[bottom][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top &gt; --bottom) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历左边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = bottom; i &gt;= top; i--) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(matrix[i][left]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++left &gt; right) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题31. 栈的压入、弹出序列","date":"2020-04-16T23:26:51.000Z","_content":"\n\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n\n<!-- more -->\n\n示例 1：\n\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n示例 2：\n\n输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。\n \n\n提示：\n\n0 <= pushed.length == popped.length <= 1000\n0 <= pushed[i], popped[i] < 1000\npushed 是 popped 的排列。\n注意：本题与主站 946 题相同：https://leetcode-cn.com/problems/validate-stack-sequences/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof\n\n## 使用真实stack模拟\n\n```js\n/**\n * 使用真实stack模拟\n * 0.定义辅助栈stack\n * 1.持续按照pushed的顺序入栈stack，直到stack的栈顶元素与poped的栈底元素相同，\n * 2.则按照poped顺序出栈stack直到stack的栈顶元素不再与poped的栈低元素相同，然后重复1->2之道pushed的元素使用完\n * 3.如果poped不为空，则stack按照poped继续出栈，直到poped使用完返回true，否则返回false；\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = validateStackSequences2;\nfunction validateStackSequences1(pushed, popped) {\n  const stack = [];\n  let isValid = true;\n  while (pushed.length || popped.length) {\n    if (stack && stack[stack.length - 1] === popped[0]) {\n      stack.pop();\n      popped.shift();\n    } else if (pushed.length) {\n      stack.push(pushed.shift());\n    }\n\n    if (!pushed.length && stack[stack.length - 1] !== popped[0]) {\n      isValid = false;\n      break;\n    }\n  }\n  return isValid;\n};\n\nfunction validateStackSequences2(pushed, popped) {\n  const stack = [];\n  let isValid = true;\n  let i = 0;  // pushed idx\n  let j = 0;  // poped idx\n  while (i < pushed.length || j < popped.length) {\n    if (stack && stack[stack.length - 1] === popped[j]) {\n      stack.pop();\n      j++;\n    } else if (i < pushed.length) {\n      stack.push(pushed[i]);\n      i++;\n    }\n\n    if (i >= pushed.length && stack[stack.length - 1] !== popped[j]) {\n      isValid = false;\n      break;\n    }\n  }\n  return isValid;\n};\n```\n","source":"_posts/面试题31-栈的压入、弹出序列.md","raw":"---\ntitle: 面试题31. 栈的压入、弹出序列\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n\n<!-- more -->\n\n示例 1：\n\n输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n输出：true\n解释：我们可以按以下顺序执行：\npush(1), push(2), push(3), push(4), pop() -> 4,\npush(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n示例 2：\n\n输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n输出：false\n解释：1 不能在 2 之前弹出。\n \n\n提示：\n\n0 <= pushed.length == popped.length <= 1000\n0 <= pushed[i], popped[i] < 1000\npushed 是 popped 的排列。\n注意：本题与主站 946 题相同：https://leetcode-cn.com/problems/validate-stack-sequences/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof\n\n## 使用真实stack模拟\n\n```js\n/**\n * 使用真实stack模拟\n * 0.定义辅助栈stack\n * 1.持续按照pushed的顺序入栈stack，直到stack的栈顶元素与poped的栈底元素相同，\n * 2.则按照poped顺序出栈stack直到stack的栈顶元素不再与poped的栈低元素相同，然后重复1->2之道pushed的元素使用完\n * 3.如果poped不为空，则stack按照poped继续出栈，直到poped使用完返回true，否则返回false；\n * @param {number[]} pushed\n * @param {number[]} popped\n * @return {boolean}\n */\nvar validateStackSequences = validateStackSequences2;\nfunction validateStackSequences1(pushed, popped) {\n  const stack = [];\n  let isValid = true;\n  while (pushed.length || popped.length) {\n    if (stack && stack[stack.length - 1] === popped[0]) {\n      stack.pop();\n      popped.shift();\n    } else if (pushed.length) {\n      stack.push(pushed.shift());\n    }\n\n    if (!pushed.length && stack[stack.length - 1] !== popped[0]) {\n      isValid = false;\n      break;\n    }\n  }\n  return isValid;\n};\n\nfunction validateStackSequences2(pushed, popped) {\n  const stack = [];\n  let isValid = true;\n  let i = 0;  // pushed idx\n  let j = 0;  // poped idx\n  while (i < pushed.length || j < popped.length) {\n    if (stack && stack[stack.length - 1] === popped[j]) {\n      stack.pop();\n      j++;\n    } else if (i < pushed.length) {\n      stack.push(pushed[i]);\n      i++;\n    }\n\n    if (i >= pushed.length && stack[stack.length - 1] !== popped[j]) {\n      isValid = false;\n      break;\n    }\n  }\n  return isValid;\n};\n```\n","slug":"面试题31-栈的压入、弹出序列","published":1,"updated":"2023-02-18T00:20:58.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccx00145onr4ec6as8w","content":"<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]<br>输出：true<br>解释：我们可以按以下顺序执行：<br>push(1), push(2), push(3), push(4), pop() -&gt; 4,<br>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1<br>示例 2：</p>\n<p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]<br>输出：false<br>解释：1 不能在 2 之前弹出。\n </p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; pushed.length &#x3D;&#x3D; popped.length &lt;&#x3D; 1000<br>0 &lt;&#x3D; pushed[i], popped[i] &lt; 1000<br>pushed 是 popped 的排列。<br>注意：本题与主站 946 题相同：<a href=\"https://leetcode-cn.com/problems/validate-stack-sequences/\">https://leetcode-cn.com/problems/validate-stack-sequences/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof\">https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof</a></p>\n<h2 id=\"使用真实stack模拟\"><a href=\"#使用真实stack模拟\" class=\"headerlink\" title=\"使用真实stack模拟\"></a>使用真实stack模拟</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用真实stack模拟</span></span><br><span class=\"line\"><span class=\"comment\"> * 0.定义辅助栈stack</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.持续按照pushed的顺序入栈stack，直到stack的栈顶元素与poped的栈底元素相同，</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.则按照poped顺序出栈stack直到stack的栈顶元素不再与poped的栈低元素相同，然后重复1-&gt;2之道pushed的元素使用完</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果poped不为空，则stack按照poped继续出栈，直到poped使用完返回true，否则返回false；</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">pushed</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">popped</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validateStackSequences = validateStackSequences2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateStackSequences1</span>(<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pushed.<span class=\"property\">length</span> || popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] === popped[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      popped.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(pushed.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pushed.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] !== popped[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      isValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateStackSequences2</span>(<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// pushed idx</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;  <span class=\"comment\">// poped idx</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; pushed.<span class=\"property\">length</span> || j &lt; popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] === popped[j]) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; pushed.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(pushed[i]);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= pushed.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] !== popped[j]) &#123;</span><br><span class=\"line\">      isValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。</p>","more":"<p>示例 1：</p>\n<p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]<br>输出：true<br>解释：我们可以按以下顺序执行：<br>push(1), push(2), push(3), push(4), pop() -&gt; 4,<br>push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1<br>示例 2：</p>\n<p>输入：pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]<br>输出：false<br>解释：1 不能在 2 之前弹出。\n </p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; pushed.length &#x3D;&#x3D; popped.length &lt;&#x3D; 1000<br>0 &lt;&#x3D; pushed[i], popped[i] &lt; 1000<br>pushed 是 popped 的排列。<br>注意：本题与主站 946 题相同：<a href=\"https://leetcode-cn.com/problems/validate-stack-sequences/\">https://leetcode-cn.com/problems/validate-stack-sequences/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof\">https://leetcode-cn.com/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof</a></p>\n<h2 id=\"使用真实stack模拟\"><a href=\"#使用真实stack模拟\" class=\"headerlink\" title=\"使用真实stack模拟\"></a>使用真实stack模拟</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用真实stack模拟</span></span><br><span class=\"line\"><span class=\"comment\"> * 0.定义辅助栈stack</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.持续按照pushed的顺序入栈stack，直到stack的栈顶元素与poped的栈底元素相同，</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.则按照poped顺序出栈stack直到stack的栈顶元素不再与poped的栈低元素相同，然后重复1-&gt;2之道pushed的元素使用完</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.如果poped不为空，则stack按照poped继续出栈，直到poped使用完返回true，否则返回false；</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">pushed</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">popped</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> validateStackSequences = validateStackSequences2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateStackSequences1</span>(<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (pushed.<span class=\"property\">length</span> || popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] === popped[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      popped.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pushed.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(pushed.<span class=\"title function_\">shift</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pushed.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] !== popped[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      isValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateStackSequences2</span>(<span class=\"params\">pushed, popped</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// pushed idx</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = <span class=\"number\">0</span>;  <span class=\"comment\">// poped idx</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; pushed.<span class=\"property\">length</span> || j &lt; popped.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] === popped[j]) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">      j++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &lt; pushed.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      stack.<span class=\"title function_\">push</span>(pushed[i]);</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= pushed.<span class=\"property\">length</span> &amp;&amp; stack[stack.<span class=\"property\">length</span> - <span class=\"number\">1</span>] !== popped[j]) &#123;</span><br><span class=\"line\">      isValid = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isValid;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题30. 包含min函数的栈","date":"2020-04-15T23:33:59.000Z","_content":"\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n<!-- more -->\n\n示例:\n```js\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();   --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n提示：\n\n各函数的调用总次数不超过 20000 次\n \n\n注意：本题与主站 155 题相同：https://leetcode-cn.com/problems/min-stack/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\n\n## 双栈实现最小栈\n\n```js\n\n/**\n * 双栈实现最小栈\n * 1._data保存数据 _data: 9, 10, 7, 11, 5\n * 2._min保存最小值 _min: 9, 7, 5\n * \n * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min\n * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this._data = [];\n  this._min = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  if (!this._min.length || x <= this._min[this._min.length - 1]) {\n    this._min.push(x);\n  }\n  this._data.push(x);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const tail = this._data[this._data.length - 1];\n  if (tail === this._min[this._min.length - 1]) {\n    this._min.pop();\n  }\n  return this._data.pop();\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const len = this._data.length;\n  return this._data[len - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this._min[this._min.length - 1];\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n```\n","source":"_posts/面试题30. 包含min函数的栈.md","raw":"---\ntitle: 面试题30. 包含min函数的栈\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n\n<!-- more -->\n\n示例:\n```js\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.min();   --> 返回 -3.\nminStack.pop();\nminStack.top();   --> 返回 0.\nminStack.min();   --> 返回 -2.\n```\n\n提示：\n\n各函数的调用总次数不超过 20000 次\n \n\n注意：本题与主站 155 题相同：https://leetcode-cn.com/problems/min-stack/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\n\n## 双栈实现最小栈\n\n```js\n\n/**\n * 双栈实现最小栈\n * 1._data保存数据 _data: 9, 10, 7, 11, 5\n * 2._min保存最小值 _min: 9, 7, 5\n * \n * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min\n * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效\n * initialize your data structure here.\n */\nvar MinStack = function() {\n  this._data = [];\n  this._min = [];\n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nMinStack.prototype.push = function(x) {\n  if (!this._min.length || x <= this._min[this._min.length - 1]) {\n    this._min.push(x);\n  }\n  this._data.push(x);\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function() {\n  const tail = this._data[this._data.length - 1];\n  if (tail === this._min[this._min.length - 1]) {\n    this._min.pop();\n  }\n  return this._data.pop();\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function() {\n  const len = this._data.length;\n  return this._data[len - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.min = function() {\n  return this._min[this._min.length - 1];\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.min()\n */\n```\n","slug":"面试题30. 包含min函数的栈","published":1,"updated":"2023-02-17T23:36:33.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dccy00175onr5c4x8vec","content":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MinStack</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">top</span>();   --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>各函数的调用总次数不超过 20000 次\n </p>\n<p>注意：本题与主站 155 题相同：<a href=\"https://leetcode-cn.com/problems/min-stack/\">https://leetcode-cn.com/problems/min-stack/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\">https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof</a></p>\n<h2 id=\"双栈实现最小栈\"><a href=\"#双栈实现最小栈\" class=\"headerlink\" title=\"双栈实现最小栈\"></a>双栈实现最小栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双栈实现最小栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data保存数据 _data: 9, 10, 7, 11, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._min保存最小值 _min: 9, 7, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MinStack</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> || x &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tail === <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">min</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.min()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。</p>","more":"<p>示例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">MinStack</span> minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">MinStack</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">2</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">push</span>(-<span class=\"number\">3</span>);</span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">3.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">minStack.<span class=\"title function_\">top</span>();   --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.<span class=\"title function_\">min</span>();   --&gt; 返回 -<span class=\"number\">2.</span></span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>各函数的调用总次数不超过 20000 次\n </p>\n<p>注意：本题与主站 155 题相同：<a href=\"https://leetcode-cn.com/problems/min-stack/\">https://leetcode-cn.com/problems/min-stack/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof\">https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof</a></p>\n<h2 id=\"双栈实现最小栈\"><a href=\"#双栈实现最小栈\" class=\"headerlink\" title=\"双栈实现最小栈\"></a>双栈实现最小栈</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双栈实现最小栈</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data保存数据 _data: 9, 10, 7, 11, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._min保存最小值 _min: 9, 7, 5</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 3.每次push的时候，在push到_data同时，如果新值比_min的最小值（栈顶元素）小就入栈_min，否则不入_min</span></span><br><span class=\"line\"><span class=\"comment\"> * 4.在pop的时候_data出栈，如果出栈的元素和_min栈顶元素相等，那么_min也出栈，因为这个最小值已经失效</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MinStack</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">x</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> || x &lt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(x);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tail = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tail === <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">top</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>[len - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MinStack</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">min</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_min</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.min()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"面试题37. 序列化二叉树","date":"2020-04-16T23:26:51.000Z","_content":"\n请实现两个函数，分别用来序列化和反序列化二叉树。\n\n<!-- more -->\n\n示例: \n\n你可以将以下二叉树：\n```\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n```\n\n序列化为 \"[1,2,3,null,null,4,5]\"\n注意：本题与主站 297 题相同：https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\n\n## 1.前序遍历\n\n关键：\n1. 将遍历的序列转化为字符串；\n2. 保留空子节点（可以保存为‘null’），作为标识符来反序列化。\n\n```js\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n  if (!root) return '';\n  const res = [];\n  preOrder(root);\n  function preOrder(node) {\n    if (!node) return res.push('null');\n    res.push(node.val);\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n  return res.join();\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n  if (!data.length) return null;\n  const arr = data.split(',');\n\n  function buildTree(arr) {\n    const val = arr.shift();\n    if (val === 'null') return null;\n    const node = new TreeNode(val);\n    node.left = buildTree(arr);\n    node.right = buildTree(arr);\n    return node;\n  }\n  return buildTree(arr);\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */\n function TreeNode(val) {\n  this.val = val;\n  this.left = this.right = null;\n }\n```\n","source":"_posts/面试题37-序列化二叉树.md","raw":"---\ntitle: 面试题37. 序列化二叉树\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n请实现两个函数，分别用来序列化和反序列化二叉树。\n\n<!-- more -->\n\n示例: \n\n你可以将以下二叉树：\n```\n    1\n   / \\\n  2   3\n     / \\\n    4   5\n```\n\n序列化为 \"[1,2,3,null,null,4,5]\"\n注意：本题与主站 297 题相同：https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\n\n## 1.前序遍历\n\n关键：\n1. 将遍历的序列转化为字符串；\n2. 保留空子节点（可以保存为‘null’），作为标识符来反序列化。\n\n```js\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n  if (!root) return '';\n  const res = [];\n  preOrder(root);\n  function preOrder(node) {\n    if (!node) return res.push('null');\n    res.push(node.val);\n    preOrder(node.left);\n    preOrder(node.right);\n  }\n  return res.join();\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n  if (!data.length) return null;\n  const arr = data.split(',');\n\n  function buildTree(arr) {\n    const val = arr.shift();\n    if (val === 'null') return null;\n    const node = new TreeNode(val);\n    node.left = buildTree(arr);\n    node.right = buildTree(arr);\n    return node;\n  }\n  return buildTree(arr);\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */\n function TreeNode(val) {\n  this.val = val;\n  this.left = this.right = null;\n }\n```\n","slug":"面试题37-序列化二叉树","published":1,"updated":"2023-02-18T00:19:36.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd0001c5onr283k1qw8","content":"<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>\n<span id=\"more\"></span>\n\n<p>示例: </p>\n<p>你可以将以下二叉树：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   3</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br></pre></td></tr></table></figure>\n\n<p>序列化为 “[1,2,3,null,null,4,5]”<br>注意：本题与主站 297 题相同：<a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</a></p>\n<h2 id=\"1-前序遍历\"><a href=\"#1-前序遍历\" class=\"headerlink\" title=\"1.前序遍历\"></a>1.前序遍历</h2><p>关键：</p>\n<ol>\n<li>将遍历的序列转化为字符串；</li>\n<li>保留空子节点（可以保存为‘null’），作为标识符来反序列化。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">preOrder</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">preOrder</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> res.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;null&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">join</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">buildTree</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = arr.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"string\">&#x27;null&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">    node.<span class=\"property\">left</span> = <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">    node.<span class=\"property\">right</span> = <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your functions will be called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * deserialize(serialize(root));</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">TreeNode</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>","more":"<p>示例: </p>\n<p>你可以将以下二叉树：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  1</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">2   3</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  4   5</span><br></pre></td></tr></table></figure>\n\n<p>序列化为 “[1,2,3,null,null,4,5]”<br>注意：本题与主站 297 题相同：<a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\">https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/</a></p>\n<h2 id=\"1-前序遍历\"><a href=\"#1-前序遍历\" class=\"headerlink\" title=\"1.前序遍历\"></a>1.前序遍历</h2><p>关键：</p>\n<ol>\n<li>将遍历的序列转化为字符串；</li>\n<li>保留空子节点（可以保存为‘null’），作为标识符来反序列化。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Encodes a tree to a single string.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">preOrder</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">preOrder</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> res.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;null&#x27;</span>);</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(node.<span class=\"property\">val</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"title function_\">preOrder</span>(node.<span class=\"property\">right</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.<span class=\"title function_\">join</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes your encoded data to tree.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">data</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">TreeNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"keyword\">function</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!data.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = data.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">buildTree</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = arr.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val === <span class=\"string\">&#x27;null&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(val);</span><br><span class=\"line\">    node.<span class=\"property\">left</span> = <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">    node.<span class=\"property\">right</span> = <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">buildTree</span>(arr);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your functions will be called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * deserialize(serialize(root));</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"keyword\">function</span> <span class=\"title function_\">TreeNode</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题38. 字符串的排列","date":"2020-04-16T23:26:51.000Z","_content":"\n输入一个字符串，打印出该字符串中字符的所有排列。\n\n你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。\n\n<!-- more -->\n\n示例:\n\n输入：s = \"abc\"\n输出：[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n \n\n限制：\n\n1 <= s 的长度 <= 8\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof\n\n## 1.暴力穷举\n\n```js\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar permutation = function(s) {\n  const res = [];\n  dfs(s, '');\n  function dfs(restStr, recordStr) {\n    if (!restStr.length && !res.includes(recordStr)) res.push(recordStr);\n    for (let i = 0; i < restStr.length; i++) {\n      let newRest = restStr.slice(0, i) + restStr.slice(i + 1);\n      dfs(newRest, recordStr + restStr[i]);\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/面试题38-字符串的排列.md","raw":"---\ntitle: 面试题38. 字符串的排列\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n输入一个字符串，打印出该字符串中字符的所有排列。\n\n你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。\n\n<!-- more -->\n\n示例:\n\n输入：s = \"abc\"\n输出：[\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n \n\n限制：\n\n1 <= s 的长度 <= 8\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof\n\n## 1.暴力穷举\n\n```js\n/**\n * @param {string} s\n * @return {string[]}\n */\nvar permutation = function(s) {\n  const res = [];\n  dfs(s, '');\n  function dfs(restStr, recordStr) {\n    if (!restStr.length && !res.includes(recordStr)) res.push(recordStr);\n    for (let i = 0; i < restStr.length; i++) {\n      let newRest = restStr.slice(0, i) + restStr.slice(i + 1);\n      dfs(newRest, recordStr + restStr[i]);\n    }\n  }\n  return res;\n};\n```\n","slug":"面试题38-字符串的排列","published":1,"updated":"2023-02-18T00:22:30.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd1001f5onrai7s5apd","content":"<p>输入一个字符串，打印出该字符串中字符的所有排列。</p>\n<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入：s &#x3D; “abc”<br>输出：[“abc”,”acb”,”bac”,”bca”,”cab”,”cba”]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; s 的长度 &lt;&#x3D; 8</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof\">https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof</a></p>\n<h2 id=\"1-暴力穷举\"><a href=\"#1-暴力穷举\" class=\"headerlink\" title=\"1.暴力穷举\"></a>1.暴力穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permutation = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(s, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">restStr, recordStr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!restStr.<span class=\"property\">length</span> &amp;&amp; !res.<span class=\"title function_\">includes</span>(recordStr)) res.<span class=\"title function_\">push</span>(recordStr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; restStr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newRest = restStr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i) + restStr.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(newRest, recordStr + restStr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个字符串，打印出该字符串中字符的所有排列。</p>\n<p>你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。</p>","more":"<p>示例:</p>\n<p>输入：s &#x3D; “abc”<br>输出：[“abc”,”acb”,”bac”,”bca”,”cab”,”cba”]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; s 的长度 &lt;&#x3D; 8</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof\">https://leetcode-cn.com/problems/zi-fu-chuan-de-pai-lie-lcof</a></p>\n<h2 id=\"1-暴力穷举\"><a href=\"#1-暴力穷举\" class=\"headerlink\" title=\"1.暴力穷举\"></a>1.暴力穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> permutation = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(s, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">restStr, recordStr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!restStr.<span class=\"property\">length</span> &amp;&amp; !res.<span class=\"title function_\">includes</span>(recordStr)) res.<span class=\"title function_\">push</span>(recordStr);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; restStr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newRest = restStr.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, i) + restStr.<span class=\"title function_\">slice</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(newRest, recordStr + restStr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题39. 数组中出现次数超过一半的数字","date":"2020-04-16T23:26:51.000Z","_content":"\n\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n \n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n \n\n限制：\n\n1 <= 数组长度 <= 50000\n\n \n\n注意：本题与主站 169 题相同：https://leetcode-cn.com/problems/majority-element/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof\n\n## 1.Hash去重与计数\n\n```js\n/**\n * Hash去重与计数\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n  const obj = {};\n  const halfLen = Math.floor(nums.length / 2);\n  for (const num of nums) {\n    if (obj[num]) {\n      obj[num]++;\n      if (obj[num] > halfLen) {\n        return num;\n      }\n    } else {\n      obj[num] = 1;\n    }\n  }\n  for (let num in obj) {\n    if (obj[num] > halfLen) {\n      return num;\n    }\n  }\n};\n```\n","source":"_posts/面试题39-数组中出现次数超过一半的数字.md","raw":"---\ntitle: 面试题39. 数组中出现次数超过一半的数字\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n \n\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出: 2\n \n\n限制：\n\n1 <= 数组长度 <= 50000\n\n \n\n注意：本题与主站 169 题相同：https://leetcode-cn.com/problems/majority-element/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof\n\n## 1.Hash去重与计数\n\n```js\n/**\n * Hash去重与计数\n * @param {number[]} nums\n * @return {number}\n */\nvar majorityElement = function(nums) {\n  const obj = {};\n  const halfLen = Math.floor(nums.length / 2);\n  for (const num of nums) {\n    if (obj[num]) {\n      obj[num]++;\n      if (obj[num] > halfLen) {\n        return num;\n      }\n    } else {\n      obj[num] = 1;\n    }\n  }\n  for (let num in obj) {\n    if (obj[num] > halfLen) {\n      return num;\n    }\n  }\n};\n```\n","slug":"面试题39-数组中出现次数超过一半的数字","published":1,"updated":"2023-02-18T00:16:16.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd2001k5onr3qq32kng","content":"<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n </p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]<br>输出: 2\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000</p>\n<p> </p>\n<p>注意：本题与主站 169 题相同：<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof</a></p>\n<h2 id=\"1-Hash去重与计数\"><a href=\"#1-Hash去重与计数\" class=\"headerlink\" title=\"1.Hash去重与计数\"></a>1.Hash去重与计数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Hash去重与计数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> halfLen = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(nums.<span class=\"property\">length</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj[num]) &#123;</span><br><span class=\"line\">      obj[num]++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[num] &gt; halfLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      obj[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj[num] &gt; halfLen) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n </p>\n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>","more":"<p>示例 1:</p>\n<p>输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]<br>输出: 2\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000</p>\n<p> </p>\n<p>注意：本题与主站 169 题相同：<a href=\"https://leetcode-cn.com/problems/majority-element/\">https://leetcode-cn.com/problems/majority-element/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof</a></p>\n<h2 id=\"1-Hash去重与计数\"><a href=\"#1-Hash去重与计数\" class=\"headerlink\" title=\"1.Hash去重与计数\"></a>1.Hash去重与计数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Hash去重与计数</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> majorityElement = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> halfLen = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(nums.<span class=\"property\">length</span> / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj[num]) &#123;</span><br><span class=\"line\">      obj[num]++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (obj[num] &gt; halfLen) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      obj[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj[num] &gt; halfLen) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题41. 数据流中的中位数","date":"2020-04-16T23:26:51.000Z","_content":"\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n<!-- more -->\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\nvoid addNum(int num) - 从数据流中添加一个整数到数据结构中。\ndouble findMedian() - 返回目前所有元素的中位数。\n示例 1：\n\n输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]\n示例 2：\n\n输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]\n \n\n限制：\n\n最多会对 addNum、findMedia进行 50000 次调用。\n注意：本题与主站 295 题相同：https://leetcode-cn.com/problems/find-median-from-data-stream/\n\n## 1.二分查找找插入位置\n\n```js\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n  this._stack = [];\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n  if (!this._stack.length) {\n    this._stack.push(num);\n    return ;\n  }\n  let left = 0;\n  let right = this._stack.length;\n  // [left, right)\n  while (left < right) {\n    let midIdx = left + Math.floor((right - left) / 2);\n    if (num === this._stack[midIdx]) {\n      right = midIdx;\n      break;\n    }\n    if (num < this._stack[midIdx]) {\n      right = midIdx;\n    } else {\n      left = midIdx + 1;\n    }\n  }\n\n  this._stack.splice(right, 0, num);\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n  const len = this._stack.length;\n  if (len & 1 === 1) {\n    return this._stack[(len - 1) / 2];\n  } else {\n    const right = len / 2;\n    return (this._stack[right-1] + this._stack[right]) / 2;\n  }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n```\n","source":"_posts/面试题41-数据流中的中位数.md","raw":"---\ntitle: 面试题41. 数据流中的中位数\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。\n\n<!-- more -->\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\nvoid addNum(int num) - 从数据流中添加一个整数到数据结构中。\ndouble findMedian() - 返回目前所有元素的中位数。\n示例 1：\n\n输入：\n[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]\n输出：[null,null,null,1.50000,null,2.00000]\n示例 2：\n\n输入：\n[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[2],[],[3],[]]\n输出：[null,null,2.00000,null,2.50000]\n \n\n限制：\n\n最多会对 addNum、findMedia进行 50000 次调用。\n注意：本题与主站 295 题相同：https://leetcode-cn.com/problems/find-median-from-data-stream/\n\n## 1.二分查找找插入位置\n\n```js\n/**\n * initialize your data structure here.\n */\nvar MedianFinder = function() {\n  this._stack = [];\n};\n\n/** \n * @param {number} num\n * @return {void}\n */\nMedianFinder.prototype.addNum = function(num) {\n  if (!this._stack.length) {\n    this._stack.push(num);\n    return ;\n  }\n  let left = 0;\n  let right = this._stack.length;\n  // [left, right)\n  while (left < right) {\n    let midIdx = left + Math.floor((right - left) / 2);\n    if (num === this._stack[midIdx]) {\n      right = midIdx;\n      break;\n    }\n    if (num < this._stack[midIdx]) {\n      right = midIdx;\n    } else {\n      left = midIdx + 1;\n    }\n  }\n\n  this._stack.splice(right, 0, num);\n};\n\n/**\n * @return {number}\n */\nMedianFinder.prototype.findMedian = function() {\n  const len = this._stack.length;\n  if (len & 1 === 1) {\n    return this._stack[(len - 1) / 2];\n  } else {\n    const right = len / 2;\n    return (this._stack[right-1] + this._stack[right]) / 2;\n  }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * var obj = new MedianFinder()\n * obj.addNum(num)\n * var param_2 = obj.findMedian()\n */\n```\n","slug":"面试题41-数据流中的中位数","published":1,"updated":"2023-02-18T00:15:26.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd3001n5onr8te16bcw","content":"<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>\n<span id=\"more\"></span>\n\n<p>例如，</p>\n<p>[2,3,4] 的中位数是 3</p>\n<p>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>\n<p>设计一个支持以下两种操作的数据结构：</p>\n<p>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。<br>示例 1：</p>\n<p>输入：<br>[“MedianFinder”,”addNum”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[1],[2],[],[3],[]]<br>输出：[null,null,null,1.50000,null,2.00000]<br>示例 2：</p>\n<p>输入：<br>[“MedianFinder”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[2],[],[3],[]]<br>输出：[null,null,2.00000,null,2.50000]\n </p>\n<p>限制：</p>\n<p>最多会对 addNum、findMedia进行 50000 次调用。<br>注意：本题与主站 295 题相同：<a href=\"https://leetcode-cn.com/problems/find-median-from-data-stream/\">https://leetcode-cn.com/problems/find-median-from-data-stream/</a></p>\n<h2 id=\"1-二分查找找插入位置\"><a href=\"#1-二分查找找插入位置\" class=\"headerlink\" title=\"1.二分查找找插入位置\"></a>1.二分查找找插入位置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MedianFinder</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MedianFinder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">addNum</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIdx = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[midIdx]) &#123;</span><br><span class=\"line\">      right = midIdx;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[midIdx]) &#123;</span><br><span class=\"line\">      right = midIdx;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = midIdx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"title function_\">splice</span>(right, <span class=\"number\">0</span>, num);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MedianFinder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">findMedian</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &amp; <span class=\"number\">1</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[right-<span class=\"number\">1</span>] + <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[right]) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MedianFinder()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.addNum(num)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_2 = obj.findMedian()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>","more":"<p>例如，</p>\n<p>[2,3,4] 的中位数是 3</p>\n<p>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>\n<p>设计一个支持以下两种操作的数据结构：</p>\n<p>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。<br>示例 1：</p>\n<p>输入：<br>[“MedianFinder”,”addNum”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[1],[2],[],[3],[]]<br>输出：[null,null,null,1.50000,null,2.00000]<br>示例 2：</p>\n<p>输入：<br>[“MedianFinder”,”addNum”,”findMedian”,”addNum”,”findMedian”]<br>[[],[2],[],[3],[]]<br>输出：[null,null,2.00000,null,2.50000]\n </p>\n<p>限制：</p>\n<p>最多会对 addNum、findMedia进行 50000 次调用。<br>注意：本题与主站 295 题相同：<a href=\"https://leetcode-cn.com/problems/find-median-from-data-stream/\">https://leetcode-cn.com/problems/find-median-from-data-stream/</a></p>\n<h2 id=\"1-二分查找找插入位置\"><a href=\"#1-二分查找找插入位置\" class=\"headerlink\" title=\"1.二分查找找插入位置\"></a>1.二分查找找插入位置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MedianFinder</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MedianFinder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">addNum</span> = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"title function_\">push</span>(num);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> midIdx = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num === <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[midIdx]) &#123;</span><br><span class=\"line\">      right = midIdx;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[midIdx]) &#123;</span><br><span class=\"line\">      right = midIdx;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      left = midIdx + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"title function_\">splice</span>(right, <span class=\"number\">0</span>, num);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MedianFinder</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">findMedian</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (len &amp; <span class=\"number\">1</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[(len - <span class=\"number\">1</span>) / <span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = len / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[right-<span class=\"number\">1</span>] + <span class=\"variable language_\">this</span>.<span class=\"property\">_stack</span>[right]) / <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MedianFinder()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.addNum(num)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_2 = obj.findMedian()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"面试题46. 把数字翻译成字符串","date":"2020-04-16T18:13:49.000Z","_content":"\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n<!-- more -->\n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","source":"_posts/面试题46-把数字翻译成字符串.md","raw":"---\ntitle: 面试题46. 把数字翻译成字符串\ndate: 2020-04-17 02:13:49\ncategories: \n- 算法题\ntags:\n- LCOF\n---\n\n给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。\n\n<!-- more -->\n\n示例 1:\n\n输入: 12258\n输出: 5\n解释: 12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"\n \n\n提示：\n\n0 <= num < 231\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\n\n## 1.深度优遍历\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum1 = function(num) {\n  let count = 0;\n  dfs(num + '', 0);\n  function dfs(str, start) {\n    if (start >= str.length) return ++count;\n    const num1 = +(str[start]);\n    const num2 = +(str[start] + str[start+1]);\n    \n    dfs(str, start + 1);\n    if (9 < num2 && num2 < 26) {\n      dfs(str, start + 2);\n    }\n  }\n  return count;\n};\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i]：长度为i字符串的翻译方法数\n * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译\n * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]\n * @param {number} num\n * @return {number}\n */\nvar translateNum2 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 3; i <= str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-2] + str[i - 1];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n\n## 3.动态规划（优化）\n\n```js\n/**\n * @param {number} num\n * @return {number}\n */\nvar translateNum3 = function(num) {\n  const str = '_' + num;\n  // [0, pos)\n  let dp1 = 1;\n  let dp2 = 1;\n  for (let i = 2; i < str.length; i++) {\n    let tmp = dp2;\n    const num = str[i-1] + str[i];\n    if (9 < +num && +num < 26) {\n      dp2 = dp2 + dp1;\n    }\n    dp1 = tmp;\n  }\n  return dp2;\n};\n```\n","slug":"面试题46-把数字翻译成字符串","published":1,"updated":"2023-02-18T00:25:05.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd5001s5onr8i081k71","content":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>","more":"<p>示例 1:</p>\n<p>输入: 12258<br>输出: 5<br>解释: 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”</p>\n<p>提示：</p>\n<p>0 &lt;&#x3D; num &lt; 231</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-深度优遍历\"><a href=\"#1-深度优遍历\" class=\"headerlink\" title=\"1.深度优遍历\"></a>1.深度优遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum1 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(num + <span class=\"string\">&#x27;&#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">str, start</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= str.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> ++count;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num1 = +(str[start]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num2 = +(str[start] + str[start+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; num2 &amp;&amp; num2 &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">dfs</span>(str, start + <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]：长度为i字符串的翻译方法数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：dp[i-1]:最后单字符翻译，dp[i-2]：最后双字符翻译</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = isValid(s[i-1]+s[i-2]) ? dp[i-1] + dp[i-2] : dp[i-1]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum2 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">3</span>; i &lt;= str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">2</span>] + str[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-动态规划（优化）\"><a href=\"#3-动态规划（优化）\" class=\"headerlink\" title=\"3.动态规划（优化）\"></a>3.动态规划（优化）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">num</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> translateNum3 = <span class=\"keyword\">function</span>(<span class=\"params\">num</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&#x27;_&#x27;</span> + num;</span><br><span class=\"line\">  <span class=\"comment\">// [0, pos)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = dp2;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> num = str[i-<span class=\"number\">1</span>] + str[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">9</span> &lt; +num &amp;&amp; +num &lt; <span class=\"number\">26</span>) &#123;</span><br><span class=\"line\">      dp2 = dp2 + dp1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp1 = tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp2;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题47. 礼物的最大价值","date":"2020-04-16T23:33:59.000Z","_content":"\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n<!-- more -->\n\n示例 1:\n\n输入: \n```\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n```\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n \n\n提示：\n```\n0 < grid.length <= 200\n0 < grid[0].length <= 200\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\n\n## 1.深度优先遍历（超时）\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue1 = function(grid) {\n  let res = 0;\n  const m = grid.length - 1;\n  const n = grid[0].length - 1;\n\n  dfs(grid, 0, 0, 0);\n\n  function dfs(grid, i, j, count) {\n    if (i > m || j > n) return;\n    count += grid[i][j];\n    if (i === m && j === n) {\n      res = Math.max(res, count);\n      return;\n    }\n    // to right\n    dfs(grid, i, j + 1, count);\n    // to bottom\n    dfs(grid, i + 1, j, count);\n  }\n\n  return res;\n}\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i][j]：到达(i,j)位置的最大价值\n * 最优子结构：\n * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]\n * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]\n * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]\n * 边界：dp[0][0] = grid[0][0]\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue2 = function(grid) {\n  if (!grid.length) return 0;\n  const m = grid.length;\n  const n = grid[0].length;\n  let dp = new Array(m).fill();\n  dp = dp.map(() => new Array(n).fill(0));\n  dp[0][0] = grid[0][0];\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const sub1 = i < 1 ? 0 : dp[i-1][j];\n      const sub2 = j < 1 ? 0 :dp[i][j-1];\n      dp[i][j] = Math.max(sub1, sub2) + grid[i][j]\n    }\n  }\n  return dp[m-1][n-1];\n};\n```\n\n","source":"_posts/面试题47. 礼物的最大价值.md","raw":"---\ntitle: 面试题47. 礼物的最大价值\ndate: 2020-04-17 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？\n\n<!-- more -->\n\n示例 1:\n\n输入: \n```\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n```\n输出: 12\n解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n \n\n提示：\n```\n0 < grid.length <= 200\n0 < grid[0].length <= 200\n```\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\n\n## 1.深度优先遍历（超时）\n\n```js\n/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue1 = function(grid) {\n  let res = 0;\n  const m = grid.length - 1;\n  const n = grid[0].length - 1;\n\n  dfs(grid, 0, 0, 0);\n\n  function dfs(grid, i, j, count) {\n    if (i > m || j > n) return;\n    count += grid[i][j];\n    if (i === m && j === n) {\n      res = Math.max(res, count);\n      return;\n    }\n    // to right\n    dfs(grid, i, j + 1, count);\n    // to bottom\n    dfs(grid, i + 1, j, count);\n  }\n\n  return res;\n}\n```\n\n## 2.动态规划\n\n```js\n/**\n * dp[i][j]：到达(i,j)位置的最大价值\n * 最优子结构：\n * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]\n * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]\n * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]\n * 边界：dp[0][0] = grid[0][0]\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxValue2 = function(grid) {\n  if (!grid.length) return 0;\n  const m = grid.length;\n  const n = grid[0].length;\n  let dp = new Array(m).fill();\n  dp = dp.map(() => new Array(n).fill(0));\n  dp[0][0] = grid[0][0];\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const sub1 = i < 1 ? 0 : dp[i-1][j];\n      const sub2 = j < 1 ? 0 :dp[i][j-1];\n      dp[i][j] = Math.max(sub1, sub2) + grid[i][j]\n    }\n  }\n  return dp[m-1][n-1];\n};\n```\n\n","slug":"面试题47. 礼物的最大价值","published":1,"updated":"2023-02-17T23:51:19.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd5001v5onr3fi22wkm","content":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,3,1],</span><br><span class=\"line\">  [1,5,1],</span><br><span class=\"line\">  [4,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n </p>\n<p>提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &lt; grid.length &lt;= 200</span><br><span class=\"line\">0 &lt; grid[0].length &lt;= 200</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\">https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof</a></p>\n<h2 id=\"1-深度优先遍历（超时）\"><a href=\"#1-深度优先遍历（超时）\" class=\"headerlink\" title=\"1.深度优先遍历（超时）\"></a>1.深度优先遍历（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue1 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">grid, i, j, count</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; m || j &gt; n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    count += grid[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === m &amp;&amp; j === n) &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, count);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// to right</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i, j + <span class=\"number\">1</span>, count);</span><br><span class=\"line\">    <span class=\"comment\">// to bottom</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i + <span class=\"number\">1</span>, j, count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i][j]：到达(i,j)位置的最大价值</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界：dp[0][0] = grid[0][0]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue2 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!grid.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub1 = i &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub2 = j &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> :dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[i][j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sub1, sub2) + grid[i][j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p>","more":"<p>示例 1:</p>\n<p>输入: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [1,3,1],</span><br><span class=\"line\">  [1,5,1],</span><br><span class=\"line\">  [4,2,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>输出: 12<br>解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物\n </p>\n<p>提示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 &lt; grid.length &lt;= 200</span><br><span class=\"line\">0 &lt; grid[0].length &lt;= 200</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof\">https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof</a></p>\n<h2 id=\"1-深度优先遍历（超时）\"><a href=\"#1-深度优先遍历（超时）\" class=\"headerlink\" title=\"1.深度优先遍历（超时）\"></a>1.深度优先遍历（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue1 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(grid, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">grid, i, j, count</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt; m || j &gt; n) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    count += grid[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === m &amp;&amp; j === n) &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, count);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// to right</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i, j + <span class=\"number\">1</span>, count);</span><br><span class=\"line\">    <span class=\"comment\">// to bottom</span></span><br><span class=\"line\">    <span class=\"title function_\">dfs</span>(grid, i + <span class=\"number\">1</span>, j, count);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-动态规划\"><a href=\"#2-动态规划\" class=\"headerlink\" title=\"2.动态规划\"></a>2.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i][j]：到达(i,j)位置的最大价值</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.从上方移动一步到达，dp[i][j-1] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.从左边移动一步到达，dp[i-1][j] + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]) + grid[i][j]</span></span><br><span class=\"line\"><span class=\"comment\"> * 边界：dp[0][0] = grid[0][0]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[][]</span>&#125; <span class=\"variable\">grid</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxValue2 = <span class=\"keyword\">function</span>(<span class=\"params\">grid</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!grid.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = grid.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = grid[<span class=\"number\">0</span>].<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(m).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub1 = i &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[i-<span class=\"number\">1</span>][j];</span><br><span class=\"line\">      <span class=\"keyword\">const</span> sub2 = j &lt; <span class=\"number\">1</span> ? <span class=\"number\">0</span> :dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[i][j] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(sub1, sub2) + grid[i][j]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题48. 最长不含重复字符的子字符串","date":"2020-04-16T23:26:51.000Z","_content":"\n\n请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n<!-- more -->\n\n示例 1:\n\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n示例 2:\n\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n示例 3:\n\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n \n\n提示：\n\ns.length <= 40000\n注意：本题与主站 3 题相同：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof\n\n\n## 1.滑动窗口\n\n```js\n/**\n * 滑动窗口\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  let idx = 0;\n  let window = '';\n  let res = 0;\n\n  while (1) {\n    const char = s[idx];\n    if (!window.includes(char) && idx < s.length) {\n      window += char;\n      idx++;\n    } else {\n      res = Math.max(res, window.length);\n      if (idx >= s.length) break;\n      window = window.slice(1);\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/面试题48-最长不含重复字符的子字符串.md","raw":"---\ntitle: 面试题48. 最长不含重复字符的子字符串\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。\n\n<!-- more -->\n\n示例 1:\n\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n示例 2:\n\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n示例 3:\n\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n \n\n提示：\n\ns.length <= 40000\n注意：本题与主站 3 题相同：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof\n\n\n## 1.滑动窗口\n\n```js\n/**\n * 滑动窗口\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n  let idx = 0;\n  let window = '';\n  let res = 0;\n\n  while (1) {\n    const char = s[idx];\n    if (!window.includes(char) && idx < s.length) {\n      window += char;\n      idx++;\n    } else {\n      res = Math.max(res, window.length);\n      if (idx >= s.length) break;\n      window = window.slice(1);\n    }\n  }\n  return res;\n};\n```\n","slug":"面试题48-最长不含重复字符的子字符串","published":1,"updated":"2023-02-18T00:23:29.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd700205onr7539ajn9","content":"<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p>\n<p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p>\n<p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。\n </p>\n<p>提示：</p>\n<p>s.length &lt;&#x3D; 40000<br>注意：本题与主站 3 题相同：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-滑动窗口\"><a href=\"#1-滑动窗口\" class=\"headerlink\" title=\"1.滑动窗口\"></a>1.滑动窗口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable language_\">window</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> char = s[idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"title function_\">includes</span>(char) &amp;&amp; idx &lt; s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span> += char;</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, <span class=\"variable language_\">window</span>.<span class=\"property\">length</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (idx &gt;= s.<span class=\"property\">length</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p>","more":"<p>示例 1:</p>\n<p>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p>\n<p>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p>\n<p>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。\n </p>\n<p>提示：</p>\n<p>s.length &lt;&#x3D; 40000<br>注意：本题与主站 3 题相同：<a href=\"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/\">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-滑动窗口\"><a href=\"#1-滑动窗口\" class=\"headerlink\" title=\"1.滑动窗口\"></a>1.滑动窗口</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lengthOfLongestSubstring = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"variable language_\">window</span> = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> char = s[idx];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">window</span>.<span class=\"title function_\">includes</span>(char) &amp;&amp; idx &lt; s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span> += char;</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(res, <span class=\"variable language_\">window</span>.<span class=\"property\">length</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (idx &gt;= s.<span class=\"property\">length</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span> = <span class=\"variable language_\">window</span>.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题49. 丑数","date":"2020-04-16T23:26:51.000Z","_content":"\n\n我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n<!-- more -->\n\n示例:\n\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n说明:  \n\n1 是丑数。\nn 不超过1690。\n注意：本题与主站 264 题相同：https://leetcode-cn.com/problems/ugly-number-ii/\n\n通过次数7,052提交次数11,250\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/chou-shu-lcof\n\n## 1.动态规划\n\n```js\n/**\n * 动态规划\n * dp[i]: 第i个丑数\n * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]\n * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一\n * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n  let ugly1 = 1;\n  let ugly2 = 1;\n  let ugly3 = 1;\n  let dp = [0, 1];\n  let count = 2;\n  while (count <= n) {\n    let tmp1 = dp[ugly1] * 2;\n    let tmp2 = dp[ugly2] * 3;\n    let tmp3 = dp[ugly3] * 5;\n    dp[count] = Math.min(tmp1, tmp2, tmp3);\n    if (dp[count] === tmp1) ugly1++;\n    if (dp[count] === tmp2) ugly2++;\n    if (dp[count] === tmp3) ugly3++;\n    count++;\n  }\n  return dp[n];\n};\n```\n","source":"_posts/面试题49. 丑数.md","raw":"---\ntitle: 面试题49. 丑数\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。\n\n<!-- more -->\n\n示例:\n\n输入: n = 10\n输出: 12\n解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。\n说明:  \n\n1 是丑数。\nn 不超过1690。\n注意：本题与主站 264 题相同：https://leetcode-cn.com/problems/ugly-number-ii/\n\n通过次数7,052提交次数11,250\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/chou-shu-lcof\n\n## 1.动态规划\n\n```js\n/**\n * 动态规划\n * dp[i]: 第i个丑数\n * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]\n * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一\n * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)\n * @param {number} n\n * @return {number}\n */\nvar nthUglyNumber = function(n) {\n  let ugly1 = 1;\n  let ugly2 = 1;\n  let ugly3 = 1;\n  let dp = [0, 1];\n  let count = 2;\n  while (count <= n) {\n    let tmp1 = dp[ugly1] * 2;\n    let tmp2 = dp[ugly2] * 3;\n    let tmp3 = dp[ugly3] * 5;\n    dp[count] = Math.min(tmp1, tmp2, tmp3);\n    if (dp[count] === tmp1) ugly1++;\n    if (dp[count] === tmp2) ugly2++;\n    if (dp[count] === tmp3) ugly3++;\n    count++;\n  }\n  return dp[n];\n};\n```\n","slug":"面试题49. 丑数","published":1,"updated":"2023-02-17T23:41:04.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd700235onrbazs8mft","content":"<p>我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: n &#x3D; 10<br>输出: 12<br>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<br>说明:  </p>\n<p>1 是丑数。<br>n 不超过1690。<br>注意：本题与主站 264 题相同：<a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p>\n<p>通过次数7,052提交次数11,250</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/chou-shu-lcof\">https://leetcode-cn.com/problems/chou-shu-lcof</a></p>\n<h2 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1.动态规划\"></a>1.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]: 第i个丑数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nthUglyNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp1 = dp[ugly1] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp2 = dp[ugly2] * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp3 = dp[ugly3] * <span class=\"number\">5</span>;</span><br><span class=\"line\">    dp[count] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(tmp1, tmp2, tmp3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp1) ugly1++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp2) ugly2++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp3) ugly3++;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>我们把只包含因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。</p>","more":"<p>示例:</p>\n<p>输入: n &#x3D; 10<br>输出: 12<br>解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。<br>说明:  </p>\n<p>1 是丑数。<br>n 不超过1690。<br>注意：本题与主站 264 题相同：<a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p>\n<p>通过次数7,052提交次数11,250</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/chou-shu-lcof\">https://leetcode-cn.com/problems/chou-shu-lcof</a></p>\n<h2 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1.动态规划\"></a>1.动态规划</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 动态规划</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]: 第i个丑数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构: 左前最靠近i的因子为2的丑数dp[a], 左前最靠近i的因子为3的丑数dp[b]，左前最靠近i的因子为5的丑数dp[c]</span></span><br><span class=\"line\"><span class=\"comment\"> * dp[i]是丑数，所以肯定是dp[c] * 2或dp[b] * 2或dp[c] * 5得到，当前是要找下一个丑数，所以肯定是取前三者最小之一</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[i] = Math.min(dp[i-1] * 2, dp[i-1] * 3. dp[i-1] * 5)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nthUglyNumber = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ugly3 = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (count &lt;= n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp1 = dp[ugly1] * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp2 = dp[ugly2] * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp3 = dp[ugly3] * <span class=\"number\">5</span>;</span><br><span class=\"line\">    dp[count] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(tmp1, tmp2, tmp3);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp1) ugly1++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp2) ugly2++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[count] === tmp3) ugly3++;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题50. 第一个只出现一次的字符","date":"2020-04-15T23:26:51.000Z","_content":"\n\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。\n\n<!-- more -->\n\n示例:\n\ns = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n \n\n限制：\n\n0 <= s 的长度 <= 50000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\n\n## Hash表记录\n\n```js\n/**\n * @param {string} s\n * @return {character}\n */\nvar firstUniqChar = function(s) {\n  const charMap = {};\n  for (let i = 0; i < s.length; i++) {\n    charMap[s[i]] = charMap[s[i]] ? 2 : 1;\n  }\n  for (let key in charMap) {\n    if (charMap[key] === 1) return key;\n  }\n  return ' ';\n};\n```","source":"_posts/面试题50. 第一个只出现一次的字符.md","raw":"---\ntitle: 面试题50. 第一个只出现一次的字符\ndate: 2020-04-16 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。\n\n<!-- more -->\n\n示例:\n\ns = \"abaccdeff\"\n返回 \"b\"\n\ns = \"\" \n返回 \" \"\n \n\n限制：\n\n0 <= s 的长度 <= 50000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\n\n## Hash表记录\n\n```js\n/**\n * @param {string} s\n * @return {character}\n */\nvar firstUniqChar = function(s) {\n  const charMap = {};\n  for (let i = 0; i < s.length; i++) {\n    charMap[s[i]] = charMap[s[i]] ? 2 : 1;\n  }\n  for (let key in charMap) {\n    if (charMap[key] === 1) return key;\n  }\n  return ' ';\n};\n```","slug":"面试题50. 第一个只出现一次的字符","published":1,"updated":"2023-02-17T23:43:29.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd800275onr3dnl65z6","content":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>s &#x3D; “abaccdeff”<br>返回 “b”</p>\n<p>s &#x3D; “”<br>返回 “ “\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\">https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof</a></p>\n<h2 id=\"Hash表记录\"><a href=\"#Hash表记录\" class=\"headerlink\" title=\"Hash表记录\"></a>Hash表记录</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">character</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> charMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    charMap[s[i]] = charMap[s[i]] ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> charMap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charMap[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。</p>","more":"<p>示例:</p>\n<p>s &#x3D; “abaccdeff”<br>返回 “b”</p>\n<p>s &#x3D; “”<br>返回 “ “\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; s 的长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof\">https://leetcode-cn.com/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof</a></p>\n<h2 id=\"Hash表记录\"><a href=\"#Hash表记录\" class=\"headerlink\" title=\"Hash表记录\"></a>Hash表记录</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">character</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> charMap = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    charMap[s[i]] = charMap[s[i]] ? <span class=\"number\">2</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> charMap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charMap[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题51. 数组中的逆序对","date":"2020-04-16T23:26:51.000Z","_content":"\n\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。\n\n<!-- more -->\n\n示例 1:\n\n输入: [7,5,6,4]\n输出: 5\n \n\n限制：\n\n0 <= 数组长度 <= 50000\n\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof\n\n## 1.暴力双迭代（超时）\n\n```js\n/**\n * 暴力双迭代，时间复杂度O(n^2)\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs1 = function(nums) {\n  if (nums.length < 2) return 0;\n  let count = 0;\n  for (let i = 0; i < nums.length - 1; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] > nums[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n```\n\n## 2.归并排序\n\n```js\n/**\n * 在使用归并排序时，拆分的过程是不会打乱数组，\n * 使用归并排序成左小右大的时，会先将拆分出的两个数组中小的一个进入临时数组\n * 在添加左数组进入临时数组时，假如在此前右数组已经添加了一部分元素进临时数组，说明这些元素是\n * 比当前要添加临时数组的左数组元素要小，又因为这些元素在右数组中，说明这些元素在原数组中是在当前左元素后面的，\n * 换言之，这些元素可以与当前左数组元素可以构成逆序对，那么会构成多少个呢？\n * 只需要统计一下目前右数组已经添加了多少个元素到临时数组就好！\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs2 = function(nums) {\n  if (nums.length < 2) return 0; \n  let count = 0;;\n  // [left, right]\n  function mergeSort(numArr, left, right) {\n\n    if (right - left === 0) {\n      return [numArr[left]];\n    }\n    const mid = left + Math.floor((right - left) / 2);\n    const leftArr = mergeSort(numArr, left, mid);\n    const rightArr = mergeSort(numArr, mid + 1, right);\n    return merge(leftArr, rightArr);\n  }\n  function merge(leftArr, rightArr) {\n    let tmp = [];\n    let lIdx = 0;\n    let rIdx = 0;\n    while (lIdx < leftArr.length && rIdx < rightArr.length) {\n      // 注意这里要加上等号\n      // 因为相同的值不算逆序对，没有等号时，就是将right中的元素添加到tmp中，rIdx就会步进，\n      // 相当于相同值也算进了逆序对\n      if (leftArr[lIdx] <= rightArr[rIdx]) {\n        tmp.push(leftArr[lIdx]);\n        lIdx++;\n        count += rIdx\n      } else {\n        tmp.push(rightArr[rIdx]);\n        rIdx++;\n      }\n    }\n\n    while (lIdx < leftArr.length) {\n      tmp.push(leftArr[lIdx]);\n      lIdx++;\n      count += rIdx;\n    }\n\n    while (rIdx < rightArr.length) {\n      tmp.push(rightArr[rIdx]);\n      rIdx++;\n    }\n\n    return tmp;\n  }\n\n  mergeSort(nums, 0, nums.length - 1);\n  return count;\n}\n```\n\n","source":"_posts/面试题51-数组中的逆序对.md","raw":"---\ntitle: 面试题51. 数组中的逆序对\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。\n\n<!-- more -->\n\n示例 1:\n\n输入: [7,5,6,4]\n输出: 5\n \n\n限制：\n\n0 <= 数组长度 <= 50000\n\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof\n\n## 1.暴力双迭代（超时）\n\n```js\n/**\n * 暴力双迭代，时间复杂度O(n^2)\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs1 = function(nums) {\n  if (nums.length < 2) return 0;\n  let count = 0;\n  for (let i = 0; i < nums.length - 1; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] > nums[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n```\n\n## 2.归并排序\n\n```js\n/**\n * 在使用归并排序时，拆分的过程是不会打乱数组，\n * 使用归并排序成左小右大的时，会先将拆分出的两个数组中小的一个进入临时数组\n * 在添加左数组进入临时数组时，假如在此前右数组已经添加了一部分元素进临时数组，说明这些元素是\n * 比当前要添加临时数组的左数组元素要小，又因为这些元素在右数组中，说明这些元素在原数组中是在当前左元素后面的，\n * 换言之，这些元素可以与当前左数组元素可以构成逆序对，那么会构成多少个呢？\n * 只需要统计一下目前右数组已经添加了多少个元素到临时数组就好！\n * @param {number[]} nums\n * @return {number}\n */\nvar reversePairs2 = function(nums) {\n  if (nums.length < 2) return 0; \n  let count = 0;;\n  // [left, right]\n  function mergeSort(numArr, left, right) {\n\n    if (right - left === 0) {\n      return [numArr[left]];\n    }\n    const mid = left + Math.floor((right - left) / 2);\n    const leftArr = mergeSort(numArr, left, mid);\n    const rightArr = mergeSort(numArr, mid + 1, right);\n    return merge(leftArr, rightArr);\n  }\n  function merge(leftArr, rightArr) {\n    let tmp = [];\n    let lIdx = 0;\n    let rIdx = 0;\n    while (lIdx < leftArr.length && rIdx < rightArr.length) {\n      // 注意这里要加上等号\n      // 因为相同的值不算逆序对，没有等号时，就是将right中的元素添加到tmp中，rIdx就会步进，\n      // 相当于相同值也算进了逆序对\n      if (leftArr[lIdx] <= rightArr[rIdx]) {\n        tmp.push(leftArr[lIdx]);\n        lIdx++;\n        count += rIdx\n      } else {\n        tmp.push(rightArr[rIdx]);\n        rIdx++;\n      }\n    }\n\n    while (lIdx < leftArr.length) {\n      tmp.push(leftArr[lIdx]);\n      lIdx++;\n      count += rIdx;\n    }\n\n    while (rIdx < rightArr.length) {\n      tmp.push(rightArr[rIdx]);\n      rIdx++;\n    }\n\n    return tmp;\n  }\n\n  mergeSort(nums, 0, nums.length - 1);\n  return count;\n}\n```\n\n","slug":"面试题51-数组中的逆序对","published":1,"updated":"2023-02-18T00:17:06.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd9002a5onrfnflcj11","content":"<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [7,5,6,4]<br>输出: 5\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof</a></p>\n<h2 id=\"1-暴力双迭代（超时）\"><a href=\"#1-暴力双迭代（超时）\" class=\"headerlink\" title=\"1.暴力双迭代（超时）\"></a>1.暴力双迭代（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 暴力双迭代，时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reversePairs1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在使用归并排序时，拆分的过程是不会打乱数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用归并排序成左小右大的时，会先将拆分出的两个数组中小的一个进入临时数组</span></span><br><span class=\"line\"><span class=\"comment\"> * 在添加左数组进入临时数组时，假如在此前右数组已经添加了一部分元素进临时数组，说明这些元素是</span></span><br><span class=\"line\"><span class=\"comment\"> * 比当前要添加临时数组的左数组元素要小，又因为这些元素在右数组中，说明这些元素在原数组中是在当前左元素后面的，</span></span><br><span class=\"line\"><span class=\"comment\"> * 换言之，这些元素可以与当前左数组元素可以构成逆序对，那么会构成多少个呢？</span></span><br><span class=\"line\"><span class=\"comment\"> * 只需要统计一下目前右数组已经添加了多少个元素到临时数组就好！</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reversePairs2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">numArr, left, right</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right - left === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [numArr[left]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftArr = <span class=\"title function_\">mergeSort</span>(numArr, left, mid);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightArr = <span class=\"title function_\">mergeSort</span>(numArr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(leftArr, rightArr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">leftArr, rightArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lIdx &lt; leftArr.<span class=\"property\">length</span> &amp;&amp; rIdx &lt; rightArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注意这里要加上等号</span></span><br><span class=\"line\">      <span class=\"comment\">// 因为相同的值不算逆序对，没有等号时，就是将right中的元素添加到tmp中，rIdx就会步进，</span></span><br><span class=\"line\">      <span class=\"comment\">// 相当于相同值也算进了逆序对</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (leftArr[lIdx] &lt;= rightArr[rIdx]) &#123;</span><br><span class=\"line\">        tmp.<span class=\"title function_\">push</span>(leftArr[lIdx]);</span><br><span class=\"line\">        lIdx++;</span><br><span class=\"line\">        count += rIdx</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tmp.<span class=\"title function_\">push</span>(rightArr[rIdx]);</span><br><span class=\"line\">        rIdx++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lIdx &lt; leftArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      tmp.<span class=\"title function_\">push</span>(leftArr[lIdx]);</span><br><span class=\"line\">      lIdx++;</span><br><span class=\"line\">      count += rIdx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rIdx &lt; rightArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      tmp.<span class=\"title function_\">push</span>(rightArr[rIdx]);</span><br><span class=\"line\">      rIdx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">mergeSort</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>","more":"<p>示例 1:</p>\n<p>输入: [7,5,6,4]<br>输出: 5\n </p>\n<p>限制：</p>\n<p>0 &lt;&#x3D; 数组长度 &lt;&#x3D; 50000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof</a></p>\n<h2 id=\"1-暴力双迭代（超时）\"><a href=\"#1-暴力双迭代（超时）\" class=\"headerlink\" title=\"1.暴力双迭代（超时）\"></a>1.暴力双迭代（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 暴力双迭代，时间复杂度O(n^2)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reversePairs1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; nums.<span class=\"property\">length</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在使用归并排序时，拆分的过程是不会打乱数组，</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用归并排序成左小右大的时，会先将拆分出的两个数组中小的一个进入临时数组</span></span><br><span class=\"line\"><span class=\"comment\"> * 在添加左数组进入临时数组时，假如在此前右数组已经添加了一部分元素进临时数组，说明这些元素是</span></span><br><span class=\"line\"><span class=\"comment\"> * 比当前要添加临时数组的左数组元素要小，又因为这些元素在右数组中，说明这些元素在原数组中是在当前左元素后面的，</span></span><br><span class=\"line\"><span class=\"comment\"> * 换言之，这些元素可以与当前左数组元素可以构成逆序对，那么会构成多少个呢？</span></span><br><span class=\"line\"><span class=\"comment\"> * 只需要统计一下目前右数组已经添加了多少个元素到临时数组就好！</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reversePairs2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.<span class=\"property\">length</span> &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeSort</span>(<span class=\"params\">numArr, left, right</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right - left === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [numArr[left]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftArr = <span class=\"title function_\">mergeSort</span>(numArr, left, mid);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightArr = <span class=\"title function_\">mergeSort</span>(numArr, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">merge</span>(leftArr, rightArr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">merge</span>(<span class=\"params\">leftArr, rightArr</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tmp = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lIdx &lt; leftArr.<span class=\"property\">length</span> &amp;&amp; rIdx &lt; rightArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注意这里要加上等号</span></span><br><span class=\"line\">      <span class=\"comment\">// 因为相同的值不算逆序对，没有等号时，就是将right中的元素添加到tmp中，rIdx就会步进，</span></span><br><span class=\"line\">      <span class=\"comment\">// 相当于相同值也算进了逆序对</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (leftArr[lIdx] &lt;= rightArr[rIdx]) &#123;</span><br><span class=\"line\">        tmp.<span class=\"title function_\">push</span>(leftArr[lIdx]);</span><br><span class=\"line\">        lIdx++;</span><br><span class=\"line\">        count += rIdx</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tmp.<span class=\"title function_\">push</span>(rightArr[rIdx]);</span><br><span class=\"line\">        rIdx++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lIdx &lt; leftArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      tmp.<span class=\"title function_\">push</span>(leftArr[lIdx]);</span><br><span class=\"line\">      lIdx++;</span><br><span class=\"line\">      count += rIdx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (rIdx &lt; rightArr.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      tmp.<span class=\"title function_\">push</span>(rightArr[rIdx]);</span><br><span class=\"line\">      rIdx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">mergeSort</span>(nums, <span class=\"number\">0</span>, nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题52. 两个链表的第一个公共节点","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表：\n\n![](160_statement.png)\n\n在节点 c1 开始相交。\n\n<!-- more -->\n\n \n\n示例 1：\n\n![img](160_example_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\n\n示例 2：\n\n![img](160_example_2.png)\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\n\n示例 3：\n\n![img](160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n\n\n注意：\n\n如果两个链表没有交点，返回 null.\n在返回结果后，两个链表仍须保持原有的结构。\n可假定整个链表结构中没有循环。\n程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n\n## 计算长短链表差值\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * 1.遍历headA, headB，分别计算长度countA, countB\n * 2.根据countA, countB判断长链表long和短链表short，相差长度k\n * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  if (!headA || !headB) return null;\n  if (headA === headB) return headA;\n  let curA = headA;\n  let curB = headB;\n  let countA = 0;\n  let countB = 0;  \n  // 计算A链表和B链表的长度\n  while (curA.next || curB.next) {\n    if (curA.next) {\n      countA++;\n      curA = curA.next;\n    }\n    if (curB.next) {\n      countB++;\n      curB = curB.next;\n    }\n  }\n  if (curA !== curB) return null;\n\n  let long;\n  let short;\n  let k;\n  if (countB > countA) {\n    long = headB;\n    short = headA;\n    k = countB - countA;\n  } else {\n    long = headA;\n    short = headB;\n    k = countA - countB;\n  }\n  while (long) {\n    long = long.next;\n    if (k) {\n      k--;\n    } else {\n      short = short.next;\n    }\n    if (long === short) break;\n  }\n  return long;\n};\n```\n","source":"_posts/面试题52. 两个链表的第一个公共节点.md","raw":"---\ntitle: 面试题52. 两个链表的第一个公共节点\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入两个链表，找出它们的第一个公共节点。\n\n如下面的两个链表：\n\n![](160_statement.png)\n\n在节点 c1 开始相交。\n\n<!-- more -->\n\n \n\n示例 1：\n\n![img](160_example_1.png)\n\n输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n\n\n示例 2：\n\n![img](160_example_2.png)\n\n输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n\n\n示例 3：\n\n![img](160_example_3.png)\n\n输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n\n\n注意：\n\n如果两个链表没有交点，返回 null.\n在返回结果后，两个链表仍须保持原有的结构。\n可假定整个链表结构中没有循环。\n程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n本题与主站 160 题相同：https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\n\n## 计算长短链表差值\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n\n/**\n * 1.遍历headA, headB，分别计算长度countA, countB\n * 2.根据countA, countB判断长链表long和短链表short，相差长度k\n * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */\nvar getIntersectionNode = function(headA, headB) {\n  if (!headA || !headB) return null;\n  if (headA === headB) return headA;\n  let curA = headA;\n  let curB = headB;\n  let countA = 0;\n  let countB = 0;  \n  // 计算A链表和B链表的长度\n  while (curA.next || curB.next) {\n    if (curA.next) {\n      countA++;\n      curA = curA.next;\n    }\n    if (curB.next) {\n      countB++;\n      curB = curB.next;\n    }\n  }\n  if (curA !== curB) return null;\n\n  let long;\n  let short;\n  let k;\n  if (countB > countA) {\n    long = headB;\n    short = headA;\n    k = countB - countA;\n  } else {\n    long = headA;\n    short = headB;\n    k = countA - countB;\n  }\n  while (long) {\n    long = long.next;\n    if (k) {\n      k--;\n    } else {\n      short = short.next;\n    }\n    if (long === short) break;\n  }\n  return long;\n};\n```\n","slug":"面试题52. 两个链表的第一个公共节点","published":1,"updated":"2023-02-18T00:00:14.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcd9002d5onr0ehx5qsw","content":"<p>输入两个链表，找出它们的第一个公共节点。</p>\n<p>如下面的两个链表：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_statement.png\"></p>\n<p>在节点 c1 开始相交。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Reference of the node with value &#x3D; 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p>\n<p>示例 2：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Reference of the node with value &#x3D; 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p>\n<p>示例 3：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p>\n<p>注意：</p>\n<p>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br>本题与主站 160 题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>\n<h2 id=\"计算长短链表差值\"><a href=\"#计算长短链表差值\" class=\"headerlink\" title=\"计算长短链表差值\"></a>计算长短链表差值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.遍历headA, headB，分别计算长度countA, countB</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据countA, countB判断长链表long和短链表short，相差长度k</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!headA || !headB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headA === headB) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curA = headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curB = headB;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countA = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countB = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 计算A链表和B链表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curA.<span class=\"property\">next</span> || curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curA.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countA++;</span><br><span class=\"line\">      curA = curA.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countB++;</span><br><span class=\"line\">      curB = curB.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curA !== curB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> long;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> short;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> k;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (countB &gt; countA) &#123;</span><br><span class=\"line\">    long = headB;</span><br><span class=\"line\">    short = headA;</span><br><span class=\"line\">    k = countB - countA;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    long = headA;</span><br><span class=\"line\">    short = headB;</span><br><span class=\"line\">    k = countA - countB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (long) &#123;</span><br><span class=\"line\">    long = long.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k) &#123;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      short = short.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (long === short) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入两个链表，找出它们的第一个公共节点。</p>\n<p>如下面的两个链表：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_statement.png\"></p>\n<p>在节点 c1 开始相交。</p>","more":"<p>示例 1：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_1.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3<br>输出：Reference of the node with value &#x3D; 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p>\n<p>示例 2：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_2.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1<br>输出：Reference of the node with value &#x3D; 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p>\n<p>示例 3：</p>\n<p><img src=\"/blog/2020/04/16/%E9%9D%A2%E8%AF%95%E9%A2%9852.%20%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/160_example_3.png\" alt=\"img\"></p>\n<p>输入：intersectVal &#x3D; 0, listA &#x3D; [2,6,4], listB &#x3D; [1,5], skipA &#x3D; 3, skipB &#x3D; 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p>\n<p>注意：</p>\n<p>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。<br>本题与主站 160 题相同：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p>\n<h2 id=\"计算长短链表差值\"><a href=\"#计算长短链表差值\" class=\"headerlink\" title=\"计算长短链表差值\"></a>计算长短链表差值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.遍历headA, headB，分别计算长度countA, countB</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据countA, countB判断长链表long和短链表short，相差长度k</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.让long先步进k步，然后long和short一起步进，直到long.next和short.next相等就break, long或short就是公共节点</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headA</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ListNode</span>&#125; <span class=\"variable\">headB</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">ListNode</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> getIntersectionNode = <span class=\"keyword\">function</span>(<span class=\"params\">headA, headB</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!headA || !headB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (headA === headB) <span class=\"keyword\">return</span> headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curA = headA;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curB = headB;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countA = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> countB = <span class=\"number\">0</span>;  </span><br><span class=\"line\">  <span class=\"comment\">// 计算A链表和B链表的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curA.<span class=\"property\">next</span> || curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curA.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countA++;</span><br><span class=\"line\">      curA = curA.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curB.<span class=\"property\">next</span>) &#123;</span><br><span class=\"line\">      countB++;</span><br><span class=\"line\">      curB = curB.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (curA !== curB) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> long;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> short;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> k;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (countB &gt; countA) &#123;</span><br><span class=\"line\">    long = headB;</span><br><span class=\"line\">    short = headA;</span><br><span class=\"line\">    k = countB - countA;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    long = headA;</span><br><span class=\"line\">    short = headB;</span><br><span class=\"line\">    k = countA - countB;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (long) &#123;</span><br><span class=\"line\">    long = long.<span class=\"property\">next</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k) &#123;</span><br><span class=\"line\">      k--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      short = short.<span class=\"property\">next</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (long === short) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> long;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题53 - II. 0～n-1中缺失的数字","date":"2020-04-15T23:33:59.000Z","_content":"\n\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n<!-- more -->\n\n示例 1:\n\n输入: [0,1,3]\n输出: 2\n示例 2:\n\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n \n\n限制：\n\n1 <= 数组长度 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\n\n## 1.二分查找\n\n```js\n/**\n * 二分查找\n * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n  if (!nums.length) return 0;\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    let mid = left + Math.floor((right - left) / 2);\n    if (\n      nums[mid] !== mid\n      && (nums[mid - 1] === mid - 1 || nums[mid - 1] === undefined)\n    ) {\n      return mid;\n    }\n    if (nums[mid] === mid) {\n      left = mid + 1;\n\n    } else {\n      right = mid - 1;\n    }\n  }\n  return nums.length;\n};\n```\n","source":"_posts/面试题53 - II. 0～n-1中缺失的数字.md","raw":"---\ntitle: 面试题53 - II. 0～n-1中缺失的数字\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。\n\n<!-- more -->\n\n示例 1:\n\n输入: [0,1,3]\n输出: 2\n示例 2:\n\n输入: [0,1,2,3,4,5,6,7,9]\n输出: 8\n \n\n限制：\n\n1 <= 数组长度 <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\n\n## 1.二分查找\n\n```js\n/**\n * 二分查找\n * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n\n * @param {number[]} nums\n * @return {number}\n */\nvar missingNumber = function(nums) {\n  if (!nums.length) return 0;\n  let left = 0;\n  let right = nums.length - 1;\n\n  while (left <= right) {\n    let mid = left + Math.floor((right - left) / 2);\n    if (\n      nums[mid] !== mid\n      && (nums[mid - 1] === mid - 1 || nums[mid - 1] === undefined)\n    ) {\n      return mid;\n    }\n    if (nums[mid] === mid) {\n      left = mid + 1;\n\n    } else {\n      right = mid - 1;\n    }\n  }\n  return nums.length;\n};\n```\n","slug":"面试题53 - II. 0～n-1中缺失的数字","published":1,"updated":"2023-02-18T00:09:28.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcda002g5onr5jtm78g0","content":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p>\n<p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof</a></p>\n<h2 id=\"1-二分查找\"><a href=\"#1-二分查找\" class=\"headerlink\" title=\"1.二分查找\"></a>1.二分查找</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nums[mid] !== mid</span><br><span class=\"line\">      &amp;&amp; (nums[mid - <span class=\"number\">1</span>] === mid - <span class=\"number\">1</span> || nums[mid - <span class=\"number\">1</span>] === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p>","more":"<p>示例 1:</p>\n<p>输入: [0,1,3]<br>输出: 2<br>示例 2:</p>\n<p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 数组长度 &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof\">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof</a></p>\n<h2 id=\"1-二分查找\"><a href=\"#1-二分查找\" class=\"headerlink\" title=\"1.二分查找\"></a>1.二分查找</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 二分查找</span></span><br><span class=\"line\"><span class=\"comment\"> * 注意点：每个数字都在范围0～n-1之内，最大值不超过n，所以若给的nums是一个递增无缺少的序列，则是缺少n</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> missingNumber = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = nums.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> mid = left + <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((right - left) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      nums[mid] !== mid</span><br><span class=\"line\">      &amp;&amp; (nums[mid - <span class=\"number\">1</span>] === mid - <span class=\"number\">1</span> || nums[mid - <span class=\"number\">1</span>] === <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[mid] === mid) &#123;</span><br><span class=\"line\">      left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题55 - II. 平衡二叉树","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n<!-- more -->\n\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n示例 2:\n\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n返回 false 。\n\n \n\n限制：\n\n1 <= 树的结点个数 <= 10000\n注意：本题与主站 110 题相同：https://leetcode-cn.com/problems/balanced-binary-tree/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\n\n## 1.深度优先遍历（后序）\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 深度优先（后序递归遍历）计算左右子树的深度\n * 判断左右子树深度差是否超过1\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced1 = function(root) {\n  let res = true;\n  dfs(root);\n  function dfs(node) {\n    if (!node) return 0;\n    const lDeep = dfs(node.left) + 1;\n    const rDeep = dfs(node.right) + 1;\n    if (Math.abs(lDeep - rDeep) > 1) {\n      res = false;\n    }\n    return Math.max(lDeep, rDeep);\n  }\n  return res;\n};\n\nvar isBalanced = isBalanced1;\n```\n","source":"_posts/面试题55 - II. 平衡二叉树.md","raw":"---\ntitle: 面试题55 - II. 平衡二叉树\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。\n\n<!-- more -->\n\n\n示例 1:\n\n给定二叉树 [3,9,20,null,null,15,7]\n```\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n```\n返回 true 。\n\n示例 2:\n\n给定二叉树 [1,2,2,3,3,null,null,4,4]\n```\n       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n```\n返回 false 。\n\n \n\n限制：\n\n1 <= 树的结点个数 <= 10000\n注意：本题与主站 110 题相同：https://leetcode-cn.com/problems/balanced-binary-tree/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\n\n## 1.深度优先遍历（后序）\n\n```js\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * 深度优先（后序递归遍历）计算左右子树的深度\n * 判断左右子树深度差是否超过1\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced1 = function(root) {\n  let res = true;\n  dfs(root);\n  function dfs(node) {\n    if (!node) return 0;\n    const lDeep = dfs(node.left) + 1;\n    const rDeep = dfs(node.right) + 1;\n    if (Math.abs(lDeep - rDeep) > 1) {\n      res = false;\n    }\n    return Math.max(lDeep, rDeep);\n  }\n  return res;\n};\n\nvar isBalanced = isBalanced1;\n```\n","slug":"面试题55 - II. 平衡二叉树","published":1,"updated":"2023-02-18T00:07:20.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdb002j5onr551r7znr","content":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>\n<span id=\"more\"></span>\n\n\n<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>返回 true 。</p>\n<p>示例 2:</p>\n<p>给定二叉树 [1,2,2,3,3,null,null,4,4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      1</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    2   2</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   4</span><br></pre></td></tr></table></figure>\n<p>返回 false 。</p>\n<p> </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 树的结点个数 &lt;&#x3D; 10000<br>注意：本题与主站 110 题相同：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\">https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof</a></p>\n<h2 id=\"1-深度优先遍历（后序）\"><a href=\"#1-深度优先遍历（后序）\" class=\"headerlink\" title=\"1.深度优先遍历（后序）\"></a>1.深度优先遍历（后序）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度优先（后序递归遍历）计算左右子树的深度</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断左右子树深度差是否超过1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced1 = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">left</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">right</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(lDeep - rDeep) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(lDeep, rDeep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = isBalanced1;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>","more":"<p>示例 1:</p>\n<p>给定二叉树 [3,9,20,null,null,15,7]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>返回 true 。</p>\n<p>示例 2:</p>\n<p>给定二叉树 [1,2,2,3,3,null,null,4,4]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      1</span><br><span class=\"line\">     / \\</span><br><span class=\"line\">    2   2</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  3   3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">4   4</span><br></pre></td></tr></table></figure>\n<p>返回 false 。</p>\n<p> </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; 树的结点个数 &lt;&#x3D; 10000<br>注意：本题与主站 110 题相同：<a href=\"https://leetcode-cn.com/problems/balanced-binary-tree/\">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof\">https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof</a></p>\n<h2 id=\"1-深度优先遍历（后序）\"><a href=\"#1-深度优先遍历（后序）\" class=\"headerlink\" title=\"1.深度优先遍历（后序）\"></a>1.深度优先遍历（后序）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"> * function TreeNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.left = this.right = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 深度优先（后序递归遍历）计算左右子树的深度</span></span><br><span class=\"line\"><span class=\"comment\"> * 判断左右子树深度差是否超过1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">TreeNode</span>&#125; <span class=\"variable\">root</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced1 = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"title function_\">dfs</span>(root);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">node</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!node) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">left</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rDeep = <span class=\"title function_\">dfs</span>(node.<span class=\"property\">right</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(lDeep - rDeep) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(lDeep, rDeep);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> isBalanced = isBalanced1;</span><br></pre></td></tr></table></figure>"},{"title":"面试题56 - II. 数组中数字出现的次数 II","date":"2020-04-16T23:26:51.000Z","_content":"\n\n在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n<!-- more -->\n\n示例 1：\n\n输入：nums = [3,4,3,3]\n输出：4\n示例 2：\n\n输入：nums = [9,1,7,9,7,9,7]\n输出：1\n \n\n限制：\n\n1 <= nums.length <= 10000\n1 <= nums[i] < 2^31\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof\n\n## 1.Hash表去重\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumberHash = function(nums) {\n  const record = {};\n  for (const num of nums) {\n    if (!record[num]) {\n      record[num] = 1;\n    } else {\n      record[num]++;\n    }\n  }\n  for (let key in record) {\n    if (record[key] === 1) return key;\n  }\n};\n```\n\n## 2.位运算计算目标数\n\n```js\n/**\n * 计算目标数的二进制上的每一位（0/1），注意是计算出，不是过滤出的\n * 1.使用2的冥值去探测各个二进制位上的情况，设要找的书是tar，设nums中，二进制第i位上的值是1的数有k个，k肯定是满足：\n * 1.1 当tar的二进制的第i位是1,则k=3n+1, (n = 0, 1, ..., nums,length)\n * 1.2 当tar的二进制的第i位是0,则k=3n, (n = 0, 1, ..., nums,length)\n * 2.根据1.1和1.2就可以去探测tar每一位具体是0还是1\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumberBit1 = function(nums) {\n  const tar = [];\n  // 题目指出：1 <= nums[i] < 2^31\n  // bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次\n  for (let i = 0; i < 31; i++) {\n    let count = 0;\n    // bit:\n    // i= 0: 1\n    // i= 1: 10\n    // i= 2: 100\n    // ...\n    const bit = 1 << i;\n    for (const num of nums) {\n      if ((num & bit) !== 0) {\n        count++;\n      }\n    }\n    // count % 3 !== 0, 说明tar左起第i位是\n    tar.unshift(count % 3 !== 0 ? 1 : 0);\n  }\n  return Number.parseInt(tar.join(''), 2);\n};\n```\n\n## 3.完全位运算\n\n与“2.位运算计算目标数”不同，不是使用记录目标书二进制情况，而是使用按位或直接计算。\n\n```js\nif (count % 3 !== 0) tar = tar | bit;\n```\n\n```js\nvar singleNumberBit2 = function(nums) {\n  let tar = 0;\n  // 题目指出：1 <= nums[i] < 2^31\n  // bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次\n  for (let i = 0; i < 31; i++) {\n    let count = 0;\n    const bit = 1 << i;\n    for (const num of nums) {\n      if ((num & bit) !== 0) {\n        count++;\n      }\n    }\n    // |:按位或，只要同一位不为0都得1\n    if (count % 3 !== 0) tar = tar | bit;\n  }\n  return tar;\n}\n```\n","source":"_posts/面试题56-II-数组中数字出现的次数-II.md","raw":"---\ntitle: 面试题56 - II. 数组中数字出现的次数 II\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。\n\n<!-- more -->\n\n示例 1：\n\n输入：nums = [3,4,3,3]\n输出：4\n示例 2：\n\n输入：nums = [9,1,7,9,7,9,7]\n输出：1\n \n\n限制：\n\n1 <= nums.length <= 10000\n1 <= nums[i] < 2^31\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof\n\n## 1.Hash表去重\n\n```js\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumberHash = function(nums) {\n  const record = {};\n  for (const num of nums) {\n    if (!record[num]) {\n      record[num] = 1;\n    } else {\n      record[num]++;\n    }\n  }\n  for (let key in record) {\n    if (record[key] === 1) return key;\n  }\n};\n```\n\n## 2.位运算计算目标数\n\n```js\n/**\n * 计算目标数的二进制上的每一位（0/1），注意是计算出，不是过滤出的\n * 1.使用2的冥值去探测各个二进制位上的情况，设要找的书是tar，设nums中，二进制第i位上的值是1的数有k个，k肯定是满足：\n * 1.1 当tar的二进制的第i位是1,则k=3n+1, (n = 0, 1, ..., nums,length)\n * 1.2 当tar的二进制的第i位是0,则k=3n, (n = 0, 1, ..., nums,length)\n * 2.根据1.1和1.2就可以去探测tar每一位具体是0还是1\n * @param {number[]} nums\n * @return {number}\n */\nvar singleNumberBit1 = function(nums) {\n  const tar = [];\n  // 题目指出：1 <= nums[i] < 2^31\n  // bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次\n  for (let i = 0; i < 31; i++) {\n    let count = 0;\n    // bit:\n    // i= 0: 1\n    // i= 1: 10\n    // i= 2: 100\n    // ...\n    const bit = 1 << i;\n    for (const num of nums) {\n      if ((num & bit) !== 0) {\n        count++;\n      }\n    }\n    // count % 3 !== 0, 说明tar左起第i位是\n    tar.unshift(count % 3 !== 0 ? 1 : 0);\n  }\n  return Number.parseInt(tar.join(''), 2);\n};\n```\n\n## 3.完全位运算\n\n与“2.位运算计算目标数”不同，不是使用记录目标书二进制情况，而是使用按位或直接计算。\n\n```js\nif (count % 3 !== 0) tar = tar | bit;\n```\n\n```js\nvar singleNumberBit2 = function(nums) {\n  let tar = 0;\n  // 题目指出：1 <= nums[i] < 2^31\n  // bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次\n  for (let i = 0; i < 31; i++) {\n    let count = 0;\n    const bit = 1 << i;\n    for (const num of nums) {\n      if ((num & bit) !== 0) {\n        count++;\n      }\n    }\n    // |:按位或，只要同一位不为0都得1\n    if (count % 3 !== 0) tar = tar | bit;\n  }\n  return tar;\n}\n```\n","slug":"面试题56-II-数组中数字出现的次数-II","published":1,"updated":"2023-02-18T00:17:58.640Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdc002m5onrevn3feby","content":"<p>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,4,3,3]<br>输出：4<br>示例 2：</p>\n<p>输入：nums &#x3D; [9,1,7,9,7,9,7]<br>输出：1\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 10000<br>1 &lt;&#x3D; nums[i] &lt; 2^31</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof</a></p>\n<h2 id=\"1-Hash表去重\"><a href=\"#1-Hash表去重\" class=\"headerlink\" title=\"1.Hash表去重\"></a>1.Hash表去重</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumberHash = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) &#123;</span><br><span class=\"line\">      record[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      record[num]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> record) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-位运算计算目标数\"><a href=\"#2-位运算计算目标数\" class=\"headerlink\" title=\"2.位运算计算目标数\"></a>2.位运算计算目标数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算目标数的二进制上的每一位（0/1），注意是计算出，不是过滤出的</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用2的冥值去探测各个二进制位上的情况，设要找的书是tar，设nums中，二进制第i位上的值是1的数有k个，k肯定是满足：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.1 当tar的二进制的第i位是1,则k=3n+1, (n = 0, 1, ..., nums,length)</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.2 当tar的二进制的第i位是0,则k=3n, (n = 0, 1, ..., nums,length)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据1.1和1.2就可以去探测tar每一位具体是0还是1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumberBit1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tar = [];</span><br><span class=\"line\">  <span class=\"comment\">// 题目指出：1 &lt;= nums[i] &lt; 2^31</span></span><br><span class=\"line\">  <span class=\"comment\">// bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">31</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// bit:</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 0: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 1: 10</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 2: 100</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bit = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((num &amp; bit) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// count % 3 !== 0, 说明tar左起第i位是</span></span><br><span class=\"line\">    tar.<span class=\"title function_\">unshift</span>(count % <span class=\"number\">3</span> !== <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(tar.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-完全位运算\"><a href=\"#3-完全位运算\" class=\"headerlink\" title=\"3.完全位运算\"></a>3.完全位运算</h2><p>与“2.位运算计算目标数”不同，不是使用记录目标书二进制情况，而是使用按位或直接计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (count % <span class=\"number\">3</span> !== <span class=\"number\">0</span>) tar = tar | bit;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleNumberBit2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tar = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 题目指出：1 &lt;= nums[i] &lt; 2^31</span></span><br><span class=\"line\">  <span class=\"comment\">// bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">31</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bit = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((num &amp; bit) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// |:按位或，只要同一位不为0都得1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count % <span class=\"number\">3</span> !== <span class=\"number\">0</span>) tar = tar | bit;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p>","more":"<p>示例 1：</p>\n<p>输入：nums &#x3D; [3,4,3,3]<br>输出：4<br>示例 2：</p>\n<p>输入：nums &#x3D; [9,1,7,9,7,9,7]<br>输出：1\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 10000<br>1 &lt;&#x3D; nums[i] &lt; 2^31</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof\">https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof</a></p>\n<h2 id=\"1-Hash表去重\"><a href=\"#1-Hash表去重\" class=\"headerlink\" title=\"1.Hash表去重\"></a>1.Hash表去重</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumberHash = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) &#123;</span><br><span class=\"line\">      record[num] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      record[num]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> record) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record[key] === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-位运算计算目标数\"><a href=\"#2-位运算计算目标数\" class=\"headerlink\" title=\"2.位运算计算目标数\"></a>2.位运算计算目标数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 计算目标数的二进制上的每一位（0/1），注意是计算出，不是过滤出的</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用2的冥值去探测各个二进制位上的情况，设要找的书是tar，设nums中，二进制第i位上的值是1的数有k个，k肯定是满足：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.1 当tar的二进制的第i位是1,则k=3n+1, (n = 0, 1, ..., nums,length)</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.2 当tar的二进制的第i位是0,则k=3n, (n = 0, 1, ..., nums,length)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.根据1.1和1.2就可以去探测tar每一位具体是0还是1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> singleNumberBit1 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tar = [];</span><br><span class=\"line\">  <span class=\"comment\">// 题目指出：1 &lt;= nums[i] &lt; 2^31</span></span><br><span class=\"line\">  <span class=\"comment\">// bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">31</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// bit:</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 0: 1</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 1: 10</span></span><br><span class=\"line\">    <span class=\"comment\">// i= 2: 100</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> bit = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((num &amp; bit) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// count % 3 !== 0, 说明tar左起第i位是</span></span><br><span class=\"line\">    tar.<span class=\"title function_\">unshift</span>(count % <span class=\"number\">3</span> !== <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(tar.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-完全位运算\"><a href=\"#3-完全位运算\" class=\"headerlink\" title=\"3.完全位运算\"></a>3.完全位运算</h2><p>与“2.位运算计算目标数”不同，不是使用记录目标书二进制情况，而是使用按位或直接计算。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (count % <span class=\"number\">3</span> !== <span class=\"number\">0</span>) tar = tar | bit;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> singleNumberBit2 = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tar = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 题目指出：1 &lt;= nums[i] &lt; 2^31</span></span><br><span class=\"line\">  <span class=\"comment\">// bit是由1左移得到，所以最多可以移30位，因为第一次是移动0位，所以可以遍历31次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">31</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> bit = <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((num &amp; bit) !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// |:按位或，只要同一位不为0都得1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count % <span class=\"number\">3</span> !== <span class=\"number\">0</span>) tar = tar | bit;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题57 - II. 和为s的连续正数序列","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n<!-- more -->\n \n\n示例 1：\n\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n示例 2：\n\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n \n\n限制：\n\n1 <= target <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n\n## 使用滑动窗口（双指针变种）\n\n```js\n/**\n * 使用滑动窗口（双指针变种）\n * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target\n * 1.当sum等于target，则保存win副本，然后继续右移idx\n * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）\n * @param {number} target\n * @return {number[][]}\n */\nvar findContinuousSequence = function(target) {\n  if (target < 2) return [];\n  let idx = 1;\n  let sum = 0;\n  let win = [];\n  const res = [];\n  const max = Math.ceil(target / 2);\n  while (idx <= max) {\n    if (sum < target) {\n      sum += idx;\n      win.push(idx);\n      idx++;\n    }\n\n    if (sum > target) {\n      sum -= win.shift();\n    }\n\n    if (sum === target) {\n      res.push(win.slice(0));\n      sum -= win.shift();\n    }\n  }\n  return res;\n};\n```\n","source":"_posts/面试题57 - II. 和为s的连续正数序列.md","raw":"---\ntitle: 面试题57 - II. 和为s的连续正数序列\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。\n\n序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。\n\n<!-- more -->\n \n\n示例 1：\n\n输入：target = 9\n输出：[[2,3,4],[4,5]]\n示例 2：\n\n输入：target = 15\n输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n \n\n限制：\n\n1 <= target <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\n\n## 使用滑动窗口（双指针变种）\n\n```js\n/**\n * 使用滑动窗口（双指针变种）\n * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target\n * 1.当sum等于target，则保存win副本，然后继续右移idx\n * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）\n * @param {number} target\n * @return {number[][]}\n */\nvar findContinuousSequence = function(target) {\n  if (target < 2) return [];\n  let idx = 1;\n  let sum = 0;\n  let win = [];\n  const res = [];\n  const max = Math.ceil(target / 2);\n  while (idx <= max) {\n    if (sum < target) {\n      sum += idx;\n      win.push(idx);\n      idx++;\n    }\n\n    if (sum > target) {\n      sum -= win.shift();\n    }\n\n    if (sum === target) {\n      res.push(win.slice(0));\n      sum -= win.shift();\n    }\n  }\n  return res;\n};\n```\n","slug":"面试题57 - II. 和为s的连续正数序列","published":1,"updated":"2023-02-17T23:49:12.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdd002p5onr1gtk808f","content":"<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>\n<span id=\"more\"></span>\n<p> </p>\n<p>示例 1：</p>\n<p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]<br>示例 2：</p>\n<p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; target &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a></p>\n<h2 id=\"使用滑动窗口（双指针变种）\"><a href=\"#使用滑动窗口（双指针变种）\" class=\"headerlink\" title=\"使用滑动窗口（双指针变种）\"></a>使用滑动窗口（双指针变种）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用滑动窗口（双指针变种）</span></span><br><span class=\"line\"><span class=\"comment\"> * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当sum等于target，则保存win副本，然后继续右移idx</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> win = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(target / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (idx &lt;= max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">      sum += idx;</span><br><span class=\"line\">      win.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(win.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p>\n<p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>","more":"<p> </p>\n<p>示例 1：</p>\n<p>输入：target &#x3D; 9<br>输出：[[2,3,4],[4,5]]<br>示例 2：</p>\n<p>输入：target &#x3D; 15<br>输出：[[1,2,3,4,5],[4,5,6],[7,8]]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; target &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof\">https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof</a></p>\n<h2 id=\"使用滑动窗口（双指针变种）\"><a href=\"#使用滑动窗口（双指针变种）\" class=\"headerlink\" title=\"使用滑动窗口（双指针变种）\"></a>使用滑动窗口（双指针变种）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用滑动窗口（双指针变种）</span></span><br><span class=\"line\"><span class=\"comment\"> * idx向右移动，同时累加当前总数sum，win入栈idx，直到sum大于或等于target</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.当sum等于target，则保存win副本，然后继续右移idx</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.当sum大于target，则出队win头元素tmp，并sum -= tmp（相当于右移win的边界）</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">target</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[][]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findContinuousSequence = <span class=\"keyword\">function</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (target &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> win = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(target / <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (idx &lt;= max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">      sum += idx;</span><br><span class=\"line\">      win.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">      idx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(win.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">      sum -= win.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题58 - I. 翻转单词顺序","date":"2020-04-15T23:33:59.000Z","_content":"\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n示例 2：\n\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n示例 3：\n\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n \n\n说明：\n\n无空格字符构成一个单词。\n输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n注意：本题与主站 151 题相同：https://leetcode-cn.com/problems/reverse-words-in-a-string/\n\n注意：此题对比原题有改动\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\n\n## 1.滑动窗口+双指针\n\n```js\n/**\n * 滑动窗口+双指针\n * 1.使用滑动窗口取出每个单词\n * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n  if (!s) return '';\n  let left = 0;\n  let right = 1;\n  const isSpace = (val) => ['', ' '].includes(val); \n  const wordArr = [];\n  // [left. right)\n  while (right <= s.length) {\n    if (\n      !isSpace(s[left])\n      && !isSpace(s[right - 1])\n      && isSpace(s[right] || '')\n    ) {\n      wordArr.push(s.slice(left, right));\n      left = right;\n    }\n    if (isSpace(s[left])) left++;\n    right++;\n  }\n  left = 0;\n  right = wordArr.length - 1;\n  // [left, right]\n  while (left < right) {\n    const tmp = wordArr[left];\n    wordArr[left] = wordArr[right];\n    wordArr[right] = tmp;\n    left++;\n    right--;\n  }\n  return wordArr.join(' ');\n};\n```\n","source":"_posts/面试题58 - I. 翻转单词顺序.md","raw":"---\ntitle: 面试题58 - I. 翻转单词顺序\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串\"I am a student. \"，则输出\"student. a am I\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: \"the sky is blue\"\n输出: \"blue is sky the\"\n示例 2：\n\n输入: \"  hello world!  \"\n输出: \"world! hello\"\n解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n示例 3：\n\n输入: \"a good   example\"\n输出: \"example good a\"\n解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n \n\n说明：\n\n无空格字符构成一个单词。\n输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。\n如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n注意：本题与主站 151 题相同：https://leetcode-cn.com/problems/reverse-words-in-a-string/\n\n注意：此题对比原题有改动\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\n\n## 1.滑动窗口+双指针\n\n```js\n/**\n * 滑动窗口+双指针\n * 1.使用滑动窗口取出每个单词\n * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素\n * @param {string} s\n * @return {string}\n */\nvar reverseWords = function(s) {\n  if (!s) return '';\n  let left = 0;\n  let right = 1;\n  const isSpace = (val) => ['', ' '].includes(val); \n  const wordArr = [];\n  // [left. right)\n  while (right <= s.length) {\n    if (\n      !isSpace(s[left])\n      && !isSpace(s[right - 1])\n      && isSpace(s[right] || '')\n    ) {\n      wordArr.push(s.slice(left, right));\n      left = right;\n    }\n    if (isSpace(s[left])) left++;\n    right++;\n  }\n  left = 0;\n  right = wordArr.length - 1;\n  // [left, right]\n  while (left < right) {\n    const tmp = wordArr[left];\n    wordArr[left] = wordArr[right];\n    wordArr[right] = tmp;\n    left++;\n    right--;\n  }\n  return wordArr.join(' ');\n};\n```\n","slug":"面试题58 - I. 翻转单词顺序","published":1,"updated":"2023-02-17T23:48:02.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcde002s5onraz761nvo","content":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入: “the sky is blue”<br>输出: “blue is sky the”<br>示例 2：</p>\n<p>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>示例 3：</p>\n<p>输入: “a good   example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n </p>\n<p>说明：</p>\n<p>无空格字符构成一个单词。<br>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<br>注意：本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p>\n<p>注意：此题对比原题有改动</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof</a></p>\n<h2 id=\"1-滑动窗口-双指针\"><a href=\"#1-滑动窗口-双指针\" class=\"headerlink\" title=\"1.滑动窗口+双指针\"></a>1.滑动窗口+双指针</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口+双指针</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用滑动窗口取出每个单词</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!s) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isSpace</span> = (<span class=\"params\">val</span>) =&gt; [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>].<span class=\"title function_\">includes</span>(val); </span><br><span class=\"line\">  <span class=\"keyword\">const</span> wordArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// [left. right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt;= s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !<span class=\"title function_\">isSpace</span>(s[left])</span><br><span class=\"line\">      &amp;&amp; !<span class=\"title function_\">isSpace</span>(s[right - <span class=\"number\">1</span>])</span><br><span class=\"line\">      &amp;&amp; <span class=\"title function_\">isSpace</span>(s[right] || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      wordArr.<span class=\"title function_\">push</span>(s.<span class=\"title function_\">slice</span>(left, right));</span><br><span class=\"line\">      left = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSpace</span>(s[left])) left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  right = wordArr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = wordArr[left];</span><br><span class=\"line\">    wordArr[left] = wordArr[right];</span><br><span class=\"line\">    wordArr[right] = tmp;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wordArr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p>","more":"<p>示例 1：</p>\n<p>输入: “the sky is blue”<br>输出: “blue is sky the”<br>示例 2：</p>\n<p>输入: “  hello world!  “<br>输出: “world! hello”<br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>示例 3：</p>\n<p>输入: “a good   example”<br>输出: “example good a”<br>解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。\n </p>\n<p>说明：</p>\n<p>无空格字符构成一个单词。<br>输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br>如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。<br>注意：本题与主站 151 题相同：<a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">https://leetcode-cn.com/problems/reverse-words-in-a-string/</a></p>\n<p>注意：此题对比原题有改动</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof\">https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof</a></p>\n<h2 id=\"1-滑动窗口-双指针\"><a href=\"#1-滑动窗口-双指针\" class=\"headerlink\" title=\"1.滑动窗口+双指针\"></a>1.滑动窗口+双指针</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 滑动窗口+双指针</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用滑动窗口取出每个单词</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.双指针，left=0, right=len-1，同时向中间偏移同时交换元素</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseWords = <span class=\"keyword\">function</span>(<span class=\"params\">s</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!s) <span class=\"keyword\">return</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isSpace</span> = (<span class=\"params\">val</span>) =&gt; [<span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>].<span class=\"title function_\">includes</span>(val); </span><br><span class=\"line\">  <span class=\"keyword\">const</span> wordArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// [left. right)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt;= s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      !<span class=\"title function_\">isSpace</span>(s[left])</span><br><span class=\"line\">      &amp;&amp; !<span class=\"title function_\">isSpace</span>(s[right - <span class=\"number\">1</span>])</span><br><span class=\"line\">      &amp;&amp; <span class=\"title function_\">isSpace</span>(s[right] || <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      wordArr.<span class=\"title function_\">push</span>(s.<span class=\"title function_\">slice</span>(left, right));</span><br><span class=\"line\">      left = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSpace</span>(s[left])) left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  right = wordArr.<span class=\"property\">length</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = wordArr[left];</span><br><span class=\"line\">    wordArr[left] = wordArr[right];</span><br><span class=\"line\">    wordArr[right] = tmp;</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right--;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wordArr.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题59 - I. 滑动窗口的最大值","date":"2020-04-15T23:33:59.000Z","_content":"\n\n给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。\n\n<!-- more -->\n\n示例:\n\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n```\n  滑动窗口的位置                 最大值\n---------------               -------\n[\n  1  3  -1] -3  5  3  6  7       3\n  1 [3  -1  -3] 5  3  6  7       3\n  1  3 [-1  -3  5] 3  6  7       5\n  1  3  -1 [-3  5  3] 6  7       5\n  1  3  -1  -3 [5  3  6] 7       6\n  1  3  -1  -3  5 [3  6  7       7\n]\n```\n\n提示：\n\n你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\n\n\n## 暴力法\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  let left = 0;\n  let right = k - 1;\n  const res = [];\n  while (right < nums.length) {\n    // [left, right]\n    let max = -Infinity;\n    for (let i = left; i <= right; i++) {\n      max = Math.max(max, nums[i]);\n    }\n    res.push(max);\n    left++;\n    right++;\n  }\n  return res;\n};\n```\n\n## 双端队列\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  const res= [];\n  let curMaxNumIdx;\n  const deQueue = new DeQueue(nums, k);\n\n  curMaxNumIdx = deQueue.getLeftHead();\n  res.push(nums[curMaxNumIdx]);\n\n  for (let i = k; i < nums.length; i++) {\n    deQueue.push(i);\n    curMaxNumIdx = deQueue.getLeftHead();\n    res.push(nums[curMaxNumIdx]);\n  }\n  return res;\n}\n\n/**\n * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前\n * 并且这些idx都是在滑动中\n */\nfunction DeQueue(nums, k) {\n  this._queue = [];\n  this._nums = nums;\n  this._k = k;\n  this._init();\n}\n\nDeQueue.prototype.push = function(idx) {\n  this._clean(idx);\n  this._queue.push(idx);\n}\n\nDeQueue.prototype.getLeftHead = function() {\n  return this._queue[0];\n}\n\nDeQueue.prototype._init = function() {\n  for (let i = 0; i < this._k; i++) {\n    this.push(i);\n  }\n}\n\nDeQueue.prototype._clean = function(idx) {\n  const queueLen = this._queue.length;\n  const leftHead = this._queue[0];\n  const minValidIdx = idx + 1 - this._k;\n  // 队列为空，不需要清理无用元素\n  if (!queueLen) return;\n\n  // ps: 每次调用_clean只会调用一次\n  // 当前滑动窗口中index的取值范围是：[minValidIdx, idx]\n  // 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉\n  if (leftHead < minValidIdx) {\n    this._queue.shift();\n  }\n\n  // PS: 调用多次更新序列\n  // 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作\n  // deQueue中的元素要求是：一个由大到小的有序列\n  // 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉\n  let rightHead = this._queue[this._queue.length - 1];\n  while (this._queue.length && this._nums[idx] >= this._nums[rightHead]) {\n    this._queue.pop();\n    rightHead = this._queue[this._queue.length - 1];\n  }\n}\n```\n","source":"_posts/面试题59 - I. 滑动窗口的最大值.md","raw":"---\ntitle: 面试题59 - I. 滑动窗口的最大值\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。\n\n<!-- more -->\n\n示例:\n\n输入: nums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出: [3,3,5,5,6,7] \n解释: \n```\n  滑动窗口的位置                 最大值\n---------------               -------\n[\n  1  3  -1] -3  5  3  6  7       3\n  1 [3  -1  -3] 5  3  6  7       3\n  1  3 [-1  -3  5] 3  6  7       5\n  1  3  -1 [-3  5  3] 6  7       5\n  1  3  -1  -3 [5  3  6] 7       6\n  1  3  -1  -3  5 [3  6  7       7\n]\n```\n\n提示：\n\n你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\n\n\n## 暴力法\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  let left = 0;\n  let right = k - 1;\n  const res = [];\n  while (right < nums.length) {\n    // [left, right]\n    let max = -Infinity;\n    for (let i = left; i <= right; i++) {\n      max = Math.max(max, nums[i]);\n    }\n    res.push(max);\n    left++;\n    right++;\n  }\n  return res;\n};\n```\n\n## 双端队列\n```js\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nfunction maxSlidingWindow(nums, k) {\n  if (!nums.length) return [];\n  const res= [];\n  let curMaxNumIdx;\n  const deQueue = new DeQueue(nums, k);\n\n  curMaxNumIdx = deQueue.getLeftHead();\n  res.push(nums[curMaxNumIdx]);\n\n  for (let i = k; i < nums.length; i++) {\n    deQueue.push(i);\n    curMaxNumIdx = deQueue.getLeftHead();\n    res.push(nums[curMaxNumIdx]);\n  }\n  return res;\n}\n\n/**\n * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前\n * 并且这些idx都是在滑动中\n */\nfunction DeQueue(nums, k) {\n  this._queue = [];\n  this._nums = nums;\n  this._k = k;\n  this._init();\n}\n\nDeQueue.prototype.push = function(idx) {\n  this._clean(idx);\n  this._queue.push(idx);\n}\n\nDeQueue.prototype.getLeftHead = function() {\n  return this._queue[0];\n}\n\nDeQueue.prototype._init = function() {\n  for (let i = 0; i < this._k; i++) {\n    this.push(i);\n  }\n}\n\nDeQueue.prototype._clean = function(idx) {\n  const queueLen = this._queue.length;\n  const leftHead = this._queue[0];\n  const minValidIdx = idx + 1 - this._k;\n  // 队列为空，不需要清理无用元素\n  if (!queueLen) return;\n\n  // ps: 每次调用_clean只会调用一次\n  // 当前滑动窗口中index的取值范围是：[minValidIdx, idx]\n  // 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉\n  if (leftHead < minValidIdx) {\n    this._queue.shift();\n  }\n\n  // PS: 调用多次更新序列\n  // 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作\n  // deQueue中的元素要求是：一个由大到小的有序列\n  // 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉\n  let rightHead = this._queue[this._queue.length - 1];\n  while (this._queue.length && this._nums[idx] >= this._nums[rightHead]) {\n    this._queue.pop();\n    rightHead = this._queue[this._queue.length - 1];\n  }\n}\n```\n","slug":"面试题59 - I. 滑动窗口的最大值","published":1,"updated":"2023-02-17T23:58:50.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcde002v5onremfmfake","content":"<p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p>\n<span id=\"more\"></span>\n\n<p>示例:</p>\n<p>输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3<br>输出: [3,3,5,5,6,7]<br>解释: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  滑动窗口的位置                 最大值</span><br><span class=\"line\">---------------               -------</span><br><span class=\"line\">[</span><br><span class=\"line\">  1  3  -1] -3  5  3  6  7       3</span><br><span class=\"line\">  1 [3  -1  -3] 5  3  6  7       3</span><br><span class=\"line\">  1  3 [-1  -3  5] 3  6  7       5</span><br><span class=\"line\">  1  3  -1 [-3  5  3] 6  7       5</span><br><span class=\"line\">  1  3  -1  -3 [5  3  6] 7       6</span><br><span class=\"line\">  1  3  -1  -3  5 [3  6  7       7</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = k - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = -<span class=\"title class_\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res= [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curMaxNumIdx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DeQueue</span>(nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">  curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    deQueue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">    curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且这些idx都是在滑动中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DeQueue</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span> = nums;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span> = k;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_clean</span>(idx);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getLeftHead</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_clean</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueLen = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minValidIdx = idx + <span class=\"number\">1</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 队列为空，不需要清理无用元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!queueLen) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ps: 每次调用_clean只会调用一次</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前滑动窗口中index的取值范围是：[minValidIdx, idx]</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftHead &lt; minValidIdx) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// PS: 调用多次更新序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// deQueue中的元素要求是：一个由大到小的有序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[idx] &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[rightHead]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>给定一个数组 nums 和滑动窗口的大小 k，请找出所有滑动窗口里的最大值。</p>","more":"<p>示例:</p>\n<p>输入: nums &#x3D; [1,3,-1,-3,5,3,6,7], 和 k &#x3D; 3<br>输出: [3,3,5,5,6,7]<br>解释: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  滑动窗口的位置                 最大值</span><br><span class=\"line\">---------------               -------</span><br><span class=\"line\">[</span><br><span class=\"line\">  1  3  -1] -3  5  3  6  7       3</span><br><span class=\"line\">  1 [3  -1  -3] 5  3  6  7       3</span><br><span class=\"line\">  1  3 [-1  -3  5] 3  6  7       5</span><br><span class=\"line\">  1  3  -1 [-3  5  3] 6  7       5</span><br><span class=\"line\">  1  3  -1  -3 [5  3  6] 7       6</span><br><span class=\"line\">  1  3  -1  -3  5 [3  6  7       7</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>提示：</p>\n<p>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> right = k - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (right &lt; nums.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// [left, right]</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> max = -<span class=\"title class_\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class=\"line\">      max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(max);</span><br><span class=\"line\">    left++;</span><br><span class=\"line\">    right++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"双端队列\"><a href=\"#双端队列\" class=\"headerlink\" title=\"双端队列\"></a>双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">k</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">maxSlidingWindow</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!nums.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res= [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> curMaxNumIdx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> deQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">DeQueue</span>(nums, k);</span><br><span class=\"line\"></span><br><span class=\"line\">  curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">  res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = k; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    deQueue.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">    curMaxNumIdx = deQueue.<span class=\"title function_\">getLeftHead</span>();</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(nums[curMaxNumIdx]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 维护一个队列，成员是nums中元素的idx，并且这些idx都是当前</span></span><br><span class=\"line\"><span class=\"comment\"> * 并且这些idx都是在滑动中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">DeQueue</span>(<span class=\"params\">nums, k</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span> = nums;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span> = k;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_clean</span>(idx);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">push</span>(idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getLeftHead</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DeQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_clean</span> = <span class=\"keyword\">function</span>(<span class=\"params\">idx</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queueLen = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> leftHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> minValidIdx = idx + <span class=\"number\">1</span> - <span class=\"variable language_\">this</span>.<span class=\"property\">_k</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 队列为空，不需要清理无用元素</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!queueLen) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ps: 每次调用_clean只会调用一次</span></span><br><span class=\"line\">  <span class=\"comment\">// 当前滑动窗口中index的取值范围是：[minValidIdx, idx]</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果deQueue的中的元素已经不再取值范围内就已经无用，出队清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (leftHead &lt; minValidIdx) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// PS: 调用多次更新序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 背景：nums[idx]将会进入deQueue，现在这里的逻辑是在入队新元素前的整理工作</span></span><br><span class=\"line\">  <span class=\"comment\">// deQueue中的元素要求是：一个由大到小的有序列</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果队尾（队列中最小）元素指向的nums的真实值比nums[idx]还小，那就没用，要清理掉</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[idx] &gt;= <span class=\"variable language_\">this</span>.<span class=\"property\">_nums</span>[rightHead]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">    rightHead = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>.<span class=\"property\">length</span> - <span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题58 - II. 左旋转字符串","date":"2020-04-16T23:26:51.000Z","_content":"\n\n字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"\n示例 2：\n\n输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"\n \n\n限制：\n\n1 <= k < s.length <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof\n\n## 1.简单切片\n\n```js\n/**\n * @param {string} s\n * @param {number} n\n * @return {string}\n */\nvar reverseLeftWords = reverseLeftWords2;\n\nfunction reverseLeftWords1(s, n) {\n  return s.slice(n) + s.slice(0, n);\n};\n```\n\n## 2.字符拼接\n\n拼接比起数组保存后拼接要快……\n\n```js\nfunction reverseLeftWords2(s, n) {\n  let res = '';\n  for (let i = n; i < s.length; i++) {\n    res += s[i];\n  }\n  for (let i = 0; i < n; i++) {\n    res += s[i];\n  }\n  return res;\n};\n```\n","source":"_posts/面试题58-II-左旋转字符串.md","raw":"---\ntitle: 面试题58 - II. 左旋转字符串\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串\"abcdefg\"和数字2，该函数将返回左旋转两位得到的结果\"cdefgab\"。\n\n<!-- more -->\n\n示例 1：\n\n输入: s = \"abcdefg\", k = 2\n输出: \"cdefgab\"\n示例 2：\n\n输入: s = \"lrloseumgh\", k = 6\n输出: \"umghlrlose\"\n \n\n限制：\n\n1 <= k < s.length <= 10000\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof\n\n## 1.简单切片\n\n```js\n/**\n * @param {string} s\n * @param {number} n\n * @return {string}\n */\nvar reverseLeftWords = reverseLeftWords2;\n\nfunction reverseLeftWords1(s, n) {\n  return s.slice(n) + s.slice(0, n);\n};\n```\n\n## 2.字符拼接\n\n拼接比起数组保存后拼接要快……\n\n```js\nfunction reverseLeftWords2(s, n) {\n  let res = '';\n  for (let i = n; i < s.length; i++) {\n    res += s[i];\n  }\n  for (let i = 0; i < n; i++) {\n    res += s[i];\n  }\n  return res;\n};\n```\n","slug":"面试题58-II-左旋转字符串","published":1,"updated":"2023-02-18T00:24:06.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdf002y5onr5pfz7rvu","content":"<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “cdefgab”<br>示例 2：</p>\n<p>输入: s &#x3D; “lrloseumgh”, k &#x3D; 6<br>输出: “umghlrlose”\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; k &lt; s.length &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-简单切片\"><a href=\"#1-简单切片\" class=\"headerlink\" title=\"1.简单切片\"></a>1.简单切片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseLeftWords = reverseLeftWords2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseLeftWords1</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.<span class=\"title function_\">slice</span>(n) + s.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-字符拼接\"><a href=\"#2-字符拼接\" class=\"headerlink\" title=\"2.字符拼接\"></a>2.字符拼接</h2><p>拼接比起数组保存后拼接要快……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseLeftWords2</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    res += s[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    res += s[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>","more":"<p>示例 1：</p>\n<p>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “cdefgab”<br>示例 2：</p>\n<p>输入: s &#x3D; “lrloseumgh”, k &#x3D; 6<br>输出: “umghlrlose”\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; k &lt; s.length &lt;&#x3D; 10000</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof\">https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof</a></p>\n<h2 id=\"1-简单切片\"><a href=\"#1-简单切片\" class=\"headerlink\" title=\"1.简单切片\"></a>1.简单切片</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">s</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseLeftWords = reverseLeftWords2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseLeftWords1</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.<span class=\"title function_\">slice</span>(n) + s.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, n);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-字符拼接\"><a href=\"#2-字符拼接\" class=\"headerlink\" title=\"2.字符拼接\"></a>2.字符拼接</h2><p>拼接比起数组保存后拼接要快……</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverseLeftWords2</span>(<span class=\"params\">s, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt; s.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    res += s[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    res += s[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题59 - II. 队列的最大值","date":"2020-04-16T23:26:51.000Z","_content":"\n\n请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。\n\n<!-- more -->\n\n若队列为空，pop_front 和 max_value 需要返回 -1\n\n示例 1：\n\n输入: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n示例 2：\n\n输入: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n输出: [null,-1,-1]\n \n\n限制：\n\n1 <= push_back,pop_front,max_value的总操作数 <= 10000\n1 <= value <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\n\n## 辅助双端队列\n\n```js\n/**\n * 辅助双端队列\n * 1._data队列正常对数据进行入队出队\n * 2._max是一个双端队列。每次_data入队元素，_max如下操作：\n * 2.1 当_max空，如对元素\n * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。\n * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素\n * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了\n */\nvar MaxQueue = function() {\n  this._data = [];\n  this._max = [];\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.max_value = function() {\n  if (!this._max.length) return -1;\n  return this._max[0];\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nMaxQueue.prototype.push_back = function(value) {\n  this._data.push(value);\n  while (this._max.length && value > this._max[this._max.length-1]) {\n    this._max.pop();\n  }\n  this._max.push(value);\n\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.pop_front = function() {\n  if (!this._data.length) return -1;\n  const head = this._data.shift();\n  if (head === this._max[0]) {\n    this._max.shift();\n  }\n  return head;\n};\n\n/**\n * Your MaxQueue object will be instantiated and called as such:\n * var obj = new MaxQueue()\n * var param_1 = obj.max_value()\n * obj.push_back(value)\n * var param_3 = obj.pop_front()\n */\n```\n","source":"_posts/面试题59 - II. 队列的最大值.md","raw":"---\ntitle: 面试题59 - II. 队列的最大值\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。\n\n<!-- more -->\n\n若队列为空，pop_front 和 max_value 需要返回 -1\n\n示例 1：\n\n输入: \n[\"MaxQueue\",\"push_back\",\"push_back\",\"max_value\",\"pop_front\",\"max_value\"]\n[[],[1],[2],[],[],[]]\n输出: [null,null,null,2,1,2]\n示例 2：\n\n输入: \n[\"MaxQueue\",\"pop_front\",\"max_value\"]\n[[],[],[]]\n输出: [null,-1,-1]\n \n\n限制：\n\n1 <= push_back,pop_front,max_value的总操作数 <= 10000\n1 <= value <= 10^5\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\n\n## 辅助双端队列\n\n```js\n/**\n * 辅助双端队列\n * 1._data队列正常对数据进行入队出队\n * 2._max是一个双端队列。每次_data入队元素，_max如下操作：\n * 2.1 当_max空，如对元素\n * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。\n * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素\n * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了\n */\nvar MaxQueue = function() {\n  this._data = [];\n  this._max = [];\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.max_value = function() {\n  if (!this._max.length) return -1;\n  return this._max[0];\n};\n\n/** \n * @param {number} value\n * @return {void}\n */\nMaxQueue.prototype.push_back = function(value) {\n  this._data.push(value);\n  while (this._max.length && value > this._max[this._max.length-1]) {\n    this._max.pop();\n  }\n  this._max.push(value);\n\n};\n\n/**\n * @return {number}\n */\nMaxQueue.prototype.pop_front = function() {\n  if (!this._data.length) return -1;\n  const head = this._data.shift();\n  if (head === this._max[0]) {\n    this._max.shift();\n  }\n  return head;\n};\n\n/**\n * Your MaxQueue object will be instantiated and called as such:\n * var obj = new MaxQueue()\n * var param_1 = obj.max_value()\n * obj.push_back(value)\n * var param_3 = obj.pop_front()\n */\n```\n","slug":"面试题59 - II. 队列的最大值","published":1,"updated":"2023-02-17T23:46:57.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdg00315onr9sy3gm2k","content":"<p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p>\n<span id=\"more\"></span>\n\n<p>若队列为空，pop_front 和 max_value 需要返回 -1</p>\n<p>示例 1：</p>\n<p>输入:<br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br>输出: [null,null,null,2,1,2]<br>示例 2：</p>\n<p>输入:<br>[“MaxQueue”,”pop_front”,”max_value”]<br>[[],[],[]]<br>输出: [null,-1,-1]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; push_back,pop_front,max_value的总操作数 &lt;&#x3D; 10000<br>1 &lt;&#x3D; value &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"辅助双端队列\"><a href=\"#辅助双端队列\" class=\"headerlink\" title=\"辅助双端队列\"></a>辅助双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 辅助双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data队列正常对数据进行入队出队</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._max是一个双端队列。每次_data入队元素，_max如下操作：</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.1 当_max空，如对元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。</span></span><br><span class=\"line\"><span class=\"comment\"> * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MaxQueue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">max_value</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push_back</span> = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span> &amp;&amp; value &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop_front</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head === <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MaxQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MaxQueue()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.max_value()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push_back(value)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.pop_front()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的均摊时间复杂度都是O(1)。</p>","more":"<p>若队列为空，pop_front 和 max_value 需要返回 -1</p>\n<p>示例 1：</p>\n<p>输入:<br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br>输出: [null,null,null,2,1,2]<br>示例 2：</p>\n<p>输入:<br>[“MaxQueue”,”pop_front”,”max_value”]<br>[[],[],[]]<br>输出: [null,-1,-1]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; push_back,pop_front,max_value的总操作数 &lt;&#x3D; 10000<br>1 &lt;&#x3D; value &lt;&#x3D; 10^5</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof\">https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof</a></p>\n<h2 id=\"辅助双端队列\"><a href=\"#辅助双端队列\" class=\"headerlink\" title=\"辅助双端队列\"></a>辅助双端队列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 辅助双端队列</span></span><br><span class=\"line\"><span class=\"comment\"> * 1._data队列正常对数据进行入队出队</span></span><br><span class=\"line\"><span class=\"comment\"> * 2._max是一个双端队列。每次_data入队元素，_max如下操作：</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.1 当_max空，如对元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.2 当_max非空，新数据value从右侧入队，入队前需要将右侧所有比value小的从右侧出队再入队。</span></span><br><span class=\"line\"><span class=\"comment\"> * 为什么？为了位置一个左到右递减的数列，这样才能维持_max每次从左侧出队的都是最大元素</span></span><br><span class=\"line\"><span class=\"comment\"> * 3.当出队_data元素value时，若_max的队头元素与value相等，则也出队_max的队头。为什么？因为value已经出队无效了</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">MaxQueue</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span> = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">max_value</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">value</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">void</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push_back</span> = <span class=\"keyword\">function</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span> &amp;&amp; value &gt; <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"property\">length</span>-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"title class_\">MaxQueue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">pop_front</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">length</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (head === <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_max</span>.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your MaxQueue object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MaxQueue()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_1 = obj.max_value()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push_back(value)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.pop_front()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"面试题60. n个骰子的点数","date":"2020-04-15T23:33:59.000Z","_content":"\n\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n<!-- more -->\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n \n\n示例 1:\n\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n示例 2:\n\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n \n\n限制：\n\n1 <= n <= 11\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\n\n## 1.动态规划穷举\n\n```js\n/**\n * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数\n * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成\n * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 <= j <= 6\n * @param {number} n\n * @return {number[]}\n */\nvar twoSum = twoSumDp2;\nfunction twoSumDp1(n) {\n  let dp = new Array(n + 1).fill();\n  dp = dp.map(() => new Array(7).fill(0));\n  for (let i = 1; i <=  6; i++) {\n    dp[1][i] = 1;\n  }\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    if (!dp[n][i]) continue;\n    const tmp = dp[n][i] / all;\n    res.push(tmp);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[i][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          const sub = dp[i - 1][j - num] || 0;\n          dp[i][j] += sub;\n        }\n      }\n    } \n  }\n  return res;\n};\n```\n\n## 2.优化动态规划\n\n使用一个长度是2的二维数值存储dp元素，因为计算`dp[i][j]`只是依赖`dp[i - 1][j - num]`\n\n```js\nfunction twoSumDp2(n) {\n  const dp = [[0, 1, 1, 1, 1, 1, 1], []];\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    res.push(dp[0][i] / all);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[1][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          dp[1][j] += dp[0][j - num] || 0;\n        }\n      }\n      dp[0] = dp[1];\n      dp[1] = [];\n    } \n  }\n  return res;\n};\n```\n","source":"_posts/面试题60. n个骰子的点数.md","raw":"---\ntitle: 面试题60. n个骰子的点数\ndate: 2020-04-16 07:33:59\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。\n\n<!-- more -->\n\n你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。\n\n \n\n示例 1:\n\n输入: 1\n输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]\n示例 2:\n\n输入: 2\n输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n \n\n限制：\n\n1 <= n <= 11\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\n\n## 1.动态规划穷举\n\n```js\n/**\n * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数\n * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成\n * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 <= j <= 6\n * @param {number} n\n * @return {number[]}\n */\nvar twoSum = twoSumDp2;\nfunction twoSumDp1(n) {\n  let dp = new Array(n + 1).fill();\n  dp = dp.map(() => new Array(7).fill(0));\n  for (let i = 1; i <=  6; i++) {\n    dp[1][i] = 1;\n  }\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    if (!dp[n][i]) continue;\n    const tmp = dp[n][i] / all;\n    res.push(tmp);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[i][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          const sub = dp[i - 1][j - num] || 0;\n          dp[i][j] += sub;\n        }\n      }\n    } \n  }\n  return res;\n};\n```\n\n## 2.优化动态规划\n\n使用一个长度是2的二维数值存储dp元素，因为计算`dp[i][j]`只是依赖`dp[i - 1][j - num]`\n\n```js\nfunction twoSumDp2(n) {\n  const dp = [[0, 1, 1, 1, 1, 1, 1], []];\n\n  dpCount(n);\n  const res = [];\n  const all = Math.pow(6, n);\n  for (let i = n; i <= n * 6; i++) {\n    res.push(dp[0][i] / all);\n  }\n  function dpCount(n) {\n    for (let i = 2; i <= n; i++) {\n      for (let j = i; j <= i * 6; j++) {\n        dp[1][j] = 0;\n        for (let num = 1; num <= 6; num++) {\n          if (j - num <= 0) break;\n          dp[1][j] += dp[0][j - num] || 0;\n        }\n      }\n      dp[0] = dp[1];\n      dp[1] = [];\n    } \n  }\n  return res;\n};\n```\n","slug":"面试题60. n个骰子的点数","published":1,"updated":"2023-02-18T00:05:08.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdp004k5onr9nbo6tdp","content":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>\n<span id=\"more\"></span>\n\n<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p> </p>\n<p>示例 1:</p>\n<p>输入: 1<br>输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<br>示例 2:</p>\n<p>输入: 2<br>输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 11</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\">https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof</a></p>\n<h2 id=\"1-动态规划穷举\"><a href=\"#1-动态规划穷举\" class=\"headerlink\" title=\"1.动态规划穷举\"></a>1.动态规划穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 &lt;= j &lt;= 6</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = twoSumDp2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">7</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;=  <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dp[n][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = dp[n][i] / all;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> sub = dp[i - <span class=\"number\">1</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">          dp[i][j] += sub;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-优化动态规划\"><a href=\"#2-优化动态规划\" class=\"headerlink\" title=\"2.优化动态规划\"></a>2.优化动态规划</h2><p>使用一个长度是2的二维数值存储dp元素，因为计算<code>dp[i][j]</code>只是依赖<code>dp[i - 1][j - num]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], []];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(dp[<span class=\"number\">0</span>][i] / all);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          dp[<span class=\"number\">1</span>][j] += dp[<span class=\"number\">0</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。</p>","more":"<p>你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。</p>\n<p> </p>\n<p>示例 1:</p>\n<p>输入: 1<br>输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<br>示例 2:</p>\n<p>输入: 2<br>输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]\n </p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 11</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof\">https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof</a></p>\n<h2 id=\"1-动态规划穷举\"><a href=\"#1-动态规划穷举\" class=\"headerlink\" title=\"1.动态规划穷举\"></a>1.动态规划穷举</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态：dp[n][i]:掷出第n个骰子，总点数是i的所有次数</span></span><br><span class=\"line\"><span class=\"comment\"> * 最优子结构：每枚骰子6个点数，dp[n][i]的次数可以由 dp[n-1][i-1] + 1或dp[n-1][i-2] + 2或...或dp[n-1][i-6] + 6构成</span></span><br><span class=\"line\"><span class=\"comment\"> * 状态转移方程：dp[n][i] = sum(dp[n-1][i-j]), 1 &lt;= j &lt;= 6</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number[]</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = twoSumDp2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp1</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>();</span><br><span class=\"line\">  dp = dp.<span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">7</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;=  <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dp[n][i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tmp = dp[n][i] / all;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(tmp);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> sub = dp[i - <span class=\"number\">1</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">          dp[i][j] += sub;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-优化动态规划\"><a href=\"#2-优化动态规划\" class=\"headerlink\" title=\"2.优化动态规划\"></a>2.优化动态规划</h2><p>使用一个长度是2的二维数值存储dp元素，因为计算<code>dp[i][j]</code>只是依赖<code>dp[i - 1][j - num]</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">twoSumDp2</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dp = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], []];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">dpCount</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> all = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">6</span>, n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = n; i &lt;= n * <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(dp[<span class=\"number\">0</span>][i] / all);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">dpCount</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt;= i * <span class=\"number\">6</span>; j++) &#123;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> num = <span class=\"number\">1</span>; num &lt;= <span class=\"number\">6</span>; num++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j - num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          dp[<span class=\"number\">1</span>][j] += dp[<span class=\"number\">0</span>][j - num] || <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      dp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>];</span><br><span class=\"line\">      dp[<span class=\"number\">1</span>] = [];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题61. 扑克牌中的顺子","date":"2020-04-16T23:37:04.000Z","_content":"\n\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1,2,3,4,5]\n输出: True\n \n\n示例 2:\n\n输入: [0,0,1,2,5]\n输出: True\n \n\n限制：\n\n数组长度为 5 \n\n数组的数取值为 [0, 13] .\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\n\n## 1.找最大最小值\n\n```js\n/**\n * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 <- 序列长度\n * 2.如果存在重复，则不是顺子\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isStraight = function(nums) {\n  let min = 14\n  let max = -1;\n  const repeated = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (!nums[i]) continue; \n    min = Math.min(min, nums[i]);\n    max = Math.max(max, nums[i]);\n    if (!repeated.includes(nums[i])) {\n      repeated.push(nums[i]);\n    } else {\n      return false;\n    }\n  }\n  if (max - min + 1 > 5) return false;\n  return true;\n};\n```\n","source":"_posts/面试题61. 扑克牌中的顺子.md","raw":"---\ntitle: 面试题61. 扑克牌中的顺子\ndate: 2020-04-17 07:37:04\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。\n\n<!-- more -->\n\n示例 1:\n\n输入: [1,2,3,4,5]\n输出: True\n \n\n示例 2:\n\n输入: [0,0,1,2,5]\n输出: True\n \n\n限制：\n\n数组长度为 5 \n\n数组的数取值为 [0, 13] .\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\n\n## 1.找最大最小值\n\n```js\n/**\n * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 <- 序列长度\n * 2.如果存在重复，则不是顺子\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isStraight = function(nums) {\n  let min = 14\n  let max = -1;\n  const repeated = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (!nums[i]) continue; \n    min = Math.min(min, nums[i]);\n    max = Math.max(max, nums[i]);\n    if (!repeated.includes(nums[i])) {\n      repeated.push(nums[i]);\n    } else {\n      return false;\n    }\n  }\n  if (max - min + 1 > 5) return false;\n  return true;\n};\n```\n","slug":"面试题61. 扑克牌中的顺子","published":1,"updated":"2023-02-17T23:39:43.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdq004l5onrct7pc8tx","content":"<p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p>\n<span id=\"more\"></span>\n\n<p>示例 1:</p>\n<p>输入: [1,2,3,4,5]<br>输出: True\n </p>\n<p>示例 2:</p>\n<p>输入: [0,0,1,2,5]<br>输出: True\n </p>\n<p>限制：</p>\n<p>数组长度为 5 </p>\n<p>数组的数取值为 [0, 13] .</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof</a></p>\n<h2 id=\"1-找最大最小值\"><a href=\"#1-找最大最小值\" class=\"headerlink\" title=\"1.找最大最小值\"></a>1.找最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 &lt;- 序列长度</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果存在重复，则不是顺子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isStraight = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"number\">14</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repeated = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums[i]) <span class=\"keyword\">continue</span>; </span><br><span class=\"line\">    min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, nums[i]);</span><br><span class=\"line\">    max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!repeated.<span class=\"title function_\">includes</span>(nums[i])) &#123;</span><br><span class=\"line\">      repeated.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max - min + <span class=\"number\">1</span> &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。</p>","more":"<p>示例 1:</p>\n<p>输入: [1,2,3,4,5]<br>输出: True\n </p>\n<p>示例 2:</p>\n<p>输入: [0,0,1,2,5]<br>输出: True\n </p>\n<p>限制：</p>\n<p>数组长度为 5 </p>\n<p>数组的数取值为 [0, 13] .</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof\">https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof</a></p>\n<h2 id=\"1-找最大最小值\"><a href=\"#1-找最大最小值\" class=\"headerlink\" title=\"1.找最大最小值\"></a>1.找最大最小值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.连续序列的特点：max - min + 1 = 序列长度，由于0可以变化，所以max - min + 1 &lt;- 序列长度</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.如果存在重复，则不是顺子</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number[]</span>&#125; <span class=\"variable\">nums</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">boolean</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isStraight = <span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = <span class=\"number\">14</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> max = -<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> repeated = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nums[i]) <span class=\"keyword\">continue</span>; </span><br><span class=\"line\">    min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(min, nums[i]);</span><br><span class=\"line\">    max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(max, nums[i]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!repeated.<span class=\"title function_\">includes</span>(nums[i])) &#123;</span><br><span class=\"line\">      repeated.<span class=\"title function_\">push</span>(nums[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max - min + <span class=\"number\">1</span> &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"面试题62. 圆圈中最后剩下的数字","date":"2020-04-16T23:26:51.000Z","_content":"\n\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n<!-- more -->\n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![2020-04-16_17-00](yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","source":"_posts/面试题62-圆圈中最后剩下的数字.md","raw":"---\ntitle: 面试题62. 圆圈中最后剩下的数字\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\n- LCOF\ncategories:\n- 算法题\n---\n\n\n0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。\n\n例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。\n\n<!-- more -->\n\n示例 1：\n\n输入: n = 5, m = 3\n输出: 3\n示例 2：\n\n输入: n = 10, m = 17\n输出: 2\n\n\n限制：\n\n1 <= n <= 10^5\n1 <= m <= 10^6\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\n\n## 1.暴力模拟（超时）\n\n```js\n/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar lastRemaining = lastRemaining2;\nfunction lastRemaining1(n, m) {\n  let idx = 0;\n  let num = 0;\n  let count = 0;\n  let getIdx = (idx) => idx % n;\n  const record = {};\n  while (1) {\n    if (!record[num]) idx++;\n    // console.log(num, idx, record)\n    if (!record[num] && idx > 0 && idx % m === 0) {\n      count++;\n      // console.log({count, n})\n      record[num] = true;\n      if (count >= n) return num;\n      idx = 0;\n    }\n    num = getIdx(num + 1);\n  }\n};\n```\n\n## 2.约瑟夫自杀环\n\n![2020-04-16_17-00](yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png)\n\n```js\n/**\n * f(x)：最后输出的序号\n * f(n, m) = (f(n - 1, m) + m)\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nfunction lastRemaining2(n, m) {\n  function josephus(n, m) {\n    if (n === 1) return 0;\n    return (josephus(n - 1, m) + m) % n;\n  }\n  return josephus(n, m);\n}\n```\n\n## 3.迭代优化约瑟夫问题\n\n避免使用递归栈空间\n\n```js\nfunction lastRemaining3(n, m) {\n  let res = 0\n  for (let i = 2; i <= n; i++) {\n    res = (res + m) % i;\n  }\n  return res;\n}\n```\n","slug":"面试题62-圆圈中最后剩下的数字","published":1,"updated":"2023-02-18T00:27:26.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcdr004n5onrbnc3fsve","content":"<p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>\n<span id=\"more\"></span>\n\n<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png\" alt=\"2020-04-16_17-00\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>\n<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>","more":"<p>示例 1：</p>\n<p>输入: n &#x3D; 5, m &#x3D; 3<br>输出: 3<br>示例 2：</p>\n<p>输入: n &#x3D; 10, m &#x3D; 17<br>输出: 2</p>\n<p>限制：</p>\n<p>1 &lt;&#x3D; n &lt;&#x3D; 10^5<br>1 &lt;&#x3D; m &lt;&#x3D; 10^6</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof\">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof</a></p>\n<h2 id=\"1-暴力模拟（超时）\"><a href=\"#1-暴力模拟（超时）\" class=\"headerlink\" title=\"1.暴力模拟（超时）\"></a>1.暴力模拟（超时）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastRemaining = lastRemaining2;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining1</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">getIdx</span> = (<span class=\"params\">idx</span>) =&gt; idx % n;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> record = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num]) idx++;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(num, idx, record)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!record[num] &amp;&amp; idx &gt; <span class=\"number\">0</span> &amp;&amp; idx % m === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      count++;</span><br><span class=\"line\">      <span class=\"comment\">// console.log(&#123;count, n&#125;)</span></span><br><span class=\"line\">      record[num] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (count &gt;= n) <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">      idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    num = <span class=\"title function_\">getIdx</span>(num + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-约瑟夫自杀环\"><a href=\"#2-约瑟夫自杀环\" class=\"headerlink\" title=\"2.约瑟夫自杀环\"></a>2.约瑟夫自杀环</h2><p><img src=\"/blog/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof.assets/2020-04-16_17-00.png\" alt=\"2020-04-16_17-00\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * f(x)：最后输出的序号</span></span><br><span class=\"line\"><span class=\"comment\"> * f(n, m) = (f(n - 1, m) + m)</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">n</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; <span class=\"variable\">m</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining2</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">josephus</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"title function_\">josephus</span>(n - <span class=\"number\">1</span>, m) + m) % n;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">josephus</span>(n, m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-迭代优化约瑟夫问题\"><a href=\"#3-迭代优化约瑟夫问题\" class=\"headerlink\" title=\"3.迭代优化约瑟夫问题\"></a>3.迭代优化约瑟夫问题</h2><p>避免使用递归栈空间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">lastRemaining3</span>(<span class=\"params\">n, m</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    res = (res + m) % i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"面试题67. 把字符串转换成整数","date":"2020-04-16T23:26:51.000Z","_content":"\n\n写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。\n\n<!-- more -->\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n\n说明：\n\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n示例 1:\n\n输入: \"42\"\n输出: 42\n示例 2:\n\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n示例 3:\n\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n示例 4:\n\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n示例 5:\n\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n \n\n注意：本题与主站 8 题相同：https://leetcode-cn.com/problems/string-to-integer-atoi/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\n\n## 1.正则表达式\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt1 = function(str) {\n  const matched = str.match(/^\\s*([-|+]?\\d+).*$/);\n  if (!matched) return 0; \n  let num = +matched[1];\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n  if (num > max) return max;\n  if (num < min) return min;\n\n  return num;\n};\n```\n\n## 2.线性遍历\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt2 = function(str) {\n  let sign;\n  let res = '';\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n\n  for (let i = 0; i < str.length; i++) {\n    if (sign) {\n      if ('0' <= str[i] && str[i] <= '9') {\n        res += str[i];\n      } else {\n        break;\n      }\n    } else {\n      if (str[i] === ' ') continue;\n      if ('0' <= str[i] && str[i] <= '9') {\n        sign = '+';\n        res += str[i];\n      } else if (['+', '-'].includes(str[i])) {\n        sign = str[i];\n      } else {\n        return 0;\n      }\n    }\n  }\n  res = sign === '-' ? -res : res;\n  if (res > max) return max;\n  if (res < min) return min;\n\n  return res;\n};\n```","source":"_posts/面试题67. 把字符串转换成整数.md","raw":"---\ntitle: 面试题67. 把字符串转换成整数\ndate: 2020-04-17 07:26:51\ntags:\n- 算法题\n- 旧文迁移\ncategories:\n- 算法题\n---\n\n\n写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。\n\n<!-- more -->\n\n首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。\n\n当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。\n\n注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。\n\n在任何情况下，若函数不能进行有效的转换时，请返回 0。\n\n说明：\n\n假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。\n\n示例 1:\n\n输入: \"42\"\n输出: 42\n示例 2:\n\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 '-', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n示例 3:\n\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。\n示例 4:\n\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 'w', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n示例 5:\n\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−231) 。\n \n\n注意：本题与主站 8 题相同：https://leetcode-cn.com/problems/string-to-integer-atoi/\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\n\n## 1.正则表达式\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt1 = function(str) {\n  const matched = str.match(/^\\s*([-|+]?\\d+).*$/);\n  if (!matched) return 0; \n  let num = +matched[1];\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n  if (num > max) return max;\n  if (num < min) return min;\n\n  return num;\n};\n```\n\n## 2.线性遍历\n\n```js\n/**\n * @param {string} str\n * @return {number}\n */\nvar strToInt2 = function(str) {\n  let sign;\n  let res = '';\n  const max = Math.pow(2, 31) - 1;\n  const min = Math.pow(-2, 31);\n\n  for (let i = 0; i < str.length; i++) {\n    if (sign) {\n      if ('0' <= str[i] && str[i] <= '9') {\n        res += str[i];\n      } else {\n        break;\n      }\n    } else {\n      if (str[i] === ' ') continue;\n      if ('0' <= str[i] && str[i] <= '9') {\n        sign = '+';\n        res += str[i];\n      } else if (['+', '-'].includes(str[i])) {\n        sign = str[i];\n      } else {\n        return 0;\n      }\n    }\n  }\n  res = sign === '-' ? -res : res;\n  if (res > max) return max;\n  if (res < min) return min;\n\n  return res;\n};\n```","slug":"面试题67. 把字符串转换成整数","published":1,"updated":"2023-02-17T23:35:37.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cle99dcds004p5onr4j62cqfs","content":"<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>\n<span id=\"more\"></span>\n\n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p>说明：</p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p>示例 1:</p>\n<p>输入: “42”<br>输出: 42<br>示例 2:</p>\n<p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p>\n<p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p>\n<p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p>\n<p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。\n </p>\n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\">https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof</a></p>\n<h2 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt1 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> matched = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\s*([-|+]?\\d+).*$/</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matched) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = +matched[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-线性遍历\"><a href=\"#2-线性遍历\" class=\"headerlink\" title=\"2.线性遍历\"></a>2.线性遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt2 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sign;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sign) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        sign = <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(str[i])) &#123;</span><br><span class=\"line\">        sign = str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = sign === <span class=\"string\">&#x27;-&#x27;</span> ? -res : res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>","more":"<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。</p>\n<p>当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。</p>\n<p>该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。</p>\n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。</p>\n<p>在任何情况下，若函数不能进行有效的转换时，请返回 0。</p>\n<p>说明：</p>\n<p>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</p>\n<p>示例 1:</p>\n<p>输入: “42”<br>输出: 42<br>示例 2:</p>\n<p>输入: “   -42”<br>输出: -42<br>解释: 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<br>示例 3:</p>\n<p>输入: “4193 with words”<br>输出: 4193<br>解释: 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。<br>示例 4:</p>\n<p>输入: “words and 987”<br>输出: 0<br>解释: 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。<br>示例 5:</p>\n<p>输入: “-91283472332”<br>输出: -2147483648<br>解释: 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。\n </p>\n<p>注意：本题与主站 8 题相同：<a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">https://leetcode-cn.com/problems/string-to-integer-atoi/</a></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof\">https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof</a></p>\n<h2 id=\"1-正则表达式\"><a href=\"#1-正则表达式\" class=\"headerlink\" title=\"1.正则表达式\"></a>1.正则表达式</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt1 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> matched = str.<span class=\"title function_\">match</span>(<span class=\"regexp\">/^\\s*([-|+]?\\d+).*$/</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!matched) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = +matched[<span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-线性遍历\"><a href=\"#2-线性遍历\" class=\"headerlink\" title=\"2.线性遍历\"></a>2.线性遍历</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">str</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">number</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strToInt2 = <span class=\"keyword\">function</span>(<span class=\"params\">str</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sign;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> max = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">31</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> min = <span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(-<span class=\"number\">2</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sign) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] === <span class=\"string\">&#x27; &#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;0&#x27;</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>) &#123;</span><br><span class=\"line\">        sign = <span class=\"string\">&#x27;+&#x27;</span>;</span><br><span class=\"line\">        res += str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ([<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"string\">&#x27;-&#x27;</span>].<span class=\"title function_\">includes</span>(str[i])) &#123;</span><br><span class=\"line\">        sign = str[i];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  res = sign === <span class=\"string\">&#x27;-&#x27;</span> ? -res : res;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &gt; max) <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res &lt; min) <span class=\"keyword\">return</span> min;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-14_21-58-08.png","slug":"Snipaste_2023-02-14_21-58-08.png","post":"cle99dccg00085onrcnnnb1nr","modified":0,"renderable":0},{"_id":"source/_posts/hexo：从0开始与踩坑实录/Snipaste_2023-02-16_13-28-44.png","slug":"Snipaste_2023-02-16_13-28-44.png","post":"cle99dccg00085onrcnnnb1nr","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-03-23-41.png","slug":"2022-10-07-03-23-41.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-08-14-35.png","slug":"2022-10-07-08-14-35.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-11-32-59.png","slug":"2022-10-07-11-32-59.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-12-05-02.png","slug":"2022-10-07-12-05-02.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-12-10-49.png","slug":"2022-10-07-12-10-49.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-14-34-57.png","slug":"2022-10-07-14-34-57.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-14-51-53.png","slug":"2022-10-07-14-51-53.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-07-16-00-30.png","slug":"2022-10-07-16-00-30.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-05-42-33.png","slug":"2022-10-08-05-42-33.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-13-31-55.png","slug":"2022-10-08-13-31-55.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-08-14-54-58.png","slug":"2022-10-08-14-54-58.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-06-17-02.png","slug":"2022-10-09-06-17-02.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-08-23.png","slug":"2022-10-09-07-08-23.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-15-45.png","slug":"2022-10-09-07-15-45.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-07-16-11.png","slug":"2022-10-09-07-16-11.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-09-12-16-09.png","slug":"2022-10-09-12-16-09.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-24-00-46-21.png","slug":"2022-10-24-00-46-21.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/oauth2实践/2022-10-24-03-52-06.png","slug":"2022-10-24-03-52-06.png","post":"cle99dccj000c5onr885w0dk8","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/998023-20180519212357826-1474719173.png","slug":"998023-20180519212357826-1474719173.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/add-in-after.png","slug":"add-in-after.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/add-in-before.png","slug":"add-in-before.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/add-in-middle.png","slug":"add-in-middle.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/ast.jpg","slug":"ast.jpg","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/attrs.png","slug":"attrs.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-01.png","slug":"diff-vnode-children-01.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-02.png","slug":"diff-vnode-children-02.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-03.png","slug":"diff-vnode-children-03.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-04.png","slug":"diff-vnode-children-04.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children-05.png","slug":"diff-vnode-children-05.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode-children.png","slug":"diff-vnode-children.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/diff-vnode.png","slug":"diff-vnode.png","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/vue中的diff算法实现/element.jpg","slug":"element.jpg","post":"cle99dcco000n5onr0sh28j4o","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_1.png","slug":"160_example_1.png","post":"cle99dcd9002d5onr0ehx5qsw","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_2.png","slug":"160_example_2.png","post":"cle99dcd9002d5onr0ehx5qsw","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_example_3.png","slug":"160_example_3.png","post":"cle99dcd9002d5onr0ehx5qsw","modified":0,"renderable":0},{"_id":"source/_posts/面试题52. 两个链表的第一个公共节点/160_statement.png","slug":"160_statement.png","post":"cle99dcd9002d5onr0ehx5qsw","modified":0,"renderable":0},{"_id":"source/_posts/面试题62-圆圈中最后剩下的数字/2020-04-16_17-00.png","slug":"2020-04-16_17-00.png","post":"cle99dcdr004n5onrbnc3fsve","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cle99dcca00035onr5d149l4a","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dccn000j5onresru7icc"},{"post_id":"cle99dccd00065onrhsnf6mmq","category_id":"cle99dccl000d5onr80u59g23","_id":"cle99dccq000q5onrhsa64jdw"},{"post_id":"cle99dcco000n5onr0sh28j4o","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dccu000x5onr4fvh2c1b"},{"post_id":"cle99dcco000n5onr0sh28j4o","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dccx00125onr1lbmbhqu"},{"post_id":"cle99dcce00075onr0yeigjkr","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dccy00155onrf5cid64b"},{"post_id":"cle99dcce00075onr0yeigjkr","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dccz001a5onr44p4ch2m"},{"post_id":"cle99dccq000p5onr0fy718di","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd0001d5onrh7gy6csm"},{"post_id":"cle99dcc600015onrh624dlj0","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dcd2001i5onr050y0s2p"},{"post_id":"cle99dcc600015onrh624dlj0","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dcd3001l5onrfyyheeud"},{"post_id":"cle99dcct000w5onraafzdrva","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd4001o5onrhmqecbgr"},{"post_id":"cle99dccw00105onrhtkmaunx","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd5001t5onr1qmmb41v"},{"post_id":"cle99dccx00145onr4ec6as8w","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd6001w5onr2e7ifozq"},{"post_id":"cle99dccg00085onrcnnnb1nr","category_id":"cle99dccv000z5onrb9zt8rau","_id":"cle99dcd700215onr1zlu6vih"},{"post_id":"cle99dccy00175onr5c4x8vec","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd800245onr7c9i9hgb"},{"post_id":"cle99dcd0001c5onr283k1qw8","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcd800285onr7lsnfop3"},{"post_id":"cle99dcci000b5onreuggb97q","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dcd9002b5onrc21yfde9"},{"post_id":"cle99dcci000b5onreuggb97q","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dcda002e5onr3w5z9guu"},{"post_id":"cle99dcd1001f5onrai7s5apd","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdb002h5onr87z71iaz"},{"post_id":"cle99dcd2001k5onr3qq32kng","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdc002k5onrdvizbswy"},{"post_id":"cle99dccj000c5onr885w0dk8","category_id":"cle99dcd1001g5onrhuoz25dy","_id":"cle99dcdd002n5onr7a1tevej"},{"post_id":"cle99dcd3001n5onr8te16bcw","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcde002q5onr80io3p8w"},{"post_id":"cle99dcd5001s5onr8i081k71","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcde002t5onr5i8529ej"},{"post_id":"cle99dccl000g5onr4miz385q","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dcdf002w5onre8fb9jkr"},{"post_id":"cle99dccl000g5onr4miz385q","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dcdg002z5onr7sbvgg1s"},{"post_id":"cle99dcd5001v5onr3fi22wkm","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh00325onr0xf2bldy"},{"post_id":"cle99dcd700205onr7539ajn9","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh00345onrhs7wdrq8"},{"post_id":"cle99dccm000i5onrc74cfgvv","category_id":"cle99dccb00045onr0tagcd1r","_id":"cle99dcdh00365onrhnbzc25t"},{"post_id":"cle99dccm000i5onrc74cfgvv","category_id":"cle99dcco000k5onrg1cs0hm3","_id":"cle99dcdh00385onr47x3gerf"},{"post_id":"cle99dcd700235onrbazs8mft","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003a5onr5k6mhh8l"},{"post_id":"cle99dcd800275onr3dnl65z6","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003c5onraota45nj"},{"post_id":"cle99dcd9002a5onrfnflcj11","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003e5onrhmjl0scz"},{"post_id":"cle99dcd9002d5onr0ehx5qsw","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003g5onr1aqjatoh"},{"post_id":"cle99dcda002g5onr5jtm78g0","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003i5onrezeraark"},{"post_id":"cle99dcdb002j5onr551r7znr","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003k5onr6byd57w3"},{"post_id":"cle99dcdc002m5onrevn3feby","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdh003m5onr6b2sh7ox"},{"post_id":"cle99dcdd002p5onr1gtk808f","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdi003o5onr3535488l"},{"post_id":"cle99dcde002s5onraz761nvo","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdi003q5onrauy923po"},{"post_id":"cle99dcde002v5onremfmfake","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdi003s5onrfy1cb4h0"},{"post_id":"cle99dcdf002y5onr5pfz7rvu","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdi003u5onr0zsu6dvh"},{"post_id":"cle99dcdg00315onr9sy3gm2k","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdi003w5onrfpl67882"},{"post_id":"cle99dcdp004k5onr9nbo6tdp","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcds004q5onr6pnc0291"},{"post_id":"cle99dcdq004l5onrct7pc8tx","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdt004s5onr9to92com"},{"post_id":"cle99dcdr004n5onrbnc3fsve","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdt004u5onrf8vz45e0"},{"post_id":"cle99dcds004p5onr4j62cqfs","category_id":"cle99dcch00095onr1xlq0l33","_id":"cle99dcdt004w5onr9v8j3mrf"}],"PostTag":[{"post_id":"cle99dcci000b5onreuggb97q","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dccl000f5onr3s6a8vd7"},{"post_id":"cle99dcci000b5onreuggb97q","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dccm000h5onr60h304pi"},{"post_id":"cle99dcc600015onrh624dlj0","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dcco000m5onr9d3236tz"},{"post_id":"cle99dcc600015onrh624dlj0","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dccp000o5onr56e4gqji"},{"post_id":"cle99dccl000g5onr4miz385q","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dccr000r5onr6pjv365u"},{"post_id":"cle99dccl000g5onr4miz385q","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dcct000v5onrh1wv5xyb"},{"post_id":"cle99dccm000i5onrc74cfgvv","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dccv000y5onrhb2a415g"},{"post_id":"cle99dccm000i5onrc74cfgvv","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dccx00135onrd5wfbhqy"},{"post_id":"cle99dcco000n5onr0sh28j4o","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dccy00165onr552z0bd1"},{"post_id":"cle99dcco000n5onr0sh28j4o","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dcd0001b5onrbcd6hvkg"},{"post_id":"cle99dcca00035onr5d149l4a","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcd1001e5onr0xniblpk"},{"post_id":"cle99dcca00035onr5d149l4a","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcd2001j5onr6kaqbksi"},{"post_id":"cle99dccq000p5onr0fy718di","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcd3001m5onr5fhp4ol3"},{"post_id":"cle99dccq000p5onr0fy718di","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcd4001r5onrh6z2813y"},{"post_id":"cle99dcct000w5onraafzdrva","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcd5001u5onr5b4k9lsu"},{"post_id":"cle99dcct000w5onraafzdrva","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcd7001z5onrd6km5ux9"},{"post_id":"cle99dccw00105onrhtkmaunx","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcd700225onr0gj718ks"},{"post_id":"cle99dccw00105onrhtkmaunx","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcd800265onr2ecs9d5o"},{"post_id":"cle99dccx00145onr4ec6as8w","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcd900295onrae9148uj"},{"post_id":"cle99dccx00145onr4ec6as8w","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcd9002c5onr6woxaoay"},{"post_id":"cle99dccd00065onrhsnf6mmq","tag_id":"cle99dccr000t5onra0aw8q7e","_id":"cle99dcda002f5onr5fkjez8p"},{"post_id":"cle99dccd00065onrhsnf6mmq","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdb002i5onr4oc0gq77"},{"post_id":"cle99dccy00175onr5c4x8vec","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdc002l5onr11xx4lpl"},{"post_id":"cle99dccy00175onr5c4x8vec","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdd002o5onr4maadmdr"},{"post_id":"cle99dcd0001c5onr283k1qw8","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcde002r5onr3k8pdv73"},{"post_id":"cle99dcd0001c5onr283k1qw8","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcde002u5onr5vfpfs7a"},{"post_id":"cle99dcce00075onr0yeigjkr","tag_id":"cle99dccc00055onr91ql8co5","_id":"cle99dcdf002x5onr9vyd2rsc"},{"post_id":"cle99dcce00075onr0yeigjkr","tag_id":"cle99dcch000a5onrcn2d998s","_id":"cle99dcdg00305onr02qgbdm6"},{"post_id":"cle99dcd1001f5onrai7s5apd","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdh00335onr0phf8bu5"},{"post_id":"cle99dcd1001f5onrai7s5apd","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdh00355onr7cficgof"},{"post_id":"cle99dcd2001k5onr3qq32kng","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdh00375onr02er8h33"},{"post_id":"cle99dcd2001k5onr3qq32kng","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdh00395onr01eofgmh"},{"post_id":"cle99dccg00085onrcnnnb1nr","tag_id":"cle99dcd2001h5onrbyj56a1x","_id":"cle99dcdh003b5onr03rb05ub"},{"post_id":"cle99dcd3001n5onr8te16bcw","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdh003d5onr9hgsga8t"},{"post_id":"cle99dcd3001n5onr8te16bcw","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdh003f5onr6v2gfpyt"},{"post_id":"cle99dcd5001v5onr3fi22wkm","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdh003h5onr5zaub620"},{"post_id":"cle99dcd5001v5onr3fi22wkm","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdh003j5onrfddpcr1l"},{"post_id":"cle99dcd700205onr7539ajn9","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdh003l5onraty8er6x"},{"post_id":"cle99dcd700205onr7539ajn9","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdh003n5onrcgh8g96y"},{"post_id":"cle99dccj000c5onr885w0dk8","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi003p5onr7qmfaxxq"},{"post_id":"cle99dccj000c5onr885w0dk8","tag_id":"cle99dcd6001y5onrgkgag42d","_id":"cle99dcdi003r5onreu3b0qkj"},{"post_id":"cle99dcd700235onrbazs8mft","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi003t5onre8l73685"},{"post_id":"cle99dcd700235onrbazs8mft","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi003v5onrfci2bbjp"},{"post_id":"cle99dcd800275onr3dnl65z6","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi003x5onrg17i6n8a"},{"post_id":"cle99dcd800275onr3dnl65z6","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi003y5onrglm615n5"},{"post_id":"cle99dcd5001s5onr8i081k71","tag_id":"cle99dcd800255onr7opjhypx","_id":"cle99dcdi003z5onrdqplglnp"},{"post_id":"cle99dcd9002a5onrfnflcj11","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi00405onr2ci6ar78"},{"post_id":"cle99dcd9002a5onrfnflcj11","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi00415onr2ieudpiz"},{"post_id":"cle99dcd9002d5onr0ehx5qsw","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi00425onr9hzmakjs"},{"post_id":"cle99dcd9002d5onr0ehx5qsw","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi00435onrap7z0xcq"},{"post_id":"cle99dcda002g5onr5jtm78g0","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi00445onrdmccf0dv"},{"post_id":"cle99dcda002g5onr5jtm78g0","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi00455onr52be8r7n"},{"post_id":"cle99dcdb002j5onr551r7znr","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi00465onrep6ce6j8"},{"post_id":"cle99dcdb002j5onr551r7znr","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi00475onrbmf7b6ik"},{"post_id":"cle99dcdc002m5onrevn3feby","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi00485onre34t95yc"},{"post_id":"cle99dcdc002m5onrevn3feby","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi00495onraava4uat"},{"post_id":"cle99dcdd002p5onr1gtk808f","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi004a5onr775d84ai"},{"post_id":"cle99dcdd002p5onr1gtk808f","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi004b5onr75ns3drz"},{"post_id":"cle99dcde002s5onraz761nvo","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi004c5onrdqg1eig0"},{"post_id":"cle99dcde002s5onraz761nvo","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi004d5onraqg3hmqm"},{"post_id":"cle99dcde002v5onremfmfake","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi004e5onr8h41h29j"},{"post_id":"cle99dcde002v5onremfmfake","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi004f5onr8t8re337"},{"post_id":"cle99dcdf002y5onr5pfz7rvu","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi004g5onr4bp1aen2"},{"post_id":"cle99dcdf002y5onr5pfz7rvu","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi004h5onr1pr0e42u"},{"post_id":"cle99dcdg00315onr9sy3gm2k","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdi004i5onr46t41yr4"},{"post_id":"cle99dcdg00315onr9sy3gm2k","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdi004j5onr5gy40j14"},{"post_id":"cle99dcdp004k5onr9nbo6tdp","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdr004m5onrbgadfw0e"},{"post_id":"cle99dcdp004k5onr9nbo6tdp","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcds004o5onr5bos44rt"},{"post_id":"cle99dcdq004l5onrct7pc8tx","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcds004r5onrdh2dg5pb"},{"post_id":"cle99dcdq004l5onrct7pc8tx","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdt004t5onragdv0x72"},{"post_id":"cle99dcdr004n5onrbnc3fsve","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdt004v5onr9oanah4y"},{"post_id":"cle99dcdr004n5onrbnc3fsve","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdt004x5onr9n0chuz0"},{"post_id":"cle99dcdr004n5onrbnc3fsve","tag_id":"cle99dcd800255onr7opjhypx","_id":"cle99dcdt004y5onrbaz1ee8p"},{"post_id":"cle99dcds004p5onr4j62cqfs","tag_id":"cle99dccl000e5onr2o00e1pb","_id":"cle99dcdt004z5onr0vnbgi6c"},{"post_id":"cle99dcds004p5onr4j62cqfs","tag_id":"cle99dcco000l5onr2zbr2cza","_id":"cle99dcdt00505onr0jgig6tb"}],"Tag":[{"name":"vue","_id":"cle99dccc00055onr91ql8co5"},{"name":"vue源码分析","_id":"cle99dcch000a5onrcn2d998s"},{"name":"算法题","_id":"cle99dccl000e5onr2o00e1pb"},{"name":"旧文迁移","_id":"cle99dcco000l5onr2zbr2cza"},{"name":"Rust","_id":"cle99dccr000t5onra0aw8q7e"},{"name":"hexo","_id":"cle99dcd2001h5onrbyj56a1x"},{"name":"oauth2","_id":"cle99dcd6001y5onrgkgag42d"},{"name":"LCOF","_id":"cle99dcd800255onr7opjhypx"}]}}