$element-separator: '__';
$modifier-separator: '--';


@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
      // get the substring from the first character to the separator
      $item: str-slice($string, 1, $index - 1);
      // push item to array
      $split-arr: append($split-arr, $item);
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
      // find new index of separator
      $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

@function current-selector($str) {
  $list: str-split(#{$str}, ' ');
  $len: length($list);
  @return str-slice(nth($list, $len), 2);
}

$current-block: '' !global;
$current-element: '' !global;

@mixin block($name) {
  $old-block: $current-block;
  $current-block: $name !global;

  @at-root .#{$name} {
    @content;
  }
}

@mixin element($name) {
  $old-element: $current-element;
  $current-element: $current-block + $element-separator + $name !global;
  
  @at-root .#{$current-element} {
    @content;
  }
  $current-element: $old-element !global;
}

@mixin modifier($name) {
  $parent: get-modifier-parent();

  $selector: $parent + $modifier-separator + $name;
  @debug $selector;

  @at-root .#{$selector} {
    @content;
  }
}

@mixin selector($args...) {

}

@function get-modifier-parent() {
  $current-is-element: $current-element != '';
  @return if($current-is-element, $current-element, $current-block);
}

@function b($name) {
  @return '.' + $name;
}

@function e($args...) {
  $block: $current-block;
  $element: nth($args, 1);
  @if length($args) > 1 {
    $block:  nth($args, 1);
    $element: nth($args, 2);
  }
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $block + $element-separator + $unit + ","};
  }

  @return $currentSelector;
}

@function m($args...) {
  $prefix: '.' ;
  $args-len: length($args);
  $selector: $prefix + get-modifier-parent();
  $modifier: nth($args, 1);
  @if $args-len == 2 {
    $selector: $prefix + nth($args, 1);
    $modifier: nth($args, 2);
  } @else if $args-len == 3 {
    $selector: $prefix + nth($args, 1) + $element-separator + nth($args, 2);
    $modifier: nth($args, 3);
  }

  @return $selector + $modifier-separator + $modifier;
}












@include block(date) {
  @include element(header) {
    content: 'date__header';

    $temp: simple-selectors('.number .seld  .sdfdf .erewr');
    @debug nth($temp, length($temp));
    #{selector-append(m(test), m(disabled))} {
      content: '123123';
    }
    @include modifier(active) {
      color: red;
    }
  }

  @include element(body) {
    content: 'date__body';
  }

  @include element(footer) {
    content: 'date__footer';
  }

  @include modifier(active) {
    color: red;
  }
}
